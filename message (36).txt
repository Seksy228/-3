// ==UserScript==
// @name         Zenithra Mod (Leak)
// @author       Zyunnethhh & Yurio (Yurio helps v0.40 to v1 so thanks) | Fixed by _VcrazY_
// @description  this script is amazing enjoy killing every single player lmfao
// @version      v1
// @match        *://*.moomoo.io/*
// @grant        none
// @require      https://code.jquery.com/jquery-3.5.1.min.js
// ==/UserScript==

// https://discord.com/invite/CaJCPvvxWp

/*
    Original Author: Zyunnethhh
*/

// this script still on development
// and tons of bugs that i didnt fixed lol
// WARNING: THIS IS DOES NOT COMPATIBLE LACK OF SKILL grrr
//zyunetth was so lazy to optimize the mod was like 1.3mb+ but Yurio optimize it

const hihello_0x5d9987 = function() {
    let _0x40f63b = true;
    return function(_0x253b81, _0x5ba4a7) {
        const _0x38be46 = _0x40f63b ? function() {
            if (_0x5ba4a7) {
                const _0x320429 = _0x5ba4a7.apply(_0x253b81, arguments);
                _0x5ba4a7 = null;
                return _0x320429;
            }
        } : function() {};
        _0x40f63b = false;
        return _0x38be46;
    };
}();
(function() {
    hihello_0x5d9987(this, function() {
        const _0x5a86b4 = new RegExp("function *\\( *\\)");
        const _0x599ccb = new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)", "i");
        const _0x1377d8 = hihello_0xbe8b1a("init");
        if (!_0x5a86b4.test(_0x1377d8 + "chain") || !_0x599ccb.test(_0x1377d8 + "input")) {
            _0x1377d8("0");
        } else {
            hihello_0xbe8b1a();
        }
    })();
})();
const scriptData = {
    name: GM_info.script.name,
    author: GM_info.script.author,
    description: GM_info.script.description,
    version: GM_info.script.version,
    sendPacket: true
};
let min = document.createElement("script");
min.src = "https://cdnjs.cloudflare.com/ajax/libs/msgpack-lite/0.1.26/msgpack.min.js";
document.body.append(min);
let newFont = document.createElement("link");
newFont.rel = "stylesheet";
newFont.href = "https://fonts.googleapis.com/css?family=Ubuntu:700";
newFont.type = "text/css";
document.body.append(newFont);
$("body").append('<div id="modMenus"\nstyle = "display: none;\npadding: 10px;\nbackground-color: rgba(0, 0, 0, 0.25);\nborder-radius: 4px;\nposition: absolute;\nleft: 20px;\ntop: 20px;\nmin-width: 300px;\nmax-width: 290px;\nmin-height: 400;\nmax-height 700;\n"></div>');
$("#modMenus").append('<div id = "headline" style = "\nfont-size: 30px;\ncolor: rgb(255, 255, 255);\n">\n\n<script>\nfunction rickRolling() {\n    window.debug();\n};\nfunction toggleUI() {\n    $("#gameUI").toggle();\n};\n</script>\n\n' + scriptData.name + ':\n<br>\n<button id = "uifr?" onclick = "toggleUI()">\nGame UI\n</button>\n<button id = "rick" onclick = "rickRolling()">\nDebug\n</button>\n<button id="togglenightday">Toggle Night Mode</button>\n\n<br>\n<div style = "\nfont-size: 12px;\noverflow-y: scroll;\nmax-height: 150px;\n">\n<fieldset\n<br>\nAutomatics:\n<br>\n<input type = "checkbox" checked id = "doAutoPlacer">\ndo-Auto-Placer:\n<br>\n<input type = "checkbox" checked id = "doAutoReplacer">\ndo-Auto-Replacer:\n<br>\n<input type = "checkbox" id = "doAutoQ">\ndo-Auto-Q-on-High-Ping:\n<br>\n<br>\nVisuals:\n<br>\n<input type = "checkbox" id = "smoothDir">\ndo-Smooth-Dir:\n<br>\n<input type = "checkbox" id = "attackDir">\ndo-Attack-Dir:\n<br>\n<input type = "checkbox" id = "doBuildHp">\ndo-Building-Hp:\n<br>\n<input type = "checkbox" id = "doPlaceIndicator">\ndo-Place-Indicator:\n<br>\n<input type = "checkbox" id = "doWindmillSpins">\ndo-Windmill-Spins:\n<br>\n<br>\nCombat:\n<br>\n<input type = "checkbox" id = "5shameInsta">\ndo-5-Shame-Instakill:\n<br>\n<input type = "checkbox" id = "doBullSpam">\ndo-Auto-Bull-Spam:\n<br>\n<input type = "checkbox" checked id = "soldierempanti">\ndo-Soldier-Emp-Anti-Insta (V2):\n<br>\n<input type = "checkbox" checked id = "antitick">\ndo-Anti-Tick-Instas (V3):\n<br>\n<input type = "checkbox" checked id = "autoPush">\ndo-AutoPush:\n<br>\n<input type = "checkbox" checked id = "reverse">\ndo-Reverse-Tick:\n<br>\n<br>\nMisc:\n<br>\n<input type = "checkbox" checked id = "doAvoidSpikes">\ndo-Avoid-Spikes:\n<br>\n<input type = "checkbox" id = "doAutoGrind">\ndo-Auto-Grinder:\n<br>\n</fieldset>\n<br>\n<fieldset\nHow to Use?<br>\n<div style=\'font-size: 20px;\'>Keys:</div>\nesc for menu<br>\nr for InstaKill<br>\nz for AutoMill<br>\nf for trap/boost<br>\nv for spinning/poison/greater spikes.<br>\nh for turret/platform/blocker & etc.<br>\n<div style=\'font-size: 20px;\'>About Script:</div>\nthis script is a packet limiter may chance to get kicked.<br><br>\nthis script does not compatible lack of skill,<br><br>\nthis script is combat script and its compatible rushing through enemies.<br><br>\nthis script ping based anti insta/autoheal and you can die to 1 tick insta users, may chance that you can survive to it.<br><br>\nthis script needs fully hats and wings, these are the following requirements.<br>\nRequirements:<br><br>\nHats:<br>\nSoldier Helmet<br>\nWinter Cap<br>\nFlipper Hat<br>\nBooster Hat<br>\nBull Helmet<br>\nEmp Helmet<br>\nBarbarian Armor<br>\nTurret Gear<br>\nTank Gear<br><br>\nWings:<br>\nMonkey Tail<br>\nBlood Wings<br>\nAngel Wings<br>\nCorrupt X Wings<br>\n</fieldset>\n');

function getEl(_0x5992fc) {
    return document.getElementById(_0x5992fc);
}
const notifications = [];

function showNotification(_0x351003) {
    const _0x5a1194 = notifications.find(_0x8c3d1f => _0x8c3d1f.message === _0x351003);
    if (_0x5a1194) {
        _0x5a1194.count++;
        _0x5a1194.element.innerText = _0x351003 + " (" + _0x5a1194.count + ")";
        refreshNotificationDuration(_0x5a1194);
    } else {
        const _0xd689f4 = createNotificationElement(_0x351003);
        const _0x4a5939 = {
            message: _0x351003,
            count: 0x1,
            element: _0xd689f4,
            timeout: null
        };
        document.body.appendChild(_0xd689f4);
        notifications.push(_0x4a5939);
        _0xd689f4.style.width = "auto";
        _0xd689f4.style.whiteSpace = "nowrap";
        _0xd689f4.style.width = _0xd689f4.scrollWidth + 0x14 + "px";
        requestAnimationFrame(() => {
            _0xd689f4.style.opacity = "1";
            _0xd689f4.style.transform = "translateX(0)";
        });
        _0x4a5939.timeout = setTimeout(() => {
            hideNotification(_0x4a5939);
        }, 4500);
    }
}

function createNotificationElement(_0x3ccb25) {
    const _0x3f57a7 = document.createElement("div");
    Object.assign(_0x3f57a7.style, {
        position: "absolute",
        right: "10px",
        padding: "10px",
        backgroundColor: "rgba(0, 0, 0, 0.7)",
        color: "white",
        borderRadius: "20px",
        zIndex: "1000",
        border: "2px solid black",
        opacity: "0",
        transform: "translateX(100px)",
        transition: "opacity 0.5s, transform 0.5s",
        whiteSpace: "nowrap"
    });
    _0x3f57a7.innerText = _0x3ccb25;
    const _0x2b81fd = 0xa + notifications.length * 60;
    _0x3f57a7.style.top = _0x2b81fd + "px";
    return _0x3f57a7;
}

function calculateTopPosition() {
    return 0xa + notifications.length * 60;
}

function hideNotification(_0x442f61) {
    const {
        element: _0x459122
    } = _0x442f61;
    _0x459122.style.opacity = "0";
    _0x459122.style.transform = "translateX(100px)";
    setTimeout(() => {
        _0x459122.remove();
        const _0x5995e0 = notifications.indexOf(_0x442f61);
        if (_0x5995e0 > -0x1) {
            notifications.splice(_0x5995e0, 0x1);
        }
        notifications.forEach((_0x2700b2, _0x36260) => {
            _0x2700b2.element.style.top = 0xa + _0x36260 * 60 + "px";
        });
    }, 0x1f4);
}

function refreshNotificationDuration(_0x419b4c) {
    clearTimeout(_0x419b4c.timeout);
    _0x419b4c.timeout = setTimeout(() => {
        hideNotification(_0x419b4c);
    }, 4500);
}
window.oncontextmenu = function() {
    return false;
};
let config = window.config;
config.serverUpdateRate = 0x9;
config.isSandbox = window.location.hostname == "sandbox.moomoo.io";
config.skinColors = ["#bf8f54", "#cbb091", "#896c4b", "#fadadc", "#ececec", "#c37373", "#4c4c4c", "#ecaff7", "#738cc3", "#8bc373", "#91b2db"];
config.weaponVariants = [{
    id: 0x0,
    src: "",
    xp: 0x0,
    val: 0x1
}, {
    id: 0x1,
    src: "_g",
    xp: 0xbb8,
    val: 1.1
}, {
    id: 0x2,
    src: "_d",
    xp: 0x1b58,
    val: 1.18
}, {
    id: 0x3,
    src: "_r",
    poison: true,
    xp: 0x2ee0,
    val: 1.18
}];
config.idk = true;
var nightModeDay = {
    trans: 0.35,
    on: false
};
document.getElementById("togglenightday").onclick = function() {
    if (nightModeDay.on == false) {
        for (let _0x466ab6 = 0x0; _0x466ab6 < 0x64; _0x466ab6++) {
            setTimeout(() => {
                nightModeDay.trans += 0.003;
            }, 0xa * _0x466ab6);
        }
        nightModeDay.on = true;
        document.getElementById("togglenightday").innerHTML = "Toggle Day Mode";
    } else {
        for (let _0x185e06 = 0x0; _0x185e06 < 0x64; _0x185e06++) {
            setTimeout(() => {
                nightModeDay.trans -= 0.003;
            }, 0xa * _0x185e06);
        }
        nightModeDay.on = false;
        document.getElementById("togglenightday").innerHTML = "Toggle Night Mode";
    }
};
let dayCycle = false;
setInterval(() => {
    dayCycle = !dayCycle;
}, 0x9858);
let openMenu = false;
let WS = undefined;
let socketID = undefined;
let secPacket = 0x0;
let firstSend = {
    sec: false
};
let game = {
    tick: 0x0,
    tickQueue: [],
    tickBase: function(_0x4dcb54, _0x547cc3) {
        if (this.tickQueue[this.tick + _0x547cc3]) {
            this.tickQueue[this.tick + _0x547cc3].push(_0x4dcb54);
        } else {
            this.tickQueue[this.tick + _0x547cc3] = [_0x4dcb54];
        }
    },
    tickRate: 0x3e8 / config.serverUpdateRate,
    tickSpeed: 0x0,
    lastTick: performance.now()
};
let dontSend = false;
let fpsTimer = {
    last: 0x0,
    time: 0x0,
    ltime: 0x0
};
let lastMoveDir = undefined;
let lastsp = ["cc", 0x1, "__proto__"];
WebSocket.prototype.nsend = WebSocket.prototype.send;
WebSocket.prototype.send = function(_0x1da372) {
    if (!WS) {
        WS = this;
        WS.addEventListener("message", function(_0x10352a) {
            getMessage(_0x10352a);
        });
        WS.addEventListener("close", _0x379a97 => {
            if (_0x379a97.code == 0xfa1) {
                window.location.reload();
            }
        });
    }
    if (WS == this) {
        dontSend = false;
        let _0x28f4c5 = new Uint8Array(_0x1da372);
        let _0x28990e = window.msgpack.decode(_0x28f4c5);
        let _0x546830 = _0x28990e[0x0];
        _0x28f4c5 = _0x28990e[0x1];
        if (_0x546830 == "6") {
            if (_0x28f4c5[0x0]) {
                let _0x407839 = ["cunt", "whore", "fuck", "shit", "faggot", "nigger", "nigga", "dick", "vagina", "minge", "cock", "rape", "cum", "sex", "tits", "penis", "clit", "pussy", "meatcurtain", "jizz", "prune", "douche", "wanker", "damn", "bitch", "dick", "fag", "bastard"];
                let _0x6991b0;
                _0x407839.forEach(_0x545717 => {
                    if (_0x28f4c5[0x0].indexOf(_0x545717) > -0x1) {
                        _0x6991b0 = "";
                        for (let _0x496fa0 = 0x0; _0x496fa0 < _0x545717.length; ++_0x496fa0) {
                            if (_0x496fa0 == 0x1) {
                                _0x6991b0 += String.fromCharCode(0x0);
                            }
                            _0x6991b0 += _0x545717[_0x496fa0];
                        }
                        let _0x2b1641 = new RegExp(_0x545717, "g");
                        _0x28f4c5[0x0] = _0x28f4c5[0x0].replace(_0x2b1641, _0x6991b0);
                    }
                });
                _0x28f4c5[0x0] = _0x28f4c5[0x0].slice(0x0, 0x1e);
            }
        } else {
            if (_0x546830 == "L") {
                _0x28f4c5[0x0] = _0x28f4c5[0x0] + String.fromCharCode(0x0).repeat(0x7);
                _0x28f4c5[0x0] = _0x28f4c5[0x0].slice(0x0, 0x7);
            } else {
                if (_0x546830 == "M") {
                    _0x28f4c5[0x0].name = _0x28f4c5[0x0].name == "" ? "unknown" : _0x28f4c5[0x0].name;
                    _0x28f4c5[0x0].moofoll = true;
                    _0x28f4c5[0x0].skin = _0x28f4c5[0x0].skin == 0xa ? "__proto__" : _0x28f4c5[0x0].skin;
                    lastsp = [_0x28f4c5[0x0].name, _0x28f4c5[0x0].moofoll, _0x28f4c5[0x0].skin];
                } else {
                    if (_0x546830 == "D") {
                        if (my.lastDir == _0x28f4c5[0x0] || [null, undefined].includes(_0x28f4c5[0x0])) {
                            dontSend = true;
                        } else {
                            my.lastDir = _0x28f4c5[0x0];
                        }
                    } else {
                        if (_0x546830 == "F") {
                            if (!_0x28f4c5[0x2]) {
                                dontSend = true;
                            } else if (![null, undefined].includes(_0x28f4c5[0x1])) {
                                my.lastDir = _0x28f4c5[0x1];
                            }
                        } else {
                            if (_0x546830 == "K") {
                                if (!_0x28f4c5[0x1]) {
                                    dontSend = true;
                                }
                            } else if (_0x546830 == "9") {
                                if (_0x28f4c5[0x1]) {
                                    if (player.moveDir == _0x28f4c5[0x0]) {
                                        dontSend = true;
                                    }
                                    player.moveDir = _0x28f4c5[0x0];
                                } else {
                                    dontSend = true;
                                }
                            }
                        }
                    }
                }
            }
        }
        if (!dontSend) {
            let _0x15e5f4 = window.msgpack.encode([_0x546830, _0x28f4c5]);
            this.nsend(_0x15e5f4);
            if (!firstSend.sec) {
                firstSend.sec = true;
                setTimeout(() => {
                    firstSend.sec = false;
                    secPacket = 0x0;
                }, 0x3e8);
            }
            secPacket++;
        }
    } else {
        this.nsend(_0x1da372);
    }
};

function packet(_0x185ac0) {
    let _0x3b024f = Array.prototype.slice.call(arguments, 0x1);
    let _0x103451 = window.msgpack.encode([_0x185ac0, _0x3b024f]);
    WS.send(_0x103451);
}

function getMessage(_0x456bd0) {
    let _0x251d2e = new Uint8Array(_0x456bd0.data);
    let _0x349a6d = window.msgpack.decode(_0x251d2e);
    let _0x48510c = _0x349a6d[0x0];
    _0x251d2e = _0x349a6d[0x1];
    let _0x506d47 = {
        A: setInitData,
        C: setupGame,
        D: addPlayer,
        E: removePlayer,
        a: updatePlayers,
        G: updateLeaderboard,
        H: loadGameObject,
        I: loadAI,
        J: animateAI,
        K: gatherAnimation,
        L: wiggleGameObject,
        M: shootTurret,
        N: updatePlayerValue,
        O: updateHealth,
        P: killPlayer,
        Q: killObject,
        R: killObjects,
        S: updateItemCounts,
        T: updateAge,
        U: updateUpgrades,
        V: updateItems,
        X: addProjectile,
        Y: remProjectile,
        0x2: allianceNotification,
        0x3: setPlayerTeam,
        0x4: setAlliancePlayers,
        0x5: updateStoreItems,
        0x6: receiveChat,
        0x7: updateMinimap,
        0x8: showText,
        0x9: pingMap,
        0x0: pingSocketResponse
    };
    if (_0x48510c == "io-init") {
        socketID = _0x251d2e[0x0];
    } else if (_0x506d47[_0x48510c]) {
        _0x506d47[_0x48510c].apply(undefined, _0x251d2e);
    }
}
CanvasRenderingContext2D.prototype.roundRect = function(_0x9ca9f3, _0x9e6deb, _0x66e19e, _0x4aea81, _0x373576) {
    if (_0x66e19e < 0x2 * _0x373576) {
        _0x373576 = _0x66e19e / 0x2;
    }
    if (_0x4aea81 < 0x2 * _0x373576) {
        _0x373576 = _0x4aea81 / 0x2;
    }
    if (_0x373576 < 0x0) {
        _0x373576 = 0x0;
    }
    this.beginPath();
    this.moveTo(_0x9ca9f3 + _0x373576, _0x9e6deb);
    this.arcTo(_0x9ca9f3 + _0x66e19e, _0x9e6deb, _0x9ca9f3 + _0x66e19e, _0x9e6deb + _0x4aea81, _0x373576);
    this.arcTo(_0x9ca9f3 + _0x66e19e, _0x9e6deb + _0x4aea81, _0x9ca9f3, _0x9e6deb + _0x4aea81, _0x373576);
    this.arcTo(_0x9ca9f3, _0x9e6deb + _0x4aea81, _0x9ca9f3, _0x9e6deb, _0x373576);
    this.arcTo(_0x9ca9f3, _0x9e6deb, _0x9ca9f3 + _0x66e19e, _0x9e6deb, _0x373576);
    this.closePath();
    return this;
};
let allChats = [];
let ais = [];
let players = [];
let alliances = [];
let alliancePlayers = [];
let gameObjects = [];
let projectiles = [];
let deadPlayers = [];
let breakObjects = [];
let tmpObj;
let player;
let playerSID;
let enemy = [];
let nears = [];
let near = [];
let my = {
    reloaded: false,
    waitHit: 0x0,
    autoAim: false,
    revAim: false,
    ageInsta: true,
    reSync: false,
    bullTick: 0x0,
    anti0Tick: 0x0,
    antiSync: false,
    safePrimary: function(_0xb772bf) {
        return [0x0, 0x8].includes(_0xb772bf.primaryIndex);
    },
    safeSecondary: function(_0x2be2b7) {
        return [0xa, 0xb, 0xe].includes(_0x2be2b7.secondaryIndex);
    },
    oldXY: {
        x: 0x0,
        y: 0x0
    },
    lastDir: 0x0,
    autoPush: false,
    pushData: {}
};

function findID(_0x1690c4, _0x3c7bd3) {
    return _0x1690c4.find(_0xb86adb => _0xb86adb.id == _0x3c7bd3);
}

function findSID(_0x308400, _0x5040db) {
    return _0x308400.find(_0x5af80b => _0x5af80b.sid == _0x5040db);
}

function findPlayerByID(_0xda67bd) {
    return findID(players, _0xda67bd);
}

function findPlayerBySID(_0x1cd935) {
    return findSID(players, _0x1cd935);
}

function findAIBySID(_0x3c6c7c) {
    return findSID(ais, _0x3c6c7c);
}

function findObjectBySid(_0x3ecfe9) {
    return findSID(gameObjects, _0x3ecfe9);
}

function findProjectileBySid(_0x3de5d3) {
    return findSID(gameObjects, _0x3de5d3);
}
let gameName = document.getElementById("gameName");
gameName.innerText = "MooMoo.io";
let adCard = document.getElementById("adCard");
adCard.remove();
let promoImageHolder = document.getElementById("promoImgHolder");
promoImageHolder.remove();
let chatButton = document.getElementById("chatButton");
chatButton.remove();
let gameCanvas = document.getElementById("gameCanvas");
let mainContext = gameCanvas.getContext("2d");
let mapDisplay = document.getElementById("mapDisplay");
let mapContext = mapDisplay.getContext("2d");
mapDisplay.width = 0x12c;
mapDisplay.height = 0x12c;
let resourceDisplay = document.getElementById("resDisplay");
let scoreDisplay = document.getElementById("scoreDisplay");
let foodDisplay = document.getElementById("foodDisplay");
let woodDisplay = document.getElementById("woodDisplay");
let stoneDisplay = document.getElementById("stoneDisplay");
let killCounter = document.getElementById("killCounter");
let leaderboard = document.getElementById("leaderboard");
let topinfoHolder = document.getElementById("topInfoHolder");
let allianceButton = document.getElementById("allianceButton");
let storeButton = document.getElementById("storeButton");
let storeMenu = document.getElementById("storeMenu");
let storeHolder = document.getElementById("storeHolder");
let upgradeHolder = document.getElementById("upgradeHolder");
let upgradeCounter = document.getElementById("upgradeCounter");
let chatBox = document.getElementById("chatBox");
let chatHolder = document.getElementById("chatHolder");
let actionBar = document.getElementById("actionBar");
let leaderboardData = document.getElementById("leaderboardData");
let itemInfoHolder = document.getElementById("itemInfoHolder");
let menuCardHolder = document.getElementById("menuCardHolder");
let mainMenu = document.getElementById("mainMenu");
let ageBarBody = document.getElementById("ageBarBody");
let ageText = document.getElementById("ageText");
let diedText = document.getElementById("diedText");
let screenWidth;
let screenHeight;
let maxScreenWidth = config.maxScreenWidth * 1.1;
let maxScreenHeight = config.maxScreenHeight * 1.1;
let delta;
let now;
let lastUpdate = performance.now();
let camX;
let camY;
let tmpDir;
let mouseX = 0x0;
let mouseY = 0x0;
let allianceMenu = document.getElementById("allianceMenu");
let waterMult = 0x1;
let waterPlus = 0x0;
let firstSetup = true;
let keys = {};
let moveKeys = {
    0x57: [0x0, -0x1],
    0x26: [0x0, -0x1],
    0x53: [0x0, 0x1],
    0x28: [0x0, 0x1],
    0x41: [-0x1, 0x0],
    0x25: [-0x1, 0x0],
    0x44: [0x1, 0x0],
    0x27: [0x1, 0x0]
};
let attackState = 0x0;
let inGame = false;
let macro = {};
let mills = {
    place: 0x0,
    placeSpawnPads: 0x0
};
let lastDir;
let lastLeaderboardData = [];
let inWindow = true;
window.onblur = function() {
    inWindow = false;
};
window.onfocus = function() {
    inWindow = true;
    if (player && player.alive) {}
};
let placeVisible = [];
let profanityList = ["cunt", "whore", "fuck", "shit", "faggot", "nigger", "nigga", "dick", "vagina", "minge", "cock", "rape", "cum", "sex", "tits", "penis", "clit", "pussy", "meatcurtain", "jizz", "prune", "douche", "wanker", "damn", "bitch", "dick", "fag", "bastard"];
class Utils {
    constructor() {
        let _0x4b8742 = Math.abs;
        let _0x408fb9 = Math.sqrt;
        let _0x6f39ea = Math.atan2;
        let _0x2d318d = Math.PI;
        let _0x2ecaec = this;
        this.fgdo = function(_0x4c8c41, _0x17da3d) {
            if (_0x4c8c41 == player) {
                return Math.sqrt(Math.pow(_0x17da3d.y - _0x4c8c41.y2, 0x2) + Math.pow(_0x17da3d.x - _0x4c8c41.x2, 0x2));
            } else {
                return _0x17da3d == player ? Math.sqrt(Math.pow(_0x17da3d.y2 - _0x4c8c41.y, 0x2) + Math.pow(_0x17da3d.x2 - _0x4c8c41.x, 0x2)) : Math.sqrt(Math.pow(_0x17da3d.y - _0x4c8c41.y, 0x2) + Math.pow(_0x17da3d.x - _0x4c8c41.x, 0x2));
            }
        };
        this.round = function(_0x54d27c, _0x1f94eb) {
            return Math.round(_0x54d27c * _0x1f94eb) / _0x1f94eb;
        };
        this.toRad = function(_0x3d395c) {
            return _0x3d395c * (_0x2d318d / 0xb4);
        };
        this.toAng = function(_0x5724f6) {
            return _0x5724f6 / (_0x2d318d / 0xb4);
        };
        this.randInt = function(_0x2fb2d9, _0x2b83f5) {
            return Math.floor(Math.random() * (_0x2b83f5 - _0x2fb2d9 + 0x1)) + _0x2fb2d9;
        };
        this.randFloat = function(_0x5d3f49, _0x51004b) {
            return Math.random() * (_0x51004b - _0x5d3f49 + 0x1) + _0x5d3f49;
        };
        this.lerp = function(_0x25424a, _0x3acfd1, _0x2dfc33) {
            return _0x25424a + (_0x3acfd1 - _0x25424a) * _0x2dfc33;
        };
        this.decel = function(_0x543672, _0x58d3d0) {
            if (_0x543672 > 0x0) {
                _0x543672 = Math.max(0x0, _0x543672 - _0x58d3d0);
            } else {
                if (_0x543672 < 0x0) {
                    _0x543672 = Math.min(0x0, _0x543672 + _0x58d3d0);
                }
            }
            return _0x543672;
        };
        this.getDistance = function(_0x4da855, _0x5a16fa, _0x2e4c7a, _0x585538) {
            return _0x408fb9((_0x2e4c7a -= _0x4da855) * _0x2e4c7a + (_0x585538 -= _0x5a16fa) * _0x585538);
        };
        this.getDist = function(_0x298bc1, _0x1876de, _0x32ca8c, _0x2e89d6) {
            let _0xf2864 = {
                x: _0x32ca8c == 0x0 ? _0x298bc1.x : _0x32ca8c == 0x1 ? _0x298bc1.x1 : _0x32ca8c == 0x2 ? _0x298bc1.x2 : _0x32ca8c == 0x3 && _0x298bc1.x3,
                y: _0x32ca8c == 0x0 ? _0x298bc1.y : _0x32ca8c == 0x1 ? _0x298bc1.y1 : _0x32ca8c == 0x2 ? _0x298bc1.y2 : _0x32ca8c == 0x3 && _0x298bc1.y3
            };
            let _0x3aa57a = {
                x: _0x2e89d6 == 0x0 ? _0x1876de.x : _0x2e89d6 == 0x1 ? _0x1876de.x1 : _0x2e89d6 == 0x2 ? _0x1876de.x2 : _0x2e89d6 == 0x3 && _0x1876de.x3,
                y: _0x2e89d6 == 0x0 ? _0x1876de.y : _0x2e89d6 == 0x1 ? _0x1876de.y1 : _0x2e89d6 == 0x2 ? _0x1876de.y2 : _0x2e89d6 == 0x3 && _0x1876de.y3
            };
            return _0x408fb9((_0x3aa57a.x -= _0xf2864.x) * _0x3aa57a.x + (_0x3aa57a.y -= _0xf2864.y) * _0x3aa57a.y);
        };
        this.getDirection = function(_0x20d3fb, _0xd9f301, _0x5d8719, _0x296e3d) {
            return _0x6f39ea(_0xd9f301 - _0x296e3d, _0x20d3fb - _0x5d8719);
        };
        this.getDirect = function(_0x47bfaf, _0xe1fb16, _0x1f8806, _0x11b292) {
            let _0x1d105c = {
                x: _0x1f8806 == 0x0 ? _0x47bfaf.x : _0x1f8806 == 0x1 ? _0x47bfaf.x1 : _0x1f8806 == 0x2 ? _0x47bfaf.x2 : _0x1f8806 == 0x3 && _0x47bfaf.x3,
                y: _0x1f8806 == 0x0 ? _0x47bfaf.y : _0x1f8806 == 0x1 ? _0x47bfaf.y1 : _0x1f8806 == 0x2 ? _0x47bfaf.y2 : _0x1f8806 == 0x3 && _0x47bfaf.y3
            };
            let _0x5383cb = {
                x: _0x11b292 == 0x0 ? _0xe1fb16.x : _0x11b292 == 0x1 ? _0xe1fb16.x1 : _0x11b292 == 0x2 ? _0xe1fb16.x2 : _0x11b292 == 0x3 && _0xe1fb16.x3,
                y: _0x11b292 == 0x0 ? _0xe1fb16.y : _0x11b292 == 0x1 ? _0xe1fb16.y1 : _0x11b292 == 0x2 ? _0xe1fb16.y2 : _0x11b292 == 0x3 && _0xe1fb16.y3
            };
            return _0x6f39ea(_0x1d105c.y - _0x5383cb.y, _0x1d105c.x - _0x5383cb.x);
        };
        this.getAngleDist = function(_0x41c873, _0x3e1ce1) {
            let _0x2e751a = _0x4b8742(_0x3e1ce1 - _0x41c873) % (_0x2d318d * 0x2);
            return _0x2e751a > _0x2d318d ? _0x2d318d * 0x2 - _0x2e751a : _0x2e751a;
        };
        this.getAngle = function(_0x3cad21, _0xe23cd5, _0x271e28 = "", _0x14f668 = "") {
            if (_0x271e28 === 0x0) {
                _0x271e28 = "";
            }
            if (_0x14f668 === 0x0) {
                _0x14f668 = "";
            }
            return Math.atan2(_0x3cad21["y" + _0x271e28] - _0xe23cd5["y" + _0x14f668], _0x3cad21["x" + _0x271e28] - _0xe23cd5["x" + _0x14f668]);
        };
        this.isNumber = function(_0x4a3d48) {
            return typeof _0x4a3d48 == "number" && !isNaN(_0x4a3d48) && isFinite(_0x4a3d48);
        };
        this.isString = function(_0x1fdc64) {
            return _0x1fdc64 && typeof _0x1fdc64 == "string";
        };
        this.kFormat = function(_0x1fad5a) {
            return _0x1fad5a > 0x3e7 ? (_0x1fad5a / 0x3e8).toFixed(0x1) + "k" : _0x1fad5a;
        };
        this.sFormat = function(_0x1b449c) {
            let _0x167e82 = [{
                num: 0x3e8,
                string: "k"
            }, {
                num: 0xf4240,
                string: "m"
            }, {
                num: 0x3b9aca00,
                string: "b"
            }, {
                num: 0xe8d4a51000,
                string: "q"
            }].reverse();
            let _0x35bdb9 = _0x167e82.find(_0x9bd6c5 => _0x1b449c >= _0x9bd6c5.num);
            if (!_0x35bdb9) {
                return _0x1b449c;
            }
            return (_0x1b449c / _0x35bdb9.num).toFixed(0x1) + _0x35bdb9.string;
        };
        this.capitalizeFirst = function(_0x3856c7) {
            return _0x3856c7.charAt(0x0).toUpperCase() + _0x3856c7.slice(0x1);
        };
        this.fixTo = function(_0x9bd5e0, _0x1b2272) {
            return parseFloat(_0x9bd5e0.toFixed(_0x1b2272));
        };
        this.sortByPoints = function(_0x31d7e0, _0x522474) {
            return parseFloat(_0x522474.points) - parseFloat(_0x31d7e0.points);
        };
        this.lineInRect = function(_0x1211c, _0x9ebd59, _0x2aaf46, _0xcc4c11, _0x241ed0, _0x29fccf, _0x51821e, _0x3b7ac9) {
            let _0x28a0eb = _0x241ed0;
            let _0x9a47fc = _0x51821e;
            if (_0x241ed0 > _0x51821e) {
                _0x28a0eb = _0x51821e;
                _0x9a47fc = _0x241ed0;
            }
            if (_0x9a47fc > _0x2aaf46) {
                _0x9a47fc = _0x2aaf46;
            }
            if (_0x28a0eb < _0x1211c) {
                _0x28a0eb = _0x1211c;
            }
            if (_0x28a0eb > _0x9a47fc) {
                return false;
            }
            let _0x48688a = _0x29fccf;
            let _0x232dfe = _0x3b7ac9;
            let _0x248df5 = _0x51821e - _0x241ed0;
            if (Math.abs(_0x248df5) > 1e-7) {
                let _0x4c7c02 = (_0x3b7ac9 - _0x29fccf) / _0x248df5;
                let _0x4486a4 = _0x29fccf - _0x4c7c02 * _0x241ed0;
                _0x48688a = _0x4c7c02 * _0x28a0eb + _0x4486a4;
                _0x232dfe = _0x4c7c02 * _0x9a47fc + _0x4486a4;
            }
            if (_0x48688a > _0x232dfe) {
                let _0x30b520 = _0x232dfe;
                _0x232dfe = _0x48688a;
                _0x48688a = _0x30b520;
            }
            if (_0x232dfe > _0xcc4c11) {
                _0x232dfe = _0xcc4c11;
            }
            if (_0x48688a < _0x9ebd59) {
                _0x48688a = _0x9ebd59;
            }
            if (_0x48688a > _0x232dfe) {
                return false;
            }
            return true;
        };
        this.containsPoint = function(_0x377455, _0x292d3e, _0x5523b6) {
            let _0x3f5ce5 = _0x377455.getBoundingClientRect();
            let _0x576964 = _0x3f5ce5.left + window.scrollX;
            let _0x270e5d = _0x3f5ce5.top + window.scrollY;
            let _0x41a902 = _0x3f5ce5.width;
            let _0x2ad644 = _0x3f5ce5.height;
            let _0x856e4 = _0x292d3e > _0x576964 && _0x292d3e < _0x576964 + _0x41a902;
            let _0x5bbb35 = _0x5523b6 > _0x270e5d && _0x5523b6 < _0x270e5d + _0x2ad644;
            return _0x856e4 && _0x5bbb35;
        };
        this.mousifyTouchEvent = function(_0x101429) {
            let _0x894d65 = _0x101429.changedTouches[0x0];
            _0x101429.screenX = _0x894d65.screenX;
            _0x101429.screenY = _0x894d65.screenY;
            _0x101429.clientX = _0x894d65.clientX;
            _0x101429.clientY = _0x894d65.clientY;
            _0x101429.pageX = _0x894d65.pageX;
            _0x101429.pageY = _0x894d65.pageY;
        };
        this.hookTouchEvents = function(_0x5a5354, _0x4f225a) {
            let _0x36a4b6 = !_0x4f225a;
            let _0x4be7e0 = false;
            _0x5a5354.addEventListener("touchstart", this.checkTrusted(_0x40adde), false);
            _0x5a5354.addEventListener("touchmove", this.checkTrusted(_0xdfc676), false);
            _0x5a5354.addEventListener("touchend", this.checkTrusted(_0x2b9d45), false);
            _0x5a5354.addEventListener("touchcancel", this.checkTrusted(_0x2b9d45), false);
            _0x5a5354.addEventListener("touchleave", this.checkTrusted(_0x2b9d45), false);

            function _0x40adde(_0x58ea14) {
                _0x2ecaec.mousifyTouchEvent(_0x58ea14);
                window.setUsingTouch(true);
                if (_0x36a4b6) {
                    _0x58ea14.preventDefault();
                    _0x58ea14.stopPropagation();
                }
                if (_0x5a5354.onmouseover) {
                    _0x5a5354.onmouseover(_0x58ea14);
                }
                _0x4be7e0 = true;
            }

            function _0xdfc676(_0x3a1a4c) {
                _0x2ecaec.mousifyTouchEvent(_0x3a1a4c);
                window.setUsingTouch(true);
                if (_0x36a4b6) {
                    _0x3a1a4c.preventDefault();
                    _0x3a1a4c.stopPropagation();
                }
                if (_0x2ecaec.containsPoint(_0x5a5354, _0x3a1a4c.pageX, _0x3a1a4c.pageY)) {
                    if (!_0x4be7e0) {
                        if (_0x5a5354.onmouseover) {
                            _0x5a5354.onmouseover(_0x3a1a4c);
                        }
                        _0x4be7e0 = true;
                    }
                } else {
                    if (_0x4be7e0) {
                        if (_0x5a5354.onmouseout) {
                            _0x5a5354.onmouseout(_0x3a1a4c);
                        }
                        _0x4be7e0 = false;
                    }
                }
            }

            function _0x2b9d45(_0x3c8bf5) {
                _0x2ecaec.mousifyTouchEvent(_0x3c8bf5);
                window.setUsingTouch(true);
                if (_0x36a4b6) {
                    _0x3c8bf5.preventDefault();
                    _0x3c8bf5.stopPropagation();
                }
                if (_0x4be7e0) {
                    if (_0x5a5354.onclick) {
                        _0x5a5354.onclick(_0x3c8bf5);
                    }
                    if (_0x5a5354.onmouseout) {
                        _0x5a5354.onmouseout(_0x3c8bf5);
                    }
                    _0x4be7e0 = false;
                }
            }
        };
        this.removeAllChildren = function(_0x3ea384) {
            while (_0x3ea384.hasChildNodes()) {
                _0x3ea384.removeChild(_0x3ea384.lastChild);
            }
        };
        this.generateElement = function(_0x584593) {
            let _0x210a5b = document.createElement(_0x584593.tag || "div");

            function _0x223fd7(_0x41d94b, _0x3154a9) {
                if (_0x584593[_0x41d94b]) {
                    _0x210a5b[_0x3154a9] = _0x584593[_0x41d94b];
                }
            }
            _0x223fd7("text", "textContent");
            _0x223fd7("html", "innerHTML");
            _0x223fd7("class", "className");
            for (let _0x182a7f in _0x584593) {
                switch (_0x182a7f) {
                    case "tag":
                    case "text":
                    case "html":
                    case "class":
                    case "style":
                    case "hookTouch":
                    case "parent":
                    case "children":
                        continue;
                    default:
                        break;
                }
                _0x210a5b[_0x182a7f] = _0x584593[_0x182a7f];
            }
            if (_0x210a5b.onclick) {
                _0x210a5b.onclick = this.checkTrusted(_0x210a5b.onclick);
            }
            if (_0x210a5b.onmouseover) {
                _0x210a5b.onmouseover = this.checkTrusted(_0x210a5b.onmouseover);
            }
            if (_0x210a5b.onmouseout) {
                _0x210a5b.onmouseout = this.checkTrusted(_0x210a5b.onmouseout);
            }
            if (_0x584593.style) {
                _0x210a5b.style.cssText = _0x584593.style;
            }
            if (_0x584593.hookTouch) {
                this.hookTouchEvents(_0x210a5b);
            }
            if (_0x584593.parent) {
                _0x584593.parent.appendChild(_0x210a5b);
            }
            if (_0x584593.children) {
                for (let _0x201147 = 0x0; _0x201147 < _0x584593.children.length; _0x201147++) {
                    _0x210a5b.appendChild(_0x584593.children[_0x201147]);
                }
            }
            return _0x210a5b;
        };
        this.checkTrusted = function(_0x35516b) {
            return function(_0x277813) {
                if (_0x277813 && _0x277813 instanceof Event && (_0x277813 && typeof _0x277813.isTrusted == "boolean" ? _0x277813.isTrusted : true)) {
                    _0x35516b(_0x277813);
                } else {}
            };
        };
        this.randomString = function(_0x3a0cba) {
            let _0x17169a = "";
            for (let _0x40e48f = 0x0; _0x40e48f < _0x3a0cba; _0x40e48f++) {
                _0x17169a += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(Math.floor(Math.random() * "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".length));
            }
            return _0x17169a;
        };
        this.countInArray = function(_0x9ce89b, _0x133384) {
            let _0x2035c5 = 0x0;
            for (let _0x31690e = 0x0; _0x31690e < _0x9ce89b.length; _0x31690e++) {
                if (_0x9ce89b[_0x31690e] === _0x133384) {
                    _0x2035c5++;
                }
            }
            return _0x2035c5;
        };
        this.hexToRgb = function(_0x5a92bc) {
            return _0x5a92bc.slice(0x1).match(/.{1,2}/g).map(_0x27e91b => parseInt(_0x27e91b, 0x10));
        };
        this.getRgb = function(_0x4dcde6, _0x11b664, _0x447a3b) {
            return [_0x4dcde6 / 0xff, _0x11b664 / 0xff, _0x447a3b / 0xff].join(", ");
        };
    }
}
class Animtext {
    constructor() {
        this.init = function(_0x1205e1, _0x2bba10, _0x525b0d, _0x5757f4, _0x2323c2, _0x47128f, _0x2a2679) {
            this.x = _0x1205e1;
            this.y = _0x2bba10;
            this.color = _0x2a2679;
            this.scale = _0x525b0d;
            this.startScale = this.scale;
            this.maxScale = _0x525b0d * 1.5;
            this.scaleSpeed = 0x1;
            this.speed = 0.05;
            this.life = _0x2323c2;
            this.text = _0x47128f;
            this.acc = 0x1;
            this.alpha = 0x0;
            this.maxLife = _0x2323c2;
            this.ranX = UTILS.randFloat(0x1, 0x1);
        };
        this.update = function(_0x1d9a01) {
            if (this.life) {
                this.life -= _0x1d9a01;
                if (config.idk) {
                    this.y -= this.speed * _0x1d9a01 * this.acc;
                    this.acc -= _0x1d9a01 / (this.maxLife / 2.5);
                    if (this.life <= 0xc8) {
                        if (this.alpha > 0x0) {
                            this.alpha = Math.max(0x0, this.alpha - _0x1d9a01 / 0x12c);
                        }
                    } else if (this.alpha < 0x1) {
                        this.alpha = Math.min(0x1, this.alpha + _0x1d9a01 / 0x64);
                    }
                    this.x += this.ranX;
                } else {
                    this.y -= this.speed * _0x1d9a01;
                }
                this.scale += this.scaleSpeed * _0x1d9a01;
                if (this.scale >= this.maxScale) {
                    this.scale = this.maxScale;
                    this.scaleSpeed *= -0x1;
                } else if (this.scale <= this.startScale) {
                    this.scale = this.startScale;
                    this.scaleSpeed = 0x0;
                }
                if (this.life <= 0x0) {
                    this.life = 0x0;
                }
            }
        };
        this.render = function(_0x10cf63, _0x4d31a2, _0x379461) {
            _0x10cf63.lineWidth = 0xa;
            _0x10cf63.fillStyle = this.color;
            _0x10cf63.font = this.scale + "px " + (this.scale >= 0xf ? "Hammersmith One" : "Hammersmith One");
            if (config.idk) {
                _0x10cf63.globalAlpha = this.alpha;
            }
            if (config.idk) {
                _0x10cf63.strokeStyle = "#3d3f42";
                _0x10cf63.strokeText(this.text, this.x - _0x4d31a2, this.y - _0x379461);
            }
            _0x10cf63.fillText(this.text, this.x - _0x4d31a2, this.y - _0x379461);
            _0x10cf63.globalAlpha = 0x1;
        };
    }
}
class Textmanager {
    constructor() {
        this.texts = [];
        this.stack = [];
        this.update = function(_0x45691d, _0xebc348, _0x3e845c, _0x6fe860) {
            _0xebc348.textBaseline = "middle";
            _0xebc348.textAlign = "center";
            for (let _0x5d08ed = 0x0; _0x5d08ed < this.texts.length; ++_0x5d08ed) {
                if (this.texts[_0x5d08ed].life) {
                    this.texts[_0x5d08ed].update(_0x45691d);
                    this.texts[_0x5d08ed].render(_0xebc348, _0x3e845c, _0x6fe860);
                }
            }
        };
        this.showText = function(_0x51ab34, _0x5b38ad, _0xb10392, _0x38b3ae, _0x149024, _0x4ba01f, _0xbc4116) {
            let _0x72a621;
            for (let _0x554534 = 0x0; _0x554534 < this.texts.length; ++_0x554534) {
                if (!this.texts[_0x554534].life) {
                    _0x72a621 = this.texts[_0x554534];
                    break;
                }
            }
            if (!_0x72a621) {
                _0x72a621 = new Animtext();
                this.texts.push(_0x72a621);
            }
            _0x72a621.init(_0x51ab34, _0x5b38ad, _0xb10392, _0x38b3ae, _0x149024, _0x4ba01f, _0xbc4116);
        };
    }
}
class GameObject {
    constructor(_0x3d2f2a) {
        this.sid = _0x3d2f2a;
        this.init = function(_0x41500a, _0x57a91f, _0xef30e7, _0x3ff526, _0x33b764, _0x5a6268, _0x4fa876) {
            _0x5a6268 = _0x5a6268 || {};
            this.sentTo = {};
            this.gridLocations = [];
            this.active = true;
            this.alive = true;
            this.doUpdate = _0x5a6268.doUpdate;
            this.x = _0x41500a;
            this.y = _0x57a91f;
            this.dir = _0xef30e7;
            this.lastDir = _0xef30e7;
            this.xWiggle = 0x0;
            this.yWiggle = 0x0;
            this.visScale = _0x3ff526;
            this.scale = _0x3ff526;
            this.type = _0x33b764;
            this.id = _0x5a6268.id;
            this.owner = _0x4fa876;
            this.name = _0x5a6268.name;
            this.isItem = this.id != undefined;
            this.group = _0x5a6268.group;
            this.maxHealth = _0x5a6268.health;
            this.health = this.maxHealth;
            this.layer = 0x2;
            if (this.group != undefined) {
                this.layer = this.group.layer;
            } else {
                if (this.type == 0x0) {
                    this.layer = 0x3;
                } else {
                    if (this.type == 0x2) {
                        this.layer = 0x0;
                    } else if (this.type == 0x4) {
                        this.layer = -0x1;
                    }
                }
            }
            this.colDiv = _0x5a6268.colDiv || 0x1;
            this.blocker = _0x5a6268.blocker;
            this.ignoreCollision = _0x5a6268.ignoreCollision;
            this.dontGather = _0x5a6268.dontGather;
            this.hideFromEnemy = _0x5a6268.hideFromEnemy;
            this.friction = _0x5a6268.friction;
            this.projDmg = _0x5a6268.projDmg;
            this.dmg = _0x5a6268.dmg;
            this.pDmg = _0x5a6268.pDmg;
            this.pps = _0x5a6268.pps;
            this.zIndex = _0x5a6268.zIndex || 0x0;
            this.turnSpeed = _0x5a6268.turnSpeed;
            this.req = _0x5a6268.req;
            this.trap = _0x5a6268.trap;
            this.healCol = _0x5a6268.healCol;
            this.teleport = _0x5a6268.teleport;
            this.boostSpeed = _0x5a6268.boostSpeed;
            this.projectile = _0x5a6268.projectile;
            this.shootRange = _0x5a6268.shootRange;
            this.shootRate = _0x5a6268.shootRate;
            this.shootCount = this.shootRate;
            this.spawnPoint = _0x5a6268.spawnPoint;
            this.onNear = 0x0;
            this.breakObj = false;
            this.alpha = _0x5a6268.alpha || 0x1;
            this.maxAlpha = _0x5a6268.alpha || 0x1;
            this.damaged = 0x0;
        };
        this.changeHealth = function(_0x2d4bf6, _0x410ebd) {
            this.health += _0x2d4bf6;
            return this.health <= 0x0;
        };
        this.getScale = function(_0x2431f8, _0x4b79c5) {
            _0x2431f8 = _0x2431f8 || 0x1;
            return this.scale * (this.isItem || this.type == 0x2 || this.type == 0x3 || this.type == 0x4 ? 0x1 : 0.6 * _0x2431f8) * (_0x4b79c5 ? 0x1 : this.colDiv);
        };
        this.visibleToPlayer = function(_0x10359d) {
            return !this.hideFromEnemy || this.owner && (this.owner == _0x10359d || this.owner.team && _0x10359d.team == this.owner.team);
        };
        this.update = function(_0x5e1305) {
            if (this.active) {
                if (this.xWiggle) {
                    this.xWiggle *= Math.pow(0.99, _0x5e1305);
                }
                if (this.yWiggle) {
                    this.yWiggle *= Math.pow(0.99, _0x5e1305);
                }
                if (this.turnSpeed && (document.getElementById("doWindmillSpins").checked ? true : !this.pps)) {
                    this.dir += this.turnSpeed * _0x5e1305;
                }
            } else if (this.alive) {
                this.alpha -= _0x5e1305 / (0xc8 / this.maxAlpha);
                this.visScale += _0x5e1305 / (this.scale / 2.5);
                if (this.alpha <= 0x0) {
                    this.alpha = 0x0;
                    this.alive = false;
                }
            }
        };
        this.isTeamObject = function(_0x38e5f7) {
            return this.owner == null ? true : this.owner && _0x38e5f7.sid == this.owner.sid || _0x38e5f7.findAllianceBySid(this.owner.sid);
        };
    }
}
class Items {
    constructor() {
        this.groups = [{
            id: 0x0,
            name: "food",
            layer: 0x0
        }, {
            id: 0x1,
            name: "walls",
            place: true,
            limit: 0x1e,
            layer: 0x0
        }, {
            id: 0x2,
            name: "spikes",
            place: true,
            limit: 0xf,
            layer: 0x0
        }, {
            id: 0x3,
            name: "mill",
            place: true,
            limit: 0x7,
            layer: 0x1
        }, {
            id: 0x4,
            name: "mine",
            place: true,
            limit: 0x1,
            layer: 0x0
        }, {
            id: 0x5,
            name: "trap",
            place: true,
            limit: 0x6,
            layer: -0x1
        }, {
            id: 0x6,
            name: "booster",
            place: true,
            limit: 0xc,
            layer: -0x1
        }, {
            id: 0x7,
            name: "turret",
            place: true,
            limit: 0x2,
            layer: 0x1
        }, {
            id: 0x8,
            name: "watchtower",
            place: true,
            limit: 0xc,
            layer: 0x1
        }, {
            id: 0x9,
            name: "buff",
            place: true,
            limit: 0x4,
            layer: -0x1
        }, {
            id: 0xa,
            name: "spawn",
            place: true,
            limit: 0x1,
            layer: -0x1
        }, {
            id: 0xb,
            name: "sapling",
            place: true,
            limit: 0x2,
            layer: 0x0
        }, {
            id: 0xc,
            name: "blocker",
            place: true,
            limit: 0x3,
            layer: -0x1
        }, {
            id: 0xd,
            name: "teleporter",
            place: true,
            limit: 0x2,
            layer: -0x1
        }];
        this.projectiles = [{
            indx: 0x0,
            layer: 0x0,
            src: "arrow_1",
            dmg: 0x19,
            speed: 1.6,
            scale: 0x67,
            range: 0x3e8
        }, {
            indx: 0x1,
            layer: 0x1,
            dmg: 0x19,
            scale: 0x14
        }, {
            indx: 0x0,
            layer: 0x0,
            src: "arrow_1",
            dmg: 0x23,
            speed: 2.5,
            scale: 0x67,
            range: 0x4b0
        }, {
            indx: 0x0,
            layer: 0x0,
            src: "arrow_1",
            dmg: 0x1e,
            speed: 0x2,
            scale: 0x67,
            range: 0x4b0
        }, {
            indx: 0x1,
            layer: 0x1,
            dmg: 0x10,
            scale: 0x14
        }, {
            indx: 0x0,
            layer: 0x0,
            src: "bullet_1",
            dmg: 0x32,
            speed: 3.6,
            scale: 0xa0,
            range: 0x578
        }];
        this.weapons = [{
            id: 0x0,
            type: 0x0,
            name: "tool hammer",
            desc: "tool for gathering all resources",
            src: "hammer_1",
            length: 0x8c,
            width: 0x8c,
            xOff: -0x3,
            yOff: 0x12,
            dmg: 0x19,
            range: 0x41,
            gather: 0x1,
            speed: 0x12c
        }, {
            id: 0x1,
            type: 0x0,
            age: 0x2,
            name: "hand axe",
            desc: "gathers resources at a higher rate",
            src: "axe_1",
            length: 0x8c,
            width: 0x8c,
            xOff: 0x3,
            yOff: 0x18,
            dmg: 0x1e,
            spdMult: 0x1,
            range: 0x46,
            gather: 0x2,
            speed: 0x190
        }, {
            id: 0x2,
            type: 0x0,
            age: 0x8,
            pre: 0x1,
            name: "great axe",
            desc: "deal more damage and gather more resources",
            src: "great_axe_1",
            length: 0x8c,
            width: 0x8c,
            xOff: -0x8,
            yOff: 0x19,
            dmg: 0x23,
            spdMult: 0x1,
            range: 0x4b,
            gather: 0x4,
            speed: 0x190
        }, {
            id: 0x3,
            type: 0x0,
            age: 0x2,
            name: "short sword",
            desc: "increased attack power but slower move speed",
            src: "sword_1",
            iPad: 1.3,
            length: 0x82,
            width: 0xd2,
            xOff: -0x8,
            yOff: 0x2e,
            dmg: 0x23,
            spdMult: 0.85,
            range: 0x6e,
            gather: 0x1,
            speed: 0x12c
        }, {
            id: 0x4,
            type: 0x0,
            age: 0x8,
            pre: 0x3,
            name: "katana",
            desc: "greater range and damage",
            src: "samurai_1",
            iPad: 1.3,
            length: 0x82,
            width: 0xd2,
            xOff: -0x8,
            yOff: 0x3b,
            dmg: 0x28,
            spdMult: 0.8,
            range: 0x76,
            gather: 0x1,
            speed: 0x12c
        }, {
            id: 0x5,
            type: 0x0,
            age: 0x2,
            name: "polearm",
            desc: "long range melee weapon",
            src: "spear_1",
            iPad: 1.3,
            length: 0x82,
            width: 0xd2,
            xOff: -0x8,
            yOff: 0x35,
            dmg: 0x2d,
            knock: 0.2,
            spdMult: 0.82,
            range: 0x8e,
            gather: 0x1,
            speed: 0x2bc
        }, {
            id: 0x6,
            type: 0x0,
            age: 0x2,
            name: "bat",
            desc: "fast long range melee weapon",
            src: "bat_1",
            iPad: 1.3,
            length: 0x6e,
            width: 0xb4,
            xOff: -0x8,
            yOff: 0x35,
            dmg: 0x14,
            knock: 0.7,
            range: 0x6e,
            gather: 0x1,
            speed: 0x12c
        }, {
            id: 0x7,
            type: 0x0,
            age: 0x2,
            name: "daggers",
            desc: "really fast short range weapon",
            src: "dagger_1",
            iPad: 0.8,
            length: 0x6e,
            width: 0x6e,
            xOff: 0x12,
            yOff: 0x0,
            dmg: 0x14,
            knock: 0.1,
            range: 0x41,
            gather: 0x1,
            hitSlow: 0.1,
            spdMult: 1.13,
            speed: 0x64
        }, {
            id: 0x8,
            type: 0x0,
            age: 0x2,
            name: "stick",
            desc: "great for gathering but very weak",
            src: "stick_1",
            length: 0x8c,
            width: 0x8c,
            xOff: 0x3,
            yOff: 0x18,
            dmg: 0x1,
            spdMult: 0x1,
            range: 0x46,
            gather: 0x7,
            speed: 0x190
        }, {
            id: 0x9,
            type: 0x1,
            age: 0x6,
            name: "hunting bow",
            desc: "bow used for ranged combat and hunting",
            src: "bow_1",
            req: ["wood", 0x4],
            length: 0x78,
            width: 0x78,
            xOff: -0x6,
            yOff: 0x0,
            Pdmg: 0x19,
            projectile: 0x0,
            spdMult: 0.75,
            speed: 0x258
        }, {
            id: 0xa,
            type: 0x1,
            age: 0x6,
            name: "great hammer",
            desc: "hammer used for destroying structures",
            src: "great_hammer_1",
            length: 0x8c,
            width: 0x8c,
            xOff: -0x9,
            yOff: 0x19,
            dmg: 0xa,
            Pdmg: 0xa,
            spdMult: 0.88,
            range: 0x4b,
            sDmg: 7.5,
            gather: 0x1,
            speed: 0x190
        }, {
            id: 0xb,
            type: 0x1,
            age: 0x6,
            name: "wooden shield",
            desc: "blocks projectiles and reduces melee damage",
            src: "shield_1",
            length: 0x78,
            width: 0x78,
            shield: 0.2,
            xOff: 0x6,
            yOff: 0x0,
            Pdmg: 0x0,
            spdMult: 0.7
        }, {
            id: 0xc,
            type: 0x1,
            age: 0x8,
            pre: 0x9,
            name: "crossbow",
            desc: "deals more damage and has greater range",
            src: "crossbow_1",
            req: ["wood", 0x5],
            aboveHand: true,
            armS: 0.75,
            length: 0x78,
            width: 0x78,
            xOff: -0x4,
            yOff: 0x0,
            Pdmg: 0x23,
            projectile: 0x2,
            spdMult: 0.7,
            speed: 0x2bc
        }, {
            id: 0xd,
            type: 0x1,
            age: 0x9,
            pre: 0xc,
            name: "repeater crossbow",
            desc: "high firerate crossbow with reduced damage",
            src: "crossbow_2",
            req: ["wood", 0xa],
            aboveHand: true,
            armS: 0.75,
            length: 0x78,
            width: 0x78,
            xOff: -0x4,
            yOff: 0x0,
            Pdmg: 0x1e,
            projectile: 0x3,
            spdMult: 0.7,
            speed: 0xe6
        }, {
            id: 0xe,
            type: 0x1,
            age: 0x6,
            name: "mc grabby",
            desc: "steals resources from enemies",
            src: "grab_1",
            length: 0x82,
            width: 0xd2,
            xOff: -0x8,
            yOff: 0x35,
            dmg: 0x0,
            Pdmg: 0x0,
            steal: 0xfa,
            knock: 0.2,
            spdMult: 1.05,
            range: 0x7d,
            gather: 0x0,
            speed: 0x2bc
        }, {
            id: 0xf,
            type: 0x1,
            age: 0x9,
            pre: 0xc,
            name: "musket",
            desc: "slow firerate but high damage and range",
            src: "musket_1",
            req: ["stone", 0xa],
            aboveHand: true,
            rec: 0.35,
            armS: 0.6,
            hndS: 0.3,
            hndD: 1.6,
            length: 0xcd,
            width: 0xcd,
            xOff: 0x19,
            yOff: 0x0,
            Pdmg: 0x32,
            projectile: 0x5,
            hideProjectile: true,
            spdMult: 0.6,
            speed: 0x5dc
        }];
        this.list = [{
            group: this.groups[0x0],
            name: "apple",
            desc: "restores 20 health when consumed",
            req: ["food", 0xa],
            consume: function(_0x48e4a2) {
                return _0x48e4a2.changeHealth(0x14, _0x48e4a2);
            },
            scale: 0x16,
            holdOffset: 0xf,
            healing: 0x14,
            itemID: 0x0,
            itemAID: 0x10
        }, {
            age: 0x3,
            group: this.groups[0x0],
            name: "cookie",
            desc: "restores 40 health when consumed",
            req: ["food", 0xf],
            consume: function(_0x38cc89) {
                return _0x38cc89.changeHealth(0x28, _0x38cc89);
            },
            scale: 0x1b,
            holdOffset: 0xf,
            healing: 0x28,
            itemID: 0x1,
            itemAID: 0x11
        }, {
            age: 0x7,
            group: this.groups[0x0],
            name: "cheese",
            desc: "restores 30 health and another 50 over 5 seconds",
            req: ["food", 0x19],
            consume: function(_0x46d568) {
                if (_0x46d568.changeHealth(0x1e, _0x46d568) || _0x46d568.health < 0x64) {
                    _0x46d568.dmgOverTime.dmg = -0xa;
                    _0x46d568.dmgOverTime.doer = _0x46d568;
                    _0x46d568.dmgOverTime.time = 0x5;
                    return true;
                }
                return false;
            },
            scale: 0x1b,
            holdOffset: 0xf,
            healing: 0x1e,
            itemID: 0x2,
            itemAID: 0x12
        }, {
            group: this.groups[0x1],
            name: "wood wall",
            desc: "provides protection for your village",
            req: ["wood", 0xa],
            projDmg: true,
            health: 0x17c,
            scale: 0x32,
            holdOffset: 0x14,
            placeOffset: -0x5,
            itemID: 0x3,
            itemAID: 0x13
        }, {
            age: 0x3,
            group: this.groups[0x1],
            name: "stone wall",
            desc: "provides improved protection for your village",
            req: ["stone", 0x19],
            health: 0x384,
            scale: 0x32,
            holdOffset: 0x14,
            placeOffset: -0x5,
            itemID: 0x4,
            itemAID: 0x14
        }, {
            age: 0x7,
            group: this.groups[0x1],
            name: "castle wall",
            desc: "provides powerful protection for your village",
            req: ["stone", 0x23],
            health: 0x5dc,
            scale: 0x34,
            holdOffset: 0x14,
            placeOffset: -0x5,
            itemID: 0x5,
            itemAID: 0x15
        }, {
            group: this.groups[0x2],
            name: "spikes",
            desc: "damages enemies when they touch them",
            req: ["wood", 0x14, "stone", 0x5],
            health: 0x190,
            dmg: 0x14,
            scale: 0x31,
            spritePadding: -0x17,
            holdOffset: 0x8,
            placeOffset: -0x5,
            itemID: 0x6,
            itemAID: 0x16
        }, {
            age: 0x5,
            group: this.groups[0x2],
            name: "greater spikes",
            desc: "damages enemies when they touch them",
            req: ["wood", 0x1e, "stone", 0xa],
            health: 0x1f4,
            dmg: 0x23,
            scale: 0x34,
            spritePadding: -0x17,
            holdOffset: 0x8,
            placeOffset: -0x5,
            itemID: 0x7,
            itemAID: 0x17
        }, {
            age: 0x9,
            group: this.groups[0x2],
            name: "poison spikes",
            desc: "poisons enemies when they touch them",
            req: ["wood", 0x23, "stone", 0xf],
            health: 0x258,
            dmg: 0x1e,
            pDmg: 0x5,
            scale: 0x34,
            spritePadding: -0x17,
            holdOffset: 0x8,
            placeOffset: -0x5,
            itemID: 0x8,
            itemAID: 0x18
        }, {
            age: 0x9,
            group: this.groups[0x2],
            name: "spinning spikes",
            desc: "damages enemies when they touch them",
            req: ["wood", 0x1e, "stone", 0x14],
            health: 0x1f4,
            dmg: 0x2d,
            turnSpeed: 0.003,
            scale: 0x34,
            spritePadding: -0x17,
            holdOffset: 0x8,
            placeOffset: -0x5,
            itemID: 0x9,
            itemAID: 0x19
        }, {
            group: this.groups[0x3],
            name: "windmill",
            desc: "generates gold over time",
            req: ["wood", 0x32, "stone", 0xa],
            health: 0x190,
            pps: 0x1,
            turnSpeed: 0.0016,
            spritePadding: 0x19,
            iconLineMult: 0xc,
            scale: 0x2d,
            holdOffset: 0x14,
            placeOffset: 0x5,
            itemID: 0xa,
            itemAID: 0x1a
        }, {
            age: 0x5,
            group: this.groups[0x3],
            name: "faster windmill",
            desc: "generates more gold over time",
            req: ["wood", 0x3c, "stone", 0x14],
            health: 0x1f4,
            pps: 1.5,
            turnSpeed: 0.0025,
            spritePadding: 0x19,
            iconLineMult: 0xc,
            scale: 0x2f,
            holdOffset: 0x14,
            placeOffset: 0x5,
            itemID: 0xb,
            itemAID: 0x1b
        }, {
            age: 0x8,
            group: this.groups[0x3],
            name: "power mill",
            desc: "generates more gold over time",
            req: ["wood", 0x64, "stone", 0x32],
            health: 0x320,
            pps: 0x2,
            turnSpeed: 0.005,
            spritePadding: 0x19,
            iconLineMult: 0xc,
            scale: 0x2f,
            holdOffset: 0x14,
            placeOffset: 0x5,
            itemID: 0xc,
            itemAID: 0x1c
        }, {
            age: 0x5,
            group: this.groups[0x4],
            type: 0x2,
            name: "mine",
            desc: "allows you to mine stone",
            req: ["wood", 0x14, "stone", 0x64],
            iconLineMult: 0xc,
            scale: 0x41,
            holdOffset: 0x14,
            placeOffset: 0x0,
            itemID: 0xd,
            itemAID: 0x1d
        }, {
            age: 0x5,
            group: this.groups[0xb],
            type: 0x0,
            name: "sapling",
            desc: "allows you to farm wood",
            req: ["wood", 0x96],
            iconLineMult: 0xc,
            colDiv: 0.5,
            scale: 0x6e,
            holdOffset: 0x32,
            placeOffset: -0xf,
            itemID: 0xe,
            itemAID: 0x1e
        }, {
            age: 0x4,
            group: this.groups[0x5],
            name: "pit trap",
            desc: "pit that traps enemies if they walk over it",
            req: ["wood", 0x1e, "stone", 0x1e],
            trap: true,
            ignoreCollision: true,
            hideFromEnemy: true,
            health: 0x1f4,
            colDiv: 0.2,
            scale: 0x32,
            holdOffset: 0x14,
            placeOffset: -0x5,
            alpha: 0.6,
            itemID: 0xf,
            itemAID: 0x1f
        }, {
            age: 0x4,
            group: this.groups[0x6],
            name: "boost pad",
            desc: "provides boost when stepped on",
            req: ["stone", 0x14, "wood", 0x5],
            ignoreCollision: true,
            boostSpeed: 1.5,
            health: 0x96,
            colDiv: 0.7,
            scale: 0x2d,
            holdOffset: 0x14,
            placeOffset: -0x5,
            itemID: 0x10,
            itemAID: 0x20
        }, {
            age: 0x7,
            group: this.groups[0x7],
            doUpdate: true,
            name: "turret",
            desc: "defensive structure that shoots at enemies",
            req: ["wood", 0xc8, "stone", 0x96],
            health: 0x320,
            projectile: 0x1,
            shootRange: 0x2bc,
            shootRate: 0x898,
            scale: 0x2b,
            holdOffset: 0x14,
            placeOffset: -0x5,
            itemID: 0x11,
            itemAID: 0x21
        }, {
            age: 0x7,
            group: this.groups[0x8],
            name: "platform",
            desc: "platform to shoot over walls and cross over water",
            req: ["wood", 0x14],
            ignoreCollision: true,
            zIndex: 0x1,
            health: 0x12c,
            scale: 0x2b,
            holdOffset: 0x14,
            placeOffset: -0x5,
            itemID: 0x12,
            itemAID: 0x22
        }, {
            age: 0x7,
            group: this.groups[0x9],
            name: "healing pad",
            desc: "standing on it will slowly heal you",
            req: ["wood", 0x1e, "food", 0xa],
            ignoreCollision: true,
            healCol: 0xf,
            health: 0x190,
            colDiv: 0.7,
            scale: 0x2d,
            holdOffset: 0x14,
            placeOffset: -0x5,
            itemID: 0x13,
            itemAID: 0x23
        }, {
            age: 0x9,
            group: this.groups[0xa],
            name: "spawn pad",
            desc: "you will spawn here when you die but it will dissapear",
            req: ["wood", 0x64, "stone", 0x64],
            health: 0x190,
            ignoreCollision: true,
            spawnPoint: true,
            scale: 0x2d,
            holdOffset: 0x14,
            placeOffset: -0x5,
            itemID: 0x14,
            itemAID: 0x24
        }, {
            age: 0x7,
            group: this.groups[0xc],
            name: "blocker",
            desc: "blocks building in radius",
            req: ["wood", 0x1e, "stone", 0x19],
            ignoreCollision: true,
            blocker: 0x12c,
            health: 0x190,
            colDiv: 0.7,
            scale: 0x2d,
            holdOffset: 0x14,
            placeOffset: -0x5,
            itemID: 0x15,
            itemAID: 0x25
        }, {
            age: 0x7,
            group: this.groups[0xd],
            name: "teleporter",
            desc: "teleports you to a random point on the map",
            req: ["wood", 0x3c, "stone", 0x3c],
            ignoreCollision: true,
            teleport: true,
            health: 0xc8,
            colDiv: 0.7,
            scale: 0x2d,
            holdOffset: 0x14,
            placeOffset: -0x5,
            itemID: 0x16,
            itemAID: 0x26
        }];
        this.checkItem = {
            index: function(_0x324f49, _0x403764) {
                return [0x0, 0x1, 0x2].includes(_0x324f49) ? 0x0 : [0x3, 0x4, 0x5].includes(_0x324f49) ? 0x1 : [0x6, 0x7, 0x8, 0x9].includes(_0x324f49) ? 0x2 : [0xa, 0xb, 0xc].includes(_0x324f49) ? 0x3 : [0xd, 0xe].includes(_0x324f49) ? 0x5 : [0xf, 0x10].includes(_0x324f49) ? 0x4 : [0x11, 0x12, 0x13, 0x15, 0x16].includes(_0x324f49) ? [0xd, 0xe].includes(_0x403764) ? 0x6 : 0x5 : _0x324f49 == 0x14 ? [0xd, 0xe].includes(_0x403764) ? 0x7 : 0x6 : undefined;
            }
        };
        for (let _0x2d2a6a = 0x0; _0x2d2a6a < this.list.length; ++_0x2d2a6a) {
            this.list[_0x2d2a6a].id = _0x2d2a6a;
            if (this.list[_0x2d2a6a].pre) {
                this.list[_0x2d2a6a].pre = _0x2d2a6a - this.list[_0x2d2a6a].pre;
            }
        }
        if (typeof window !== "undefined") {}
    }
}
class Objectmanager {
    constructor(_0x1c77d2, _0x38d00f, _0x4a5fc0, _0x52bcce, _0x2fb5d8, _0x267cd2) {
        this.ignoreAdd = false;
        this.hitObj = [];
        this.disableObj = function(_0x351fb1) {
            _0x351fb1.active = false;
            _0x351fb1.alive = false;
        };
        let _0x574147;
        this.add = function(_0x19ba92, _0x2aa94d, _0x3d4c5a, _0x114532, _0x82eb0d, _0x146166, _0x549a35, _0x40621c, _0xd8d7ee) {
            _0x574147 = findSID(gameObjects, _0x19ba92);
            if (!_0x574147) {
                _0x574147 = _0x38d00f.find(_0x18f83a => !_0x18f83a.active);
                if (!_0x574147) {
                    _0x574147 = new _0x1c77d2(_0x19ba92);
                    _0x38d00f.push(_0x574147);
                }
            }
            if (_0x40621c) {
                _0x574147.sid = _0x19ba92;
            }
            _0x574147.init(_0x2aa94d, _0x3d4c5a, _0x114532, _0x82eb0d, _0x146166, _0x549a35, _0xd8d7ee);
        };
        this.disableBySid = function(_0x3b8f8c) {
            let _0x386b93 = findSID(gameObjects, _0x3b8f8c);
            if (_0x386b93) {
                this.disableObj(_0x386b93);
            }
        };
        this.removeAllItems = function(_0x5232f2, _0x5c65cf) {
            _0x38d00f.filter(_0x30ff46 => _0x30ff46.active && _0x30ff46.owner && _0x30ff46.owner.sid == _0x5232f2).forEach(_0x17de5a => this.disableObj(_0x17de5a));
        };
        this.checkItemLocation = function(_0x5f2e6e, _0x318e8b, _0x495bde, _0x2d8bf2, _0x3dce8d, _0x24d180, _0x5b7184) {
            let _0x3c5a12 = _0x38d00f.find(_0x106223 => _0x106223.active && _0x4a5fc0.getDistance(_0x5f2e6e, _0x318e8b, _0x106223.x, _0x106223.y) < _0x495bde + (_0x106223.blocker ? _0x106223.blocker : _0x106223.getScale(_0x2d8bf2, _0x106223.isItem)));
            if (_0x3c5a12) {
                return false;
            }
            if (!_0x24d180 && _0x3dce8d != 0x12 && _0x318e8b >= _0x52bcce.mapScale / 0x2 - _0x52bcce.riverWidth / 0x2 && _0x318e8b <= _0x52bcce.mapScale / 0x2 + _0x52bcce.riverWidth / 0x2) {
                return false;
            }
            return true;
        };
    }
}
class Projectile {
    constructor(_0x59a41f, _0x1c21a8, _0x50aa03, _0x1b59ec, _0x56fb72, _0x4deedf, _0x40e327) {
        this.init = function(_0x2b9d87, _0x53dabb, _0x4b2b12, _0x9a6e0f, _0x12484a, _0x1ec5b1, _0x3cc685, _0x23bb30, _0x31ecba) {
            this.shootReload = 1977.7777777777778;
            this.shootted = 0x0;
            this.active = true;
            this.tickActive = true;
            this.indx = _0x2b9d87;
            this.x = _0x53dabb;
            this.y = _0x4b2b12;
            this.x2 = _0x53dabb;
            this.y2 = _0x4b2b12;
            this.dir = _0x9a6e0f;
            this.skipMov = true;
            this.speed = _0x12484a;
            this.dmg = _0x1ec5b1;
            this.scale = _0x23bb30;
            this.range = _0x3cc685;
            this.r2 = _0x3cc685;
            this.owner = _0x31ecba;
        };
        this.update = function(_0x1e625f) {
            if (this.active) {
                let _0xa150a1 = this.speed * _0x1e625f;
                if (!this.skipMov) {
                    this.x += _0xa150a1 * Math.cos(this.dir);
                    this.y += _0xa150a1 * Math.sin(this.dir);
                    this.range -= _0xa150a1;
                    if (this.range <= 0x0) {
                        this.x += this.range * Math.cos(this.dir);
                        this.y += this.range * Math.sin(this.dir);
                        _0xa150a1 = 0x1;
                        this.range = 0x0;
                        this.active = false;
                    }
                } else {
                    this.skipMov = false;
                }
            }
        };
        this.tickUpdate = function(_0x330c23) {
            if (this.tickActive) {
                let _0x5bed72 = this.speed * _0x330c23;
                if (!this.skipMov) {
                    this.x2 += _0x5bed72 * Math.cos(this.dir);
                    this.y2 += _0x5bed72 * Math.sin(this.dir);
                    this.r2 -= _0x5bed72;
                    if (this.r2 <= 0x0) {
                        this.x2 += this.r2 * Math.cos(this.dir);
                        this.y2 += this.r2 * Math.sin(this.dir);
                        _0x5bed72 = 0x1;
                        this.r2 = 0x0;
                        this.tickActive = false;
                    }
                } else {
                    this.skipMov = false;
                }
            }
        };
    }
}
class Store {
    constructor() {
        this.hats = [{
            id: 0x2d,
            name: "Shame!",
            dontSell: true,
            price: 0x0,
            scale: 0x78,
            desc: "hacks are for winners"
        }, {
            id: 0x33,
            name: "Moo Cap",
            price: 0x0,
            scale: 0x78,
            desc: "coolest mooer around"
        }, {
            id: 0x32,
            name: "Apple Cap",
            price: 0x0,
            scale: 0x78,
            desc: "apple farms remembers"
        }, {
            id: 0x1c,
            name: "Moo Head",
            price: 0x0,
            scale: 0x78,
            desc: "no effect"
        }, {
            id: 0x1d,
            name: "Pig Head",
            price: 0x0,
            scale: 0x78,
            desc: "no effect"
        }, {
            id: 0x1e,
            name: "Fluff Head",
            price: 0x0,
            scale: 0x78,
            desc: "no effect"
        }, {
            id: 0x24,
            name: "Pandou Head",
            price: 0x0,
            scale: 0x78,
            desc: "no effect"
        }, {
            id: 0x25,
            name: "Bear Head",
            price: 0x0,
            scale: 0x78,
            desc: "no effect"
        }, {
            id: 0x26,
            name: "Monkey Head",
            price: 0x0,
            scale: 0x78,
            desc: "no effect"
        }, {
            id: 0x2c,
            name: "Polar Head",
            price: 0x0,
            scale: 0x78,
            desc: "no effect"
        }, {
            id: 0x23,
            name: "Fez Hat",
            price: 0x0,
            scale: 0x78,
            desc: "no effect"
        }, {
            id: 0x2a,
            name: "Enigma Hat",
            price: 0x0,
            scale: 0x78,
            desc: "join the enigma army"
        }, {
            id: 0x2b,
            name: "Blitz Hat",
            price: 0x0,
            scale: 0x78,
            desc: "hey everybody i'm blitz"
        }, {
            id: 0x31,
            name: "Bob XIII Hat",
            price: 0x0,
            scale: 0x78,
            desc: "like and subscribe"
        }, {
            id: 0x39,
            name: "Pumpkin",
            price: 0x32,
            scale: 0x78,
            desc: "Spooooky"
        }, {
            id: 0x8,
            name: "Bummle Hat",
            price: 0x64,
            scale: 0x78,
            desc: "no effect"
        }, {
            id: 0x2,
            name: "Straw Hat",
            price: 0x1f4,
            scale: 0x78,
            desc: "no effect"
        }, {
            id: 0xf,
            name: "Winter Cap",
            price: 0x258,
            scale: 0x78,
            desc: "allows you to move at normal speed in snow",
            coldM: 0x1
        }, {
            id: 0x5,
            name: "Cowboy Hat",
            price: 0x3e8,
            scale: 0x78,
            desc: "no effect"
        }, {
            id: 0x4,
            name: "Ranger Hat",
            price: 0x7d0,
            scale: 0x78,
            desc: "no effect"
        }, {
            id: 0x12,
            name: "Explorer Hat",
            price: 0x7d0,
            scale: 0x78,
            desc: "no effect"
        }, {
            id: 0x1f,
            name: "Flipper Hat",
            price: 0x9c4,
            scale: 0x78,
            desc: "have more control while in water",
            watrImm: true
        }, {
            id: 0x1,
            name: "Marksman Cap",
            price: 0xbb8,
            scale: 0x78,
            desc: "increases arrow speed and range",
            aMlt: 1.3
        }, {
            id: 0xa,
            name: "Bush Gear",
            price: 0xbb8,
            scale: 0xa0,
            desc: "allows you to disguise yourself as a bush"
        }, {
            id: 0x30,
            name: "Halo",
            price: 0xbb8,
            scale: 0x78,
            desc: "no effect"
        }, {
            id: 0x6,
            name: "Soldier Helmet",
            price: 0xfa0,
            scale: 0x78,
            desc: "reduces damage taken but slows movement",
            spdMult: 0.94,
            dmgMult: 0.75
        }, {
            id: 0x17,
            name: "Anti Venom Gear",
            price: 0xfa0,
            scale: 0x78,
            desc: "makes you immune to poison",
            poisonRes: 0x1
        }, {
            id: 0xd,
            name: "Medic Gear",
            price: 0x1388,
            scale: 0x6e,
            desc: "slowly regenerates health over time",
            healthRegen: 0x3
        }, {
            id: 0x9,
            name: "Miners Helmet",
            price: 0x1388,
            scale: 0x78,
            desc: "earn 1 extra gold per resource",
            extraGold: 0x1
        }, {
            id: 0x20,
            name: "Musketeer Hat",
            price: 0x1388,
            scale: 0x78,
            desc: "reduces cost of projectiles",
            projCost: 0.5
        }, {
            id: 0x7,
            name: "Bull Helmet",
            price: 0x1770,
            scale: 0x78,
            desc: "increases damage done but drains health",
            healthRegen: -0x5,
            dmgMultO: 1.5,
            spdMult: 0.96
        }, {
            id: 0x16,
            name: "Emp Helmet",
            price: 0x1770,
            scale: 0x78,
            desc: "turrets won't attack but you move slower",
            antiTurret: 0x1,
            spdMult: 0.7
        }, {
            id: 0xc,
            name: "Booster Hat",
            price: 0x1770,
            scale: 0x78,
            desc: "increases your movement speed",
            spdMult: 1.16
        }, {
            id: 0x1a,
            name: "Barbarian Armor",
            price: 0x1f40,
            scale: 0x78,
            desc: "knocks back enemies that attack you",
            dmgK: 0.6
        }, {
            id: 0x15,
            name: "Plague Mask",
            price: 0x2710,
            scale: 0x78,
            desc: "melee attacks deal poison damage",
            poisonDmg: 0x5,
            poisonTime: 0x6
        }, {
            id: 0x2e,
            name: "Bull Mask",
            price: 0x2710,
            scale: 0x78,
            desc: "bulls won't target you unless you attack them",
            bullRepel: 0x1
        }, {
            id: 0xe,
            name: "Windmill Hat",
            topSprite: true,
            price: 0x2710,
            scale: 0x78,
            desc: "generates points while worn",
            pps: 1.5
        }, {
            id: 0xb,
            name: "Spike Gear",
            topSprite: true,
            price: 0x2710,
            scale: 0x78,
            desc: "deal damage to players that damage you",
            dmg: 0.45
        }, {
            id: 0x35,
            name: "Turret Gear",
            topSprite: true,
            price: 0x2710,
            scale: 0x78,
            desc: "you become a walking turret",
            turret: {
                proj: 0x1,
                range: 0x2bc,
                rate: 0x9c4
            },
            spdMult: 0.7
        }, {
            id: 0x14,
            name: "Samurai Armor",
            price: 0x2ee0,
            scale: 0x78,
            desc: "increased attack speed and fire rate",
            atkSpd: 0.78
        }, {
            id: 0x3a,
            name: "Dark Knight",
            price: 0x2ee0,
            scale: 0x78,
            desc: "restores health when you deal damage",
            healD: 0.4
        }, {
            id: 0x1b,
            name: "Scavenger Gear",
            price: 0x3a98,
            scale: 0x78,
            desc: "earn double points for each kill",
            kScrM: 0x2
        }, {
            id: 0x28,
            name: "Tank Gear",
            price: 0x3a98,
            scale: 0x78,
            desc: "increased damage to buildings but slower movement",
            spdMult: 0.3,
            bDmg: 3.3
        }, {
            id: 0x34,
            name: "Thief Gear",
            price: 0x3a98,
            scale: 0x78,
            desc: "steal half of a players gold when you kill them",
            goldSteal: 0.5
        }, {
            id: 0x37,
            name: "Bloodthirster",
            price: 0x4e20,
            scale: 0x78,
            desc: "Restore Health when dealing damage. And increased damage",
            healD: 0.25,
            dmgMultO: 1.2
        }, {
            id: 0x38,
            name: "Assassin Gear",
            price: 0x4e20,
            scale: 0x78,
            desc: "Go invisible when not moving. Can't eat. Increased speed",
            noEat: true,
            spdMult: 1.1,
            invisTimer: 0x3e8
        }];
        this.accessories = [{
            id: 0xc,
            name: "Snowball",
            price: 0x3e8,
            scale: 0x69,
            xOff: 0x12,
            desc: "no effect"
        }, {
            id: 0x9,
            name: "Tree Cape",
            price: 0x3e8,
            scale: 0x5a,
            desc: "no effect"
        }, {
            id: 0xa,
            name: "Stone Cape",
            price: 0x3e8,
            scale: 0x5a,
            desc: "no effect"
        }, {
            id: 0x3,
            name: "Cookie Cape",
            price: 0x5dc,
            scale: 0x5a,
            desc: "no effect"
        }, {
            id: 0x8,
            name: "Cow Cape",
            price: 0x7d0,
            scale: 0x5a,
            desc: "no effect"
        }, {
            id: 0xb,
            name: "Monkey Tail",
            price: 0x7d0,
            scale: 0x61,
            xOff: 0x19,
            desc: "Super speed but reduced damage",
            spdMult: 1.35,
            dmgMultO: 0.2
        }, {
            id: 0x11,
            name: "Apple Basket",
            price: 0xbb8,
            scale: 0x50,
            xOff: 0xc,
            desc: "slowly regenerates health over time",
            healthRegen: 0x1
        }, {
            id: 0x6,
            name: "Winter Cape",
            price: 0xbb8,
            scale: 0x5a,
            desc: "no effect"
        }, {
            id: 0x4,
            name: "Skull Cape",
            price: 0xfa0,
            scale: 0x5a,
            desc: "no effect"
        }, {
            id: 0x5,
            name: "Dash Cape",
            price: 0x1388,
            scale: 0x5a,
            desc: "no effect"
        }, {
            id: 0x2,
            name: "Dragon Cape",
            price: 0x1770,
            scale: 0x5a,
            desc: "no effect"
        }, {
            id: 0x1,
            name: "Super Cape",
            price: 0x1f40,
            scale: 0x5a,
            desc: "no effect"
        }, {
            id: 0x7,
            name: "Troll Cape",
            price: 0x1f40,
            scale: 0x5a,
            desc: "no effect"
        }, {
            id: 0xe,
            name: "Thorns",
            price: 0x2710,
            scale: 0x73,
            xOff: 0x14,
            desc: "no effect"
        }, {
            id: 0xf,
            name: "Blockades",
            price: 0x2710,
            scale: 0x5f,
            xOff: 0xf,
            desc: "no effect"
        }, {
            id: 0x14,
            name: "Devils Tail",
            price: 0x2710,
            scale: 0x5f,
            xOff: 0x14,
            desc: "no effect"
        }, {
            id: 0x10,
            name: "Sawblade",
            price: 0x2ee0,
            scale: 0x5a,
            spin: true,
            xOff: 0x0,
            desc: "deal damage to players that damage you",
            dmg: 0.15
        }, {
            id: 0xd,
            name: "Angel Wings",
            price: 0x3a98,
            scale: 0x8a,
            xOff: 0x16,
            desc: "slowly regenerates health over time",
            healthRegen: 0x3
        }, {
            id: 0x13,
            name: "Shadow Wings",
            price: 0x3a98,
            scale: 0x8a,
            xOff: 0x16,
            desc: "increased movement speed",
            spdMult: 1.1
        }, {
            id: 0x12,
            name: "Blood Wings",
            price: 0x4e20,
            scale: 0xb2,
            xOff: 0x1a,
            desc: "restores health when you deal damage",
            healD: 0.2
        }, {
            id: 0x15,
            name: "Corrupt X Wings",
            price: 0x4e20,
            scale: 0xb2,
            xOff: 0x1a,
            desc: "deal damage to players that damage you",
            dmg: 0.25
        }];
    }
}
class ProjectileManager {
    constructor(_0x235ceb, _0xa4fa80, _0x5459f4, _0xa36ae2, _0x456945, _0x304c1f, _0x5020d9, _0x2b6d00, _0x23026c) {
        this.addProjectile = function(_0x443c40, _0x3008f5, _0x630b85, _0x59ea59, _0xd5ad70, _0x1ec38a, _0x48b2c6, _0x337879, _0x3a85c3, _0x216b99) {
            let _0xc333a7 = _0x304c1f.projectiles[_0x1ec38a];
            let _0x53e878;
            for (let _0x313070 = 0x0; _0x313070 < _0xa4fa80.length; ++_0x313070) {
                if (!_0xa4fa80[_0x313070].active) {
                    _0x53e878 = _0xa4fa80[_0x313070];
                    break;
                }
            }
            if (!_0x53e878) {
                _0x53e878 = new _0x235ceb(_0x5459f4, _0xa36ae2, _0x456945, _0x304c1f, _0x5020d9, _0x2b6d00, _0x23026c);
                _0x53e878.sid = _0xa4fa80.length;
                _0xa4fa80.push(_0x53e878);
            }
            _0x53e878.init(_0x1ec38a, _0x443c40, _0x3008f5, _0x630b85, _0xd5ad70, _0xc333a7.dmg, _0x59ea59, _0xc333a7.scale, _0x48b2c6);
            _0x53e878.ignoreObj = _0x337879;
            _0x53e878.layer = _0x3a85c3 || _0xc333a7.layer;
            _0x53e878.inWindow = _0x216b99;
            _0x53e878.src = _0xc333a7.src;
            return _0x53e878;
        };
    }
}
class AiManager {
    constructor(_0x8d4804, _0x24f097, _0x14b68a, _0x1f7a5c, _0x30a1b4, _0x2bba4d, _0x1ffba2, _0x2ac0bb, _0x3acf0c) {
        this.aiTypes = [{
            id: 0x0,
            src: "cow_1",
            killScore: 0x96,
            health: 0x1f4,
            weightM: 0.8,
            speed: 0.00095,
            turnSpeed: 0.001,
            scale: 0x48,
            drop: ["food", 0x32]
        }, {
            id: 0x1,
            src: "pig_1",
            killScore: 0xc8,
            health: 0x320,
            weightM: 0.6,
            speed: 0.00085,
            turnSpeed: 0.001,
            scale: 0x48,
            drop: ["food", 0x50]
        }, {
            id: 0x2,
            name: "Bull",
            src: "bull_2",
            hostile: true,
            dmg: 0x14,
            killScore: 0x3e8,
            health: 0x708,
            weightM: 0.5,
            speed: 0.00094,
            turnSpeed: 0.00074,
            scale: 0x4e,
            viewRange: 0x320,
            chargePlayer: true,
            drop: ["food", 0x64]
        }, {
            id: 0x3,
            name: "Bully",
            src: "bull_1",
            hostile: true,
            dmg: 0x14,
            killScore: 0x7d0,
            health: 0xaf0,
            weightM: 0.45,
            speed: 0.001,
            turnSpeed: 0.0008,
            scale: 0x5a,
            viewRange: 0x384,
            chargePlayer: true,
            drop: ["food", 0x190]
        }, {
            id: 0x4,
            name: "Wolf",
            src: "wolf_1",
            hostile: true,
            dmg: 0x8,
            killScore: 0x1f4,
            health: 0x12c,
            weightM: 0.45,
            speed: 0.001,
            turnSpeed: 0.002,
            scale: 0x54,
            viewRange: 0x320,
            chargePlayer: true,
            drop: ["food", 0xc8]
        }, {
            id: 0x5,
            name: "Quack",
            src: "chicken_1",
            dmg: 0x8,
            killScore: 0x7d0,
            noTrap: true,
            health: 0x12c,
            weightM: 0.2,
            speed: 0.0018,
            turnSpeed: 0.006,
            scale: 0x46,
            drop: ["food", 0x64]
        }, {
            id: 0x6,
            name: "MOOSTAFA",
            nameScale: 0x32,
            src: "enemy",
            hostile: true,
            dontRun: true,
            fixedSpawn: true,
            spawnDelay: 0xea60,
            noTrap: true,
            colDmg: 0x64,
            dmg: 0x28,
            killScore: 0x1f40,
            health: 0x4650,
            weightM: 0.4,
            speed: 0.0007,
            turnSpeed: 0.01,
            scale: 0x50,
            spriteMlt: 1.8,
            leapForce: 0.9,
            viewRange: 0x3e8,
            hitRange: 0xd2,
            hitDelay: 0x3e8,
            chargePlayer: true,
            drop: ["food", 0x64]
        }, {
            id: 0x7,
            name: "Treasure",
            hostile: true,
            nameScale: 0x23,
            src: "crate_1",
            fixedSpawn: true,
            spawnDelay: 0x1d4c0,
            colDmg: 0xc8,
            killScore: 0x1388,
            health: 0x4e20,
            weightM: 0.1,
            speed: 0x0,
            turnSpeed: 0x0,
            scale: 0x46,
            spriteMlt: 0x1
        }, {
            id: 0x8,
            name: "MOOFIE",
            src: "wolf_2",
            hostile: true,
            fixedSpawn: true,
            dontRun: true,
            hitScare: 0x4,
            spawnDelay: 0x7530,
            noTrap: true,
            nameScale: 0x23,
            dmg: 0xa,
            colDmg: 0x64,
            killScore: 0xbb8,
            health: 0x1b58,
            weightM: 0.45,
            speed: 0.0015,
            turnSpeed: 0.002,
            scale: 0x5a,
            viewRange: 0x320,
            chargePlayer: true,
            drop: ["food", 0x3e8]
        }, {
            id: 0x9,
            name: "💀MOOFIE",
            src: "wolf_2",
            hostile: true,
            fixedSpawn: true,
            dontRun: true,
            hitScare: 0x32,
            spawnDelay: 0xea60,
            noTrap: true,
            nameScale: 0x23,
            dmg: 0xc,
            colDmg: 0x64,
            killScore: 0xbb8,
            health: 0x2328,
            weightM: 0.45,
            speed: 0.0015,
            turnSpeed: 0.0025,
            scale: 0x5e,
            viewRange: 0x5a0,
            chargePlayer: true,
            drop: ["food", 0xbb8],
            minSpawnRange: 0.85,
            maxSpawnRange: 0.9
        }, {
            id: 0xa,
            name: "💀Wolf",
            src: "wolf_1",
            hostile: true,
            fixedSpawn: true,
            dontRun: true,
            hitScare: 0x32,
            spawnDelay: 0x7530,
            dmg: 0xa,
            killScore: 0x2bc,
            health: 0x1f4,
            weightM: 0.45,
            speed: 0.00115,
            turnSpeed: 0.0025,
            scale: 0x58,
            viewRange: 0x5a0,
            chargePlayer: true,
            drop: ["food", 0x190],
            minSpawnRange: 0.85,
            maxSpawnRange: 0.9
        }, {
            id: 0xb,
            name: "💀Bull",
            src: "bull_1",
            hostile: true,
            fixedSpawn: true,
            dontRun: true,
            hitScare: 0x32,
            dmg: 0x14,
            killScore: 0x1388,
            health: 0x1388,
            spawnDelay: 0x186a0,
            weightM: 0.45,
            speed: 0.00115,
            turnSpeed: 0.0025,
            scale: 0x5e,
            viewRange: 0x5a0,
            chargePlayer: true,
            drop: ["food", 0x320],
            minSpawnRange: 0.85,
            maxSpawnRange: 0.9
        }];
        this.spawn = function(_0x403ab6, _0x4b93dd, _0x10e81a, _0x1c2873) {
            let _0x5333c5 = _0x8d4804.find(_0x43214e => !_0x43214e.active);
            if (!_0x5333c5) {
                _0x5333c5 = new _0x24f097(_0x8d4804.length, _0x30a1b4, _0x14b68a, _0x1f7a5c, _0x1ffba2, _0x2bba4d, _0x2ac0bb, _0x3acf0c);
                _0x8d4804.push(_0x5333c5);
            }
            _0x5333c5.init(_0x403ab6, _0x4b93dd, _0x10e81a, _0x1c2873, this.aiTypes[_0x1c2873]);
            return _0x5333c5;
        };
    }
}
class AI {
    constructor(_0xdcd948, _0x3fbfe5, _0x53a7e7, _0x2b5f83, _0x218e30, _0x4903cd, _0x3e2716, _0x577247) {
        this.sid = _0xdcd948;
        this.isAI = true;
        this.nameIndex = _0x218e30.randInt(0x0, _0x4903cd.cowNames.length - 0x1);
        this.init = function(_0x4bd677, _0x3a9f79, _0x5215d5, _0x3c4265, _0x5e02d5) {
            this.x = _0x4bd677;
            this.y = _0x3a9f79;
            this.startX = _0x5e02d5.fixedSpawn ? _0x4bd677 : null;
            this.startY = _0x5e02d5.fixedSpawn ? _0x3a9f79 : null;
            this.xVel = 0x0;
            this.yVel = 0x0;
            this.zIndex = 0x0;
            this.dir = _0x5215d5;
            this.dirPlus = 0x0;
            this.index = _0x3c4265;
            this.src = _0x5e02d5.src;
            if (_0x5e02d5.name) {
                this.name = _0x5e02d5.name;
            }
            this.weightM = _0x5e02d5.weightM;
            this.speed = _0x5e02d5.speed;
            this.killScore = _0x5e02d5.killScore;
            this.turnSpeed = _0x5e02d5.turnSpeed;
            this.scale = _0x5e02d5.scale;
            this.maxHealth = _0x5e02d5.health;
            this.leapForce = _0x5e02d5.leapForce;
            this.health = this.maxHealth;
            this.chargePlayer = _0x5e02d5.chargePlayer;
            this.viewRange = _0x5e02d5.viewRange;
            this.drop = _0x5e02d5.drop;
            this.dmg = _0x5e02d5.dmg;
            this.hostile = _0x5e02d5.hostile;
            this.dontRun = _0x5e02d5.dontRun;
            this.hitRange = _0x5e02d5.hitRange;
            this.hitDelay = _0x5e02d5.hitDelay;
            this.hitScare = _0x5e02d5.hitScare;
            this.spriteMlt = _0x5e02d5.spriteMlt;
            this.nameScale = _0x5e02d5.nameScale;
            this.colDmg = _0x5e02d5.colDmg;
            this.noTrap = _0x5e02d5.noTrap;
            this.spawnDelay = _0x5e02d5.spawnDelay;
            this.hitWait = 0x0;
            this.waitCount = 0x3e8;
            this.moveCount = 0x0;
            this.targetDir = 0x0;
            this.active = true;
            this.alive = true;
            this.runFrom = null;
            this.chargeTarget = null;
            this.dmgOverTime = {};
        };
        let _0x5cbb9a = 0x0;
        let _0x488b36 = 0x0;
        this.animate = function(_0x2952cb) {
            if (this.animTime > 0x0) {
                this.animTime -= _0x2952cb;
                if (this.animTime <= 0x0) {
                    this.animTime = 0x0;
                    this.dirPlus = 0x0;
                    _0x5cbb9a = 0x0;
                    _0x488b36 = 0x0;
                } else if (_0x488b36 == 0x0) {
                    _0x5cbb9a += _0x2952cb / (this.animSpeed * _0x4903cd.hitReturnRatio);
                    this.dirPlus = _0x218e30.lerp(0x0, this.targetAngle, Math.min(0x1, _0x5cbb9a));
                    if (_0x5cbb9a >= 0x1) {
                        _0x5cbb9a = 0x1;
                        _0x488b36 = 0x1;
                    }
                } else {
                    _0x5cbb9a -= _0x2952cb / (this.animSpeed * (0x1 - _0x4903cd.hitReturnRatio));
                    this.dirPlus = _0x218e30.lerp(0x0, this.targetAngle, Math.max(0x0, _0x5cbb9a));
                }
            }
        };
        this.startAnim = function() {
            this.animTime = this.animSpeed = 0x258;
            this.targetAngle = Math.PI * 0.8;
            _0x5cbb9a = 0x0;
            _0x488b36 = 0x0;
        };
    }
}
class addCh {
    constructor(_0x5817bb, _0x2a689f, _0x2ef34e, _0x20633b) {
        this.x = _0x5817bb;
        this.y = _0x2a689f;
        this.alpha = 0x0;
        this.active = true;
        this.alive = false;
        this.chat = _0x2ef34e;
        this.owner = _0x20633b;
    }
}
class DeadPlayer {
    constructor(_0x3d8078, _0x4b432, _0x4ef30d, _0x46c6ae, _0x731e84, _0xbda1c0, _0x295310, _0x22fc13, _0x52ebc3) {
        this.x = _0x3d8078;
        this.y = _0x4b432;
        this.lastDir = _0x4ef30d;
        this.dir = _0x4ef30d + Math.PI;
        this.buildIndex = _0x46c6ae;
        this.weaponIndex = _0x731e84;
        this.weaponVariant = _0xbda1c0;
        this.skinColor = _0x295310;
        this.scale = _0x22fc13;
        this.visScale = 0x0;
        this.name = _0x52ebc3;
        this.alpha = 0x1;
        this.active = true;
        this.animate = function(_0x344040) {
            let _0x538a76 = UTILS.getAngleDist(this.lastDir, this.dir);
            if (_0x538a76 > 0.01) {
                this.dir += _0x538a76 / 0x14;
            } else {
                this.dir = this.lastDir;
            }
            if (this.visScale < this.scale) {
                this.visScale += _0x344040 / (this.scale / 0x2);
                if (this.visScale >= this.scale) {
                    this.visScale = this.scale;
                }
            }
            this.alpha -= _0x344040 / 0x7530;
            if (this.alpha <= 0x0) {
                this.alpha = 0x0;
                this.active = false;
            }
        };
    }
}
class Player {
    constructor(_0x39d6b6, _0x67d79e, _0x554239, _0x25162f, _0x35e757, _0x3d07e2, _0x21f736, _0x456efb, _0xdbb27f, _0x1381e4, _0x1568c5, _0x52bc58, _0x212275, _0x59d7fa) {
        this.id = _0x39d6b6;
        this.sid = _0x67d79e;
        this.tmpScore = 0x0;
        this.team = null;
        this.latestSkin = 0x0;
        this.oldSkinIndex = 0x0;
        this.skinIndex = 0x0;
        this.latestTail = 0x0;
        this.oldTailIndex = 0x0;
        this.tailIndex = 0x0;
        this.hitTime = 0x0;
        this.lastHit = 0x0;
        this.tails = {};
        for (let _0xb732ad = 0x0; _0xb732ad < _0x1568c5.length; ++_0xb732ad) {
            if (_0x1568c5[_0xb732ad].price <= 0x0) {
                this.tails[_0x1568c5[_0xb732ad].id] = 0x1;
            }
        }
        this.skins = {};
        for (let _0x15fb88 = 0x0; _0x15fb88 < _0x1381e4.length; ++_0x15fb88) {
            if (_0x1381e4[_0x15fb88].price <= 0x0) {
                this.skins[_0x1381e4[_0x15fb88].id] = 0x1;
            }
        }
        this.points = 0x0;
        this.dt = 0x0;
        this.hidden = false;
        this.itemCounts = {};
        this.isPlayer = true;
        this.pps = 0x0;
        this.moveDir = undefined;
        this.skinRot = 0x0;
        this.lastPing = 0x0;
        this.iconIndex = 0x0;
        this.dangerShame = 0x5;
        this.maxShame = 0x7;
        this.hitted = false;
        this.healSid = -0x1;
        this.skinColor = 0x0;
        this.dist2 = 0x0;
        this.aim2 = 0x0;
        this.maxSpeed = 0x1;
        this.chat = {
            message: null,
            count: 0x0
        };
        this.backupNobull = true;
        this.circle = false;
        this.spawn = function(_0x4f1d7d) {
            this.syncThreats = 0x0;
            this.attacked = false;
            this.death = false;
            this.spinDir = 0x0;
            this.sync = false;
            this.antiBull = 0x0;
            this.bullTimer = 0x0;
            this.poisonTimer = 0x0;
            this.active = true;
            this.alive = true;
            this.lockMove = false;
            this.lockDir = false;
            this.minimapCounter = 0x0;
            this.chatCountdown = 0x0;
            this.shameCount = 0x0;
            this.shameTimer = 0x0;
            this.sentTo = {};
            this.gathering = 0x0;
            this.gatherIndex = 0x0;
            this.shooting = {};
            this.shootIndex = 0x9;
            this.autoGather = 0x0;
            this.animTime = 0x0;
            this.animSpeed = 0x0;
            this.mouseState = 0x0;
            this.buildIndex = -0x1;
            this.weaponIndex = 0x0;
            this.weaponCode = 0x0;
            this.weaponVariant = 0x0;
            this.primaryIndex = undefined;
            this.secondaryIndex = undefined;
            this.dmgOverTime = {};
            this.noMovTimer = 0x0;
            this.maxXP = 0x12c;
            this.XP = 0x0;
            this.age = 0x1;
            this.kills = 0x0;
            this.upgrAge = 0x2;
            this.firstItems = [0x0, 0x3, 0x6, 0xa];
            this.upgradePoints = 0x0;
            this.x = 0x0;
            this.y = 0x0;
            this.oldXY = {
                x: 0x0,
                y: 0x0
            };
            this.zIndex = 0x0;
            this.xVel = 0x0;
            this.yVel = 0x0;
            this.slowMult = 0x1;
            this.dir = 0x0;
            this.dirPlus = 0x0;
            this.targetDir = 0x0;
            this.targetAngle = 0x0;
            this.maxHealth = 0x64;
            this.health = this.maxHealth;
            this.oldHealth = this.maxHealth;
            this.damaged = 0x0;
            this.scale = _0x554239.playerScale;
            this.speed = _0x554239.playerSpeed;
            this.resetMoveDir();
            this.resetResources(_0x4f1d7d);
            this.items = [0x0, 0x3, 0x6, 0xa];
            this.weapons = [0x0];
            this.shootCount = 0x0;
            this.weaponXP = [];
            this.reloads = {
                0x0: 0x0,
                0x1: 0x0,
                0x2: 0x0,
                0x3: 0x0,
                0x4: 0x0,
                0x5: 0x0,
                0x6: 0x0,
                0x7: 0x0,
                0x8: 0x0,
                0x9: 0x0,
                0xa: 0x0,
                0xb: 0x0,
                0xc: 0x0,
                0xd: 0x0,
                0xe: 0x0,
                0xf: 0x0,
                0x35: 0x0
            };
            this.bowThreat = {
                0x9: 0x0,
                0xc: 0x0,
                0xd: 0x0,
                0xf: 0x0
            };
            this.damageThreat = 0x0;
            this.inTrap = false;
            this.canEmpAnti = false;
            this.empAnti = false;
            this.soldierAnti = false;
            this.poisonTick = 0x0;
            this.bullTick = 0x0;
            this.setPoisonTick = false;
            this.setBullTick = false;
            this.antiTimer = 0x2;
        };
        this.resetMoveDir = function() {
            this.moveDir = undefined;
        };
        this.resetResources = function(_0x5c1b2c) {
            for (let _0x2ff2c5 = 0x0; _0x2ff2c5 < _0x554239.resourceTypes.length; ++_0x2ff2c5) {
                this[_0x554239.resourceTypes[_0x2ff2c5]] = _0x5c1b2c ? 0x64 : 0x0;
            }
        };
        this.getItemType = function(_0x259ae3) {
            let _0x1dc596 = this.items.findIndex(_0x3c05ad => _0x3c05ad == _0x259ae3);
            return _0x1dc596 != -0x1 ? _0x1dc596 : _0xdbb27f.checkItem.index(_0x259ae3, this.items);
        };
        this.setData = function(_0x2f1536) {
            this.id = _0x2f1536[0x0];
            this.sid = _0x2f1536[0x1];
            this.name = _0x2f1536[0x2];
            this.x = _0x2f1536[0x3];
            this.y = _0x2f1536[0x4];
            this.dir = _0x2f1536[0x5];
            this.health = _0x2f1536[0x6];
            this.maxHealth = _0x2f1536[0x7];
            this.scale = _0x2f1536[0x8];
            this.skinColor = _0x2f1536[0x9];
        };
        this.updateTimer = function() {
            this.bullTimer -= 0x1;
            if (this.bullTimer <= 0x0) {
                this.setBullTick = false;
                this.bullTick = game.tick - 0x1;
                this.bullTimer = _0x554239.serverUpdateRate;
            }
            this.poisonTimer -= 0x1;
            if (this.poisonTimer <= 0x0) {
                this.setPoisonTick = false;
                this.poisonTick = game.tick - 0x1;
                this.poisonTimer = _0x554239.serverUpdateRate;
            }
        };
        this.update = function(_0x473816) {
            if (this.sid == playerSID) {}
            if (this.active) {
                let _0x4f4b53 = {
                    skin: findID(_0x1381e4, this.skinIndex),
                    tail: findID(_0x1568c5, this.tailIndex)
                };
                let _0x3dca2d = (this.buildIndex >= 0x0 ? 0.5 : 0x1) * (_0xdbb27f.weapons[this.weaponIndex].spdMult || 0x1) * (_0x4f4b53.skin ? _0x4f4b53.skin.spdMult || 0x1 : 0x1) * (_0x4f4b53.tail ? _0x4f4b53.tail.spdMult || 0x1 : 0x1) * (this.y <= _0x554239.snowBiomeTop ? _0x4f4b53.skin && _0x4f4b53.skin.coldM ? 0x1 : _0x554239.snowSpeed : 0x1) * this.slowMult;
                this.maxSpeed = _0x3dca2d;
            }
        };
        let _0x2ac901 = 0x0;
        let _0x449936 = 0x0;
        this.animate = function(_0x4a2439) {
            if (this.animTime > 0x0) {
                this.animTime -= _0x4a2439;
                if (this.animTime <= 0x0) {
                    this.animTime = 0x0;
                    this.dirPlus = 0x0;
                    _0x2ac901 = 0x0;
                    _0x449936 = 0x0;
                } else if (_0x449936 == 0x0) {
                    _0x2ac901 += _0x4a2439 / (this.animSpeed * _0x554239.hitReturnRatio);
                    this.dirPlus = _0x25162f.lerp(0x0, this.targetAngle, Math.min(0x1, _0x2ac901));
                    if (_0x2ac901 >= 0x1) {
                        _0x2ac901 = 0x1;
                        _0x449936 = 0x1;
                    }
                } else {
                    _0x2ac901 -= _0x4a2439 / (this.animSpeed * (0x1 - _0x554239.hitReturnRatio));
                    this.dirPlus = _0x25162f.lerp(0x0, this.targetAngle, Math.max(0x0, _0x2ac901));
                }
            }
        };
        this.startAnim = function(_0x405275, _0x7c9271) {
            this.animTime = this.animSpeed = _0xdbb27f.weapons[_0x7c9271].speed;
            this.targetAngle = _0x405275 ? -_0x554239.hitAngle : -Math.PI;
            _0x2ac901 = 0x0;
            _0x449936 = 0x0;
        };
        this.canSee = function(_0x443543) {
            if (!_0x443543) {
                return false;
            }
            let _0x7ed4e4 = Math.abs(_0x443543.x - this.x) - _0x443543.scale;
            let _0x6c05d = Math.abs(_0x443543.y - this.y) - _0x443543.scale;
            return _0x7ed4e4 <= _0x554239.maxScreenWidth / 0x2 * 1.3 && _0x6c05d <= _0x554239.maxScreenHeight / 0x2 * 1.3;
        };
        this.judgeShame = function() {
            if (this.oldHealth < this.health) {
                if (this.hitTime) {
                    let _0x35c71a = game.tick - this.hitTime;
                    this.lastHit = game.tick;
                    this.hitTime = 0x0;
                    if (_0x35c71a < 0x2) {
                        this.shameCount++;
                    } else {
                        this.shameCount = Math.max(0x0, this.shameCount - 0x2);
                    }
                }
            } else if (this.oldHealth > this.health) {
                this.hitTime = game.tick;
            }
        };
        this.addShameTimer = function() {
            this.shameCount = 0x0;
            this.shameTimer = 0x1e;
            let _0x28b91d = setInterval(() => {
                this.shameTimer--;
                if (this.shameTimer <= 0x0) {
                    clearInterval(_0x28b91d);
                }
            }, 0x3e8);
        };
        this.isTeam = function(_0x21780d) {
            return this == _0x21780d || this.team && this.team == _0x21780d.team;
        };
        this.findAllianceBySid = function(_0x52659e) {
            return this.team ? alliancePlayers.find(_0x2c2b58 => _0x2c2b58 === _0x52659e) : null;
        };
        this.checkCanInsta = function(_0x39eff9) {
            let _0x37903a = 0x0;
            if (this.alive && inGame) {
                let _0x4df113 = {
                    weapon: this.weapons[0x0],
                    variant: this.primaryVariant,
                    dmg: this.weapons[0x0] == undefined ? 0x0 : _0xdbb27f.weapons[this.weapons[0x0]].dmg
                };
                let _0x4305b0 = {
                    weapon: this.weapons[0x1],
                    variant: this.secondaryVariant,
                    dmg: this.weapons[0x1] == undefined ? 0x0 : _0xdbb27f.weapons[this.weapons[0x1]].Pdmg
                };
                let _0x268fe9 = this.skins[0x7] && !_0x39eff9 ? 1.5 : 0x1;
                let _0x31e998 = _0x4df113.variant != undefined ? _0x554239.weaponVariants[_0x4df113.variant].val : 0x1;
                if (_0x4df113.weapon != undefined && this.reloads[_0x4df113.weapon] == 0x0) {
                    _0x37903a += _0x4df113.dmg * _0x31e998 * _0x268fe9;
                }
                if (_0x4305b0.weapon != undefined && this.reloads[_0x4305b0.weapon] == 0x0) {
                    _0x37903a += _0x4305b0.dmg;
                }
                if (this.skins[0x35] && this.reloads[0x35] <= (player.weapons[0x1] == 0xa ? 0x0 : game.tickRate) && near.skinIndex != 0x16) {
                    _0x37903a += 0x19;
                }
                _0x37903a *= near.skinIndex == 0x6 ? 0.75 : 0x1;
                return _0x37903a;
            }
            return 0x0;
        };
        this.manageReload = function() {
            if (this.shooting[0x35]) {
                this.shooting[0x35] = 0x0;
                this.reloads[0x35] = 0x9c4 - game.tickRate;
            } else if (this.reloads[0x35] > 0x0) {
                this.reloads[0x35] = Math.max(0x0, this.reloads[0x35] - game.tickRate);
            }
            if (this.gathering || this.shooting[0x1]) {
                if (this.gathering) {
                    this.gathering = 0x0;
                    this.reloads[this.gatherIndex] = _0xdbb27f.weapons[this.gatherIndex].speed * (this.skinIndex == 0x14 ? 0.78 : 0x1);
                    this.attacked = true;
                }
                if (this.shooting[0x1]) {
                    this.shooting[0x1] = 0x0;
                    this.reloads[this.shootIndex] = _0xdbb27f.weapons[this.shootIndex].speed * (this.skinIndex == 0x14 ? 0.78 : 0x1);
                    this.attacked = true;
                }
            } else {
                this.attacked = false;
                if (this.buildIndex < 0x0) {
                    if (this.reloads[this.weaponIndex] > 0x0) {
                        this.reloads[this.weaponIndex] = Math.max(0x0, this.reloads[this.weaponIndex] - game.tickRate);
                        if (this == player) {
                            if (document.getElementById("doAutoGrind").checked) {
                                for (let _0x29f203 = 0x0; _0x29f203 < Math.PI * 0x2; _0x29f203 += Math.PI / 0x2) {
                                    checkPlace(player.getItemType(0x16), _0x29f203);
                                }
                            }
                        }
                        if (this.reloads[this.primaryIndex] == 0x0 && this.reloads[this.weaponIndex] == 0x0) {
                            this.antiBull++;
                            game.tickBase(() => {
                                this.antiBull = 0x0;
                            }, 0x1);
                        }
                    }
                }
            }
        };
        this.addDamageThreat = function(_0x55d8d9) {
            let _0x42b697 = function(_0x3869fa, _0x431b1f, _0x1bc5fd = "", _0x18b767 = "") {
                if (_0x1bc5fd === 0x0) {
                    _0x1bc5fd = "";
                }
                if (_0x18b767 === 0x0) {
                    _0x18b767 = "";
                }
                return Math.atan2(_0x3869fa["y" + _0x1bc5fd] - _0x431b1f["y" + _0x18b767], _0x3869fa["x" + _0x1bc5fd] - _0x431b1f["x" + _0x18b767]);
            };
            if (!nears.length) {
                return 0x0;
            }
            for (let _0x3d4ed1 of gameObjects) {
                if (_0x3d4ed1.dmg && _0x3d4ed1.active && !_0x3d4ed1.isTeamObject(player)) {
                    let _0x4f8b0f = [_0x25162f.getDist(_0x3d4ed1, nears, 0x0, 0x2), _0x42b697(_0x3d4ed1, nears, 0x0, 0x2)];
                    let _0x15cca1 = [_0x25162f.getDist(nears, player, 0x2, 0x2), _0x42b697(nears, player, 0x2, 0x2)];
                    if (_0x25162f.getAngleDist(_0x4f8b0f[0x1], _0x15cca1[0x2]) < Math.PI / 2.6 && _0x15cca1[0x0] < _0xdbb27f.weapons[nears.primaryIndex || 0x5].range + 0x50) {
                        this.damageThreat += _0x3d4ed1.dmg;
                    }
                }
            }
            let _0xe2d68e = {
                weapon: this.primaryIndex,
                variant: this.primaryVariant
            };
            let _0x18d34c = {
                weapon: this.secondaryIndex,
                variant: this.secondaryVariant
            };
            _0xe2d68e.dmg = _0xe2d68e.weapon == undefined ? 0x2d : _0xdbb27f.weapons[_0xe2d68e.weapon].dmg;
            _0x18d34c.dmg = _0x18d34c.weapon == undefined ? 0x32 : _0xdbb27f.weapons[_0x18d34c.weapon].Pdmg;
            let _0x5cb8d9 = _0xe2d68e.variant != undefined ? _0x554239.weaponVariants[_0xe2d68e.variant].val : 1.18;
            let _0x50a5a4 = _0x18d34c.variant != undefined ? [0x9, 0xc, 0xd, 0xf].includes(_0x18d34c.weapon) ? 0x1 : _0x554239.weaponVariants[_0x18d34c.variant].val : 1.18;
            if (_0xe2d68e.weapon == undefined ? true : this.reloads[_0xe2d68e.weapon] == 0x0) {
                this.damageThreat += _0xe2d68e.dmg * _0x5cb8d9 * 1.5;
            }
            if (_0x18d34c.weapon == undefined ? true : this.reloads[_0x18d34c.weapon] == 0x0) {
                this.damageThreat += _0x18d34c.dmg * _0x50a5a4;
            }
            if (this.reloads[0x35] <= game.tickRate) {
                this.damageThreat += 0x19;
            }
            this.damageThreat *= _0x55d8d9.skinIndex == 0x6 ? 0.75 : 0x1;
            if (!this.isTeam(_0x55d8d9) && this.dist2 <= 0x12c) {
                _0x55d8d9.damageThreat += this.damageThreat;
            }
        };
    }
}

function notif(_0x4f3373, _0x4306a4) {
    if (typeof _0x4f3373 !== "undefined") {
        textManager.showText(player.x, player.y, 0x2d, 0.18, 0x1f4, _0x4f3373, "white");
    }
    if (typeof _0x4306a4 !== "undefined") {
        textManager.showText(player.x, player.y + 0x2d, 0x1e, 0.18, 0x1f4, _0x4306a4, "white");
    }
}
let hahawtfLOL = {
    wood: 0x0,
    stone: 0x0,
    food: 0x0,
    points: 0x0,
    kills: 0x0
};
setInterval(() => {
    if (player) {
        updateStatusDisplay();
    }
}, 0xa);

function updateStatusDisplay() {
    hahawtfLOL.wood += (player.wood - hahawtfLOL.wood) / 0xf;
    hahawtfLOL.stone += (player.stone - hahawtfLOL.stone) / 0xf;
    hahawtfLOL.points += (player.points - hahawtfLOL.points) / 0xf;
    hahawtfLOL.food += (player.food - hahawtfLOL.food) / 0xf;
    hahawtfLOL.kills += (player.food - hahawtfLOL.food) / 0xf;
    let _0xe521c1 = function(_0xd5e0ca, _0x5bdee0 = 0x3e8, _0x271933 = ["k", "m", "b", "t", "q"]) {
        if (_0xd5e0ca === Number.POSITIVE_INFINITY) {
            return "Infinity";
        } else {
            if (_0xd5e0ca >= 0xde0b6b3a7640000 && _0x5bdee0 <= 0xde0b6b3a7640000) {
                return _0xd5e0ca.toExponential(0x2).replace(/\+/g, "");
            } else {
                if (_0xd5e0ca >= 0x38d7ea4c68000 && _0x5bdee0 <= 0x38d7ea4c68000) {
                    return (_0xd5e0ca / 0x38d7ea4c68000).toFixed(0x2) + _0x271933[0x4];
                } else {
                    if (_0xd5e0ca >= 0xe8d4a51000 && _0x5bdee0 <= 0xe8d4a51000) {
                        return (_0xd5e0ca / 0xe8d4a51000).toFixed(0x2) + _0x271933[0x3];
                    } else {
                        if (_0xd5e0ca >= 0x3b9aca00 && _0x5bdee0 <= 0x3b9aca00) {
                            return (_0xd5e0ca / 0x3b9aca00).toFixed(0x2) + _0x271933[0x2];
                        } else {
                            if (_0xd5e0ca >= 0xf4240 && _0x5bdee0 <= 0xf4240) {
                                return (_0xd5e0ca / 0xf4240).toFixed(0x2) + _0x271933[0x1];
                            } else {
                                return _0xd5e0ca >= 0x3e8 && _0x5bdee0 <= 0x3e8 ? (_0xd5e0ca / 0x3e8).toFixed(0x2) + _0x271933[0x0] : _0xd5e0ca.toLocaleString();
                            }
                        }
                    }
                }
            }
        }
    };
    document.querySelector("#woodDisplay").innerHTML = _0xe521c1(Math.round(hahawtfLOL.wood), 0xf4240);
    document.querySelector("#stoneDisplay").innerHTML = _0xe521c1(Math.round(hahawtfLOL.stone), 0xf4240);
    document.querySelector("#foodDisplay").innerHTML = _0xe521c1(Math.round(hahawtfLOL.food), 0xf4240);
    document.querySelector("#scoreDisplay").innerHTML = _0xe521c1(Math.round(hahawtfLOL.points), 0xf4240);
    document.querySelector("#killCounter").innerHTML = player.kills;
}

function sendUpgrade(_0x367639) {
    player.reloads[_0x367639] = 0x0;
    packet("H", _0x367639);
}

function storeEquip(_0x317ecc, _0x1129a2) {
    packet("c", 0x0, _0x317ecc, _0x1129a2);
}

function storeBuy(_0x2dfa7e, _0x199288) {
    packet("c", 0x1, _0x2dfa7e, _0x199288);
}

function buyEquip(_0x3482e0, _0x15982f) {
    let _0x138d89 = player.skins[0x6] ? 0x6 : 0x0;
    if (player.alive && inGame) {
        if (_0x15982f == 0x0) {
            if (player.skins[_0x3482e0]) {
                if (player.latestSkin != _0x3482e0) {
                    packet("c", 0x0, _0x3482e0, 0x0);
                }
            } else {
                let _0x4afd74 = findID(hats, _0x3482e0);
                if (_0x4afd74) {
                    if (player.points >= _0x4afd74.price) {
                        packet("c", 0x1, _0x3482e0, 0x0);
                        packet("c", 0x0, _0x3482e0, 0x0);
                    } else if (player.latestSkin != _0x138d89) {
                        packet("c", 0x0, _0x138d89, 0x0);
                    }
                } else if (player.latestSkin != _0x138d89) {
                    packet("c", 0x0, _0x138d89, 0x0);
                }
            }
        } else {
            if (_0x15982f == 0x1) {
                if (player.tails[_0x3482e0]) {
                    if (player.latestTail != _0x3482e0) {
                        packet("c", 0x0, _0x3482e0, 0x1);
                    }
                } else {
                    let _0x3b2fe0 = findID(accessories, _0x3482e0);
                    if (_0x3b2fe0) {
                        if (player.points >= _0x3b2fe0.price) {
                            packet("c", 0x1, _0x3482e0, 0x1);
                            packet("c", 0x0, _0x3482e0, 0x1);
                        } else if (player.latestTail != 0x0) {
                            packet("c", 0x0, 0x0, 0x1);
                        }
                    } else if (player.latestTail != 0x0) {
                        packet("c", 0x0, 0x0, 0x1);
                    }
                }
            }
        }
    }
}

function getMoveDir() {
    let _0x804d02 = 0x0;
    let _0x301329 = 0x0;
    for (let _0x597009 in moveKeys) {
        let _0x3de736 = moveKeys[_0x597009];
        _0x804d02 += !!keys[_0x597009] * _0x3de736[0x0];
        _0x301329 += !!keys[_0x597009] * _0x3de736[0x1];
    }
    return _0x804d02 == 0x0 && _0x301329 == 0x0 ? undefined : Math.atan2(_0x301329, _0x804d02);
}
var millMoveDir = undefined;
let isMoveDir = undefined;

function sendMoveDir() {
    let _0x4a6c8a = getMoveDir();
    if (lastMoveDir == undefined || _0x4a6c8a == undefined || Math.abs(_0x4a6c8a - lastMoveDir) > 0.3) {
        if (!my.autoPush) {
            packet("9", _0x4a6c8a, 0x1);
        }
        tracker.moveDir = _0x4a6c8a;
        lastMoveDir = _0x4a6c8a;
        isMoveDir = _0x4a6c8a;
        if (_0x4a6c8a != undefined) {
            millMoveDir = _0x4a6c8a + Math.PI;
            millC.count = 0x4;
        }
    }
}

function sendChat(_0x4bb7e1) {
    packet("6", _0x4bb7e1.slice(0x0, 0x1e));
}

function isObjectBroken(_0x244513) {
    return _0x244513.health < 0x14;
}

function selectToBuild(_0x4fb9aa, _0x57cb85) {
    packet("z", _0x4fb9aa, _0x57cb85);
}

function selectWeapon(_0x14ccc9, _0x445995) {
    if (!_0x445995) {
        player.weaponCode = _0x14ccc9;
    }
    packet("z", _0x14ccc9, 0x1);
}

function tmpXY(_0x9fcc48) {
    return {
        x: _0x9fcc48.x2,
        y: _0x9fcc48.y2
    };
}

function sendAutoGather() {
    packet("K", 0x1, 0x1);
}

function sendAtck(_0xdf4d, _0xe2cc67) {
    packet("F", _0xdf4d, _0xe2cc67, 0x1);
}

function place(_0x4ad5aa, _0x100a5d, _0x4cb7a7) {
    try {
        if (_0x4ad5aa == undefined) {
            return;
        }
        let _0xd93133 = items.list[player.items[_0x4ad5aa]];
        let _0x163115 = player.scale + _0xd93133.scale + (_0xd93133.placeOffset || 0x0);
        let _0x4868b7 = player.x2 + _0x163115 * Math.cos(_0x100a5d);
        let _0x40ef8d = player.y2 + _0x163115 * Math.sin(_0x100a5d);
        if (_0x4ad5aa === 0x0 || (player.alive && inGame && player.itemCounts[_0xd93133.group.id] == undefined ? true : player.itemCounts[_0xd93133.group.id] < (config.isSandbox ? _0x4ad5aa === 0x3 || _0x4ad5aa === 0x5 ? 0x12b : 0x63 : _0xd93133.group.limit ? _0xd93133.group.limit : 0x63))) {
            selectToBuild(player.items[_0x4ad5aa]);
            sendAtck(0x1, _0x100a5d);
            selectWeapon(player.weaponCode, 0x1);
            if (_0x4cb7a7 && document.getElementById("doPlaceIndicator").checked) {
                placeVisible.push({
                    x: _0x4868b7,
                    y: _0x40ef8d,
                    name: _0xd93133.name,
                    scale: _0xd93133.scale,
                    dir: _0x100a5d
                });
                game.tickBase(() => {
                    placeVisible.shift();
                }, 0x1);
            }
        }
    } catch (_0x5023e2) {}
}

function checkPlace(_0x3f4891, _0x3a6e33) {
    try {
        if (_0x3f4891 == undefined) {
            return;
        }
        let _0x48f959 = items.list[player.items[_0x3f4891]];
        let _0x2c17e4 = player.scale + _0x48f959.scale + (_0x48f959.placeOffset || 0x0);
        let _0x55aca8 = player.x2 + _0x2c17e4 * Math.cos(_0x3a6e33);
        let _0x80b6b3 = player.y2 + _0x2c17e4 * Math.sin(_0x3a6e33);
        if (objectManager.checkItemLocation(_0x55aca8, _0x80b6b3, _0x48f959.scale, 0.6, _0x48f959.id, false, player)) {
            place(_0x3f4891, _0x3a6e33, 0x1);
        }
    } catch (_0x37cf1f) {}
}
let objectPredict = [];

function soldierMult() {
    return player.latestSkin == 0x6 ? 0.75 : 0x1;
}

function healthBased() {
    if (player.health == 0x64) {
        return 0x0;
    }
    if (player.skinIndex != 0x2d && player.skinIndex != 0x38) {
        return Math.ceil((0x64 - player.health) / items.list[player.items[0x0]].healing);
    }
    return 0x0;
}

function getAttacker(_0x41d2b1) {
    let _0x236753 = enemy.filter(_0x338e99 => {
        let _0x4dc3df = {
            three: _0x338e99.attacked
        };
        return _0x4dc3df.three;
    });
    return _0x236753;
}

function healer(_0x4c4805) {
    if ([0x0, undefined].includes(_0x4c4805)) {
        for (let _0x2a13c6 = 0x0; _0x2a13c6 < healthBased(); _0x2a13c6++) {
            place(0x0, getAttackDir());
        }
    } else {
        for (let _0x1fa378 = 0x0; _0x1fa378 < healthBased() + _0x4c4805; _0x1fa378++) {
            place(0x0, getAttackDir());
        }
    }
}

function healer1() {
    if (player.health == 0x64) {
        return 0x0;
    }
    if (player.skinIndex != 0x2d && player.skinIndex != 0x38) {
        return Math.ceil((0x64 - player.health) / items.list[player.items[0x0]].healing);
    }
    return 0x0;
}
let isHealing = false;

function bluddyHeal() {
    if (!isHealing && player.health < 0x64) {
        isHealing = true;
        if (player.health < 0x46) {
            place(0x0, getAttackDir());
            healer();
            isHealing = false;
        } else {
            const _0x1e6b14 = Math.ceil((0x64 - player.health) / items.list[player.items[0x0]].healing);
            let _0x33e249 = 0x0;

            function _0x5d83d3() {
                if (_0x33e249 < _0x1e6b14) {
                    setTimeout(() => {
                        place(0x0, getAttackDir());
                        _0x33e249++;
                        _0x5d83d3();
                    }, 0xf);
                } else {
                    isHealing = false;
                }
            }
            _0x5d83d3();
        }
    }
}

function antiSyncHealing(_0x36d5ac) {
    my.antiSync = true;
    let _0x30a93b = setInterval(() => {
        if (player.shameCount < 0x5) {
            place(0x0, getAttackDir());
        }
    }, 0x32);
    setTimeout(() => {
        clearInterval(_0x30a93b);
        setTimeout(() => {
            my.antiSync = false;
        }, game.tickRate);
    }, game.tickRate);
}
let turretEmp = 0x0;

function biomeGear() {
    if (player.y2 >= config.mapScale / 0x2 - config.riverWidth / 0x2 && player.y2 <= config.mapScale / 0x2 + config.riverWidth / 0x2) {
        buyEquip(0x1f, 0x0);
    } else if (player.moveDir == undefined) {
        buyEquip(0x16, 0x0);
    } else if (player.y2 <= config.snowBiomeTop) {
        buyEquip(0xf, 0x0);
    } else {
        buyEquip(0xc, 0x0);
    }
}

function woah(_0x3e1711) {
    buyEquip(_0x3e1711 && player.moveDir == undefined ? 0x0 : 0xb, 0x1);
}

function calculatePossibleTrapPositions(_0x476b8c, _0x49a349, _0x25ce33) {
    const _0x7ee774 = [];
    for (let _0x5d682d = 0x0; _0x5d682d < 0x8; _0x5d682d++) {
        const _0x5566f0 = 0x2 * Math.PI * _0x5d682d / 0x8;
        const _0x17067b = _0x476b8c + _0x25ce33 * Math.cos(_0x5566f0);
        const _0x27c286 = _0x49a349 + _0x25ce33 * Math.sin(_0x5566f0);
        const _0x2dfac9 = [_0x17067b, _0x27c286];
        if (!_0x7ee774.some(_0xaba036 => isPositionTooClose(_0x2dfac9, _0xaba036))) {
            _0x7ee774.push(_0x2dfac9);
        }
    }
    return _0x7ee774;
}

function renderCircle(_0x56ec56, _0x2b24c5, _0x5202cb, _0x56dd70, _0x5e95c0, _0x1b2a0d) {
    _0x56dd70 = _0x56dd70 || mainContext;
    _0x56dd70.beginPath();
    _0x56dd70.arc(_0x56ec56, _0x2b24c5, _0x5202cb, 0x0, 0x2 * Math.PI);
    if (!_0x1b2a0d) {
        _0x56dd70.fill();
    }
    if (!_0x5e95c0) {
        _0x56dd70.stroke();
    }
}

function isPositionTooClose(_0x3a8745, _0x164269, _0x3aa238 = 0x32) {
    const _0x20b059 = Math.hypot(_0x3a8745[0x0] - _0x164269[0x0], _0x3a8745[0x1] - _0x164269[0x1]);
    return _0x20b059 < _0x3aa238;
}

function isPositionValid(_0x3b0ef8) {
    const _0xb9db48 = player.x2;
    const _0x4d2878 = player.y2;
    const _0x4e7913 = Math.hypot(_0x3b0ef8[0x0] - _0xb9db48, _0x3b0ef8[0x1] - _0x4d2878);
    return _0x4e7913 > 0x23;
}

function findAllianceBySid(_0x2f3912) {
    return player.team ? alliancePlayers.find(_0x4fe880 => _0x4fe880 === _0x2f3912) : null;
}

function angleDist(_0x506679, _0x440f70) {
    let _0x2ca5b5 = Math.abs(_0x506679 - _0x440f70) % (0x2 * Math.PI);
    return _0x2ca5b5 > Math.PI ? 0x2 * Math.PI - _0x2ca5b5 : _0x2ca5b5;
}

function secondaryCheck(_0x227daa, _0x566f06) {
    try {
        var _0x4dcc37 = items.list[_0x227daa];
        var _0x57e5f7 = player.scale + _0x4dcc37.scale + (_0x4dcc37.placeOffset || 0x0);
        var _0x30b6ef = player.x2 + _0x57e5f7 * Math.cos(_0x566f06);
        var _0x53bd52 = player.y2 + _0x57e5f7 * Math.sin(_0x566f06);
        if (objectManager.checkItemLocation(_0x30b6ef, _0x53bd52, _0x4dcc37.scale, 0.6, _0x4dcc37.id, false, player)) {
            if (player.itemCounts[_0x4dcc37.group.id] == undefined ? true : player.itemCounts[_0x4dcc37.group.id] < 0x63) {
                return true;
            }
        }
    } catch (_0xf0daaa) {}
}
let advHeal = [];
class Traps {
    constructor(_0x4d83eb, _0x5ed0a1) {
        this.dist = 0x0;
        this.aim = 0x0;
        this.inTrap = false;
        this.replaced = false;
        this.antiTrapped = false;
        this.info = {};
        this.notFast = function() {
            return player.weapons[0x1] == 0xa && (this.info.health > _0x5ed0a1.weapons[player.weapons[0x0]].dmg || player.weapons[0x0] == 0x5);
        };
        this.testCanPlace = function(_0x1e3423, _0x957da8 = -(Math.PI / 0x2), _0x461e30 = Math.PI / 0x2, _0x3a3c15 = Math.PI / 0x12, _0x3dc59a, _0xfa6bbc, _0x3e7d69) {
            try {
                let _0x18c219 = _0x5ed0a1.list[player.items[_0x1e3423]];
                let _0x139b24 = player.scale + _0x18c219.scale + (_0x18c219.placeOffset || 0x0);
                let _0x2728ed = {
                    attempts: 0x0,
                    placed: 0x0
                };
                let _0x56de01 = [];
                gameObjects.forEach(_0x197d38 => {
                    _0x56de01.push({
                        x: _0x197d38.x,
                        y: _0x197d38.y,
                        active: _0x197d38.active,
                        blocker: _0x197d38.blocker,
                        scale: _0x197d38.scale,
                        isItem: _0x197d38.isItem,
                        type: _0x197d38.type,
                        colDiv: _0x197d38.colDiv,
                        getScale: function(_0x506987, _0x3335f3) {
                            _0x506987 = _0x506987 || 0x1;
                            return this.scale * (this.isItem || this.type == 0x2 || this.type == 0x3 || this.type == 0x4 ? 0x1 : 0.6 * _0x506987) * (_0x3335f3 ? 0x1 : this.colDiv);
                        }
                    });
                });
                let _0x50a861;
                let _0x94873e;
                for (let _0x560733 = _0x957da8; _0x560733 < _0x461e30; _0x560733 += _0x3a3c15) {
                    _0x2728ed.attempts++;
                    let _0x1e5682 = _0x3dc59a + _0x560733;
                    let _0x2ff7a6 = player.x2 + _0x139b24 * Math.cos(_0x1e5682);
                    let _0x20689e = player.y2 + _0x139b24 * Math.sin(_0x1e5682);
                    let _0x564cad = _0x56de01.find(_0x465f57 => _0x465f57.active && _0x4d83eb.getDistance(_0x2ff7a6, _0x20689e, _0x465f57.x, _0x465f57.y) < _0x18c219.scale + (_0x465f57.blocker ? _0x465f57.blocker : _0x465f57.getScale(0.6, _0x465f57.isItem)));
                    if (_0x564cad) {
                        _0x50a861 = _0x2ff7a6;
                        _0x94873e = _0x20689e;
                        continue;
                    }
                    if (_0x18c219.id != 0x12 && _0x20689e >= config.mapScale / 0x2 - config.riverWidth / 0x2 && _0x20689e <= config.mapScale / 0x2 + config.riverWidth / 0x2) {
                        continue;
                    }
                    if (!_0xfa6bbc && _0x3e7d69) {
                        if (_0x3e7d69.inTrap) {
                            if (_0x4d83eb.getAngleDist(near.aim2 + Math.PI, _0x1e5682 + Math.PI) <= Math.PI * 1.3) {
                                place(0x2, _0x1e5682, 0x1);
                            } else if (player.items[0x4] == 0xf) {
                                place(0x2, _0x1e5682, 0x1);
                            }
                        } else if (_0x4d83eb.getAngleDist(near.aim2, _0x1e5682) <= config.gatherAngle / 2.6) {
                            place(0x2, _0x1e5682, 0x1);
                        } else if (player.items[0x4] == 0xf) {
                            place(0x2, _0x1e5682, 0x1);
                        }
                    } else {
                        place(_0x1e3423, _0x1e5682, 0x1);
                    }
                    _0x56de01.push({
                        x: _0x2ff7a6,
                        y: _0x20689e,
                        active: true,
                        blocker: _0x18c219.blocker,
                        scale: _0x18c219.scale,
                        isItem: true,
                        type: null,
                        colDiv: _0x18c219.colDiv,
                        getScale: function() {
                            return this.scale;
                        }
                    });
                    if (_0x4d83eb.getAngleDist(near.aim2, _0x1e5682) <= 0x1) {
                        _0x2728ed.placed++;
                    }
                }
                if (_0x2728ed.placed > 0x0 && _0xfa6bbc && _0x18c219.dmg && near.dist2 <= _0x5ed0a1.weapons[player.weapons[0x0]].range + player.scale * 1.9) {
                    instaC.canSpikeTick = true;
                }
                if (_0x2728ed.placed === 0x0 && _0x50a861 !== undefined && _0x94873e !== undefined) {
                    mainContext.fillStyle = "#a5974c";
                    renderCircle(mainContext, 0x3, _0x18c219.scale * 1.1, _0x18c219.scale * 1.1, _0x50a861, _0x94873e);
                    mainContext.fill();
                    mainContext.stroke();
                    mainContext.fillStyle = "#525252";
                    renderCircle(mainContext, 0x3, _0x18c219.scale * 0.65, _0x18c219.scale * 0.65, _0x50a861, _0x94873e);
                    mainContext.fill();
                }
            } catch (_0x22042b) {}
        };
        this.spikeGay = function() {
            if (this.inTrap && near.dist2 <= _0x5ed0a1.weapons[near.primaryIndex || 0x5].range + near.scale * 1.2 && [0x3, 0x4, 0x5].includes(near.primaryIndex) && this.info.health <= _0x5ed0a1.weapons[player.weaponIndex].dmg * config.weaponVariants[player[(player.weaponIndex < 0x9 ? "prima" : "seconda") + "ryVariant"]].val * (_0x5ed0a1.weapons[player.weaponIndex].sDmg || 0x1) * 3.3) {
                return true;
            }
            for (let _0x37f8f1 of gameObjects) {
                if (_0x37f8f1.dmg && _0x37f8f1.active && !_0x37f8f1.isTeamObject(player)) {
                    let _0x3424cd = [_0x4d83eb.getDist(_0x37f8f1, near, 0x0, 0x2), _0x4d83eb.getAngle(_0x37f8f1, near, 0x0, 0x2)];
                    let _0x37e081 = [_0x4d83eb.getDist(near, player, 0x2, 0x2), _0x4d83eb.getAngle(near, player, 0x2, 0x2)];
                    if (angleDist(_0x3424cd[0x1], _0x37e081[0x1]) < Math.PI / 2.6 && _0x37e081[0x0] < _0x5ed0a1.weapons[near.primaryIndex || 0x5].range + 0x50 && _0x3424cd[0x0] < 0x64) {
                        return true;
                    }
                }
            }
            return false;
        };
        this.checkSpikeTick = function() {
            try {
                if (![0x3, 0x4, 0x5].includes(near.primaryIndex)) {
                    return false;
                }
                if (my.autoPush ? false : near.primaryIndex == undefined ? true : near.reloads[near.primaryIndex] > game.tickRate) {
                    return false;
                }
                let _0x1c9526 = near.primaryIndex || 0x5;
                let _0x1b7d82 = _0x5ed0a1.weapons[_0x1c9526].range + near.scale * 0x2;
                if (near.dist2 > _0x1b7d82) {
                    return false;
                }
                let _0x1690e2 = _0x5ed0a1.list[0x9];
                let _0x3f6729 = near.scale + _0x1690e2.scale + (_0x1690e2.placeOffset || 0x0);
                let _0x433b8c = {
                    attempts: 0x0,
                    block: "unblocked"
                };
                for (let _0xaaee4 = -0x1; _0xaaee4 <= 0x1; _0xaaee4 += 0.1) {
                    _0x433b8c.attempts++;
                    let _0x3aaaf7 = _0x4d83eb.getDirect(player, near, 0x2, 0x2) + _0xaaee4;
                    let _0x334b58 = near.x2 + _0x3f6729 * Math.cos(_0x3aaaf7);
                    let _0x13feb4 = near.y2 + _0x3f6729 * Math.sin(_0x3aaaf7);
                    let _0x4ad128 = gameObjects.find(_0x1b8ba9 => _0x1b8ba9.active && _0x4d83eb.getDistance(_0x334b58, _0x13feb4, _0x1b8ba9.x, _0x1b8ba9.y) < _0x1690e2.scale + (_0x1b8ba9.blocker ? _0x1b8ba9.blocker : _0x1b8ba9.getScale(0.6, _0x1b8ba9.isItem)));
                    if (_0x4ad128) {
                        continue;
                    }
                    if (_0x13feb4 >= config.mapScale / 0x2 - config.riverWidth / 0x2 && _0x13feb4 <= config.mapScale / 0x2 + config.riverWidth / 0x2) {
                        continue;
                    }
                    my.anti0Tick = 0x1;
                    player.soldierAnti = true;
                    showNotification("You: Spike Sync Blocked");
                    return true;
                }
                return false;
            } catch (_0x5513fe) {
                console.error("Error in checkSpikeTick:", _0x5513fe);
                return false;
            }
        };
        this.protect = function(_0x897525) {
            if (near.dist2 < 0x320 || enemy.length) {
                this.testCanPlace(near.dist2 < 0x78 ? 0x2 : 0x4, -(Math.PI / 0x2), Math.PI / 0x2, Math.PI / 0x12, _0x897525 + Math.PI);
                this.antiTrapped = true;
            } else {
                this.testCanPlace(0x2, -(Math.PI / 0x2), Math.PI / 0x2, Math.PI / 0x12, _0x897525 + Math.PI);
            }
        };
        this.autoPlace = function() {
            if (enemy.length) {
                if (gameObjects.length) {
                    let _0x12f17c = {
                        inTrap: false
                    };
                    let _0x1ce964 = gameObjects.filter(_0x5ae0d4 => _0x5ae0d4.trap && _0x5ae0d4.active && _0x5ae0d4.isTeamObject(player) && _0x4d83eb.getDist(_0x5ae0d4, near, 0x0, 0x2) <= near.scale + _0x5ae0d4.getScale() + 0x5).sort(function(_0x3f11ca, _0x1f6ebb) {
                        return _0x4d83eb.getDist(_0x3f11ca, near, 0x0, 0x2) - _0x4d83eb.getDist(_0x1f6ebb, near, 0x0, 0x2);
                    })[0x0];
                    if (_0x1ce964) {
                        _0x12f17c.inTrap = true;
                    } else {
                        _0x12f17c.inTrap = false;
                    }
                    if (near.dist2 <= 0x1c2) {
                        let _0x52c2a3 = this.findBestPlacementAngle(near.aim2, near, gameObjects);
                        if (near.dist2 <= 0xaa) {
                            this.testCanPlace(0x2, 0x0, Math.PI * 0x2, Math.PI / 0x18, near.aim2, 0x0, {
                                inTrap: _0x12f17c.inTrap
                            });
                            this.testCanPlace(0x2, 0x0, _0x52c2a3, Math.PI / 0x18, near.aim2);
                        } else if (player.items[0x4] == 0xf) {
                            this.testCanPlace(0x4, 0x0, Math.PI * 0x2, Math.PI / 0x18, near.aim2);
                        }
                    }
                } else {
                    if (near.dist2 <= 0x1c2) {
                        let _0x654f10 = this.findBestPlacementAngle(near.aim2, near, gameObjects);
                        if (player.items[0x4] == 0xf) {
                            this.testCanPlace(0x4, 0x0, _0x654f10, Math.PI / 0x18, near.aim2);
                        }
                    }
                }
            }
        };
        this.findBestPlacementAngle = function(_0x2cc5df, _0x4c466b, _0x19ecf6) {
            let _0x1d4ba3 = _0x2cc5df;
            let _0xacd241 = 0x0;
            for (let _0x2feff2 = 0x0; _0x2feff2 < 0x2 * Math.PI; _0x2feff2 += Math.PI / 0x18) {
                let _0x5da152 = this.calculatePlacementDistance(_0x2feff2, _0x4c466b, _0x19ecf6);
                if (_0x5da152 > _0xacd241) {
                    _0xacd241 = _0x5da152;
                    _0x1d4ba3 = _0x2feff2;
                }
            }
            return _0x1d4ba3;
        };
        this.calculatePlacementDistance = function(_0x5d0f4f, _0x4fe9e1, _0x4ff946) {
            let _0x54816a = _0x4fe9e1.x + Math.cos(_0x5d0f4f) * 0x64;
            let _0x55f5e8 = _0x4fe9e1.y + Math.sin(_0x5d0f4f) * 0x64;
            let _0x1e6c5b = Math.sqrt((_0x54816a - _0x4fe9e1.x) ** 0x2 + (_0x55f5e8 - _0x4fe9e1.y) ** 0x2);
            if (_0x54816a < 0x0 || _0x54816a > game.width || _0x55f5e8 < 0x0 || _0x55f5e8 > game.height) {
                return -0x1;
            }
            for (let _0x118bae of _0x4ff946) {
                let _0x2d49c9 = Math.sqrt((_0x54816a - _0x118bae.x) ** 0x2 + (_0x55f5e8 - _0x118bae.y) ** 0x2);
                if (_0x2d49c9 < _0x118bae.getScale() + 0x5) {
                    return -0x1;
                }
            }
            return _0x1e6c5b;
        };
    }
}
class Instakill {
    constructor() {
        this.wait = false;
        this.can = false;
        this.isTrue = false;
        this.nobull = false;
        this.ticking = false;
        this.canSpikeTick = false;
        this.startTick = false;
        this.readyTick = false;
        this.canCounter = false;
        this.revTick = false;
        this.syncHit = false;
        this.changeType = function(_0x5a41da) {
            this.wait = false;
            this.isTrue = true;
            my.autoAim = true;
            let _0x1f39a4 = [_0x5a41da];
            let _0x5bc0ba = near.backupNobull;
            near.backupNobull = false;
            game.tickBase(() => {
                _0x1f39a4.push(player.skinIndex);
                game.tickBase(() => {
                    if (near.skinIndex == 0x16) {
                        near.backupNobull = true;
                    }
                    _0x1f39a4.push(player.skinIndex);
                }, 0x1);
            }, 0x1);
            if (_0x5a41da == "rev") {
                selectWeapon(player.weapons[0x1]);
                buyEquip(0x35, 0x0);
                buyEquip(0x15, 0x1);
                sendAutoGather();
                game.tickBase(() => {
                    selectWeapon(player.weapons[0x0]);
                    buyEquip(0x7, 0x0);
                    buyEquip(0x15, 0x1);
                    game.tickBase(() => {
                        sendAutoGather();
                        this.isTrue = false;
                        my.autoAim = false;
                    }, 0x1);
                }, 0x1);
            } else {
                if (_0x5a41da == "tick") {
                    selectWeapon(player.weapons[0x0]);
                    buyEquip(0x35, 0x0);
                    buyEquip(0x15, 0x1);
                    sendAutoGather();
                    game.tickBase(() => {
                        selectWeapon(player.weapons[0x0]);
                        buyEquip(0x7, 0x0);
                        buyEquip(0x15, 0x1);
                        game.tickBase(() => {
                            sendAutoGather();
                            this.isTrue = false;
                            my.autoAim = false;
                        }, 0x1);
                    }, 0x1);
                } else {
                    if (_0x5a41da == "nobull") {
                        selectWeapon(player.weapons[0x0]);
                        if (_0x5bc0ba) {
                            buyEquip(0x7, 0x0);
                        } else {
                            buyEquip(0x6, 0x0);
                        }
                        buyEquip(0x15, 0x1);
                        sendAutoGather();
                        game.tickBase(() => {
                            if (near.skinIndex == 0x16) {
                                near.backupNobull = true;
                                buyEquip(0x6, 0x0);
                            } else {
                                buyEquip(0x35, 0x0);
                            }
                            selectWeapon(player.weapons[0x1]);
                            buyEquip(0x15, 0x1);
                            game.tickBase(() => {
                                sendAutoGather();
                                this.isTrue = false;
                                my.autoAim = false;
                            }, 0x1);
                        }, 0x1);
                    } else if (_0x5a41da == "normal") {
                        selectWeapon(player.weapons[0x0]);
                        buyEquip(0x7, 0x0);
                        buyEquip(0x15, 0x1);
                        sendAutoGather();
                        game.tickBase(() => {
                            selectWeapon(player.weapons[0x1]);
                            buyEquip(player.reloads[0x35] == 0x0 ? 0x35 : 0x6, 0x0);
                            buyEquip(0x15, 0x1);
                            game.tickBase(() => {
                                sendAutoGather();
                                this.isTrue = false;
                                my.autoAim = false;
                            }, 0x1);
                        }, 0x1);
                    } else {
                        setTimeout(() => {
                            this.isTrue = false;
                            my.autoAim = false;
                        }, 0x32);
                    }
                }
            }
        };
        this.spikeTickType = function() {
            this.isTrue = true;
            my.autoAim = true;
            selectWeapon(player.weapons[0x0]);
            buyEquip(0x7, 0x0);
            buyEquip(0x15, 0x1);
            sendAutoGather();
            game.tickBase(() => {
                selectWeapon(player.weapons[0x0]);
                buyEquip(0x35, 0x0);
                buyEquip(0x15, 0x1);
                game.tickBase(() => {
                    sendAutoGather();
                    this.isTrue = false;
                    my.autoAim = false;
                }, 0x1);
            }, 0x1);
        };
        this.counterType = function() {
            this.isTrue = true;
            my.autoAim = true;
            selectWeapon(player.weapons[0x0]);
            buyEquip(0x7, 0x0);
            buyEquip(0x15, 0x1);
            sendAutoGather();
            game.tickBase(() => {
                selectWeapon(player.weapons[0x0]);
                buyEquip(0x35, 0x0);
                buyEquip(0x15, 0x1);
                game.tickBase(() => {
                    sendAutoGather();
                    this.isTrue = false;
                    my.autoAim = false;
                }, 0x1);
            }, 0x1);
        };
        this.rangeType = function(_0x2faad0) {
            this.isTrue = true;
            my.autoAim = true;
            if (_0x2faad0 == "ageInsta") {
                my.ageInsta = false;
                if (player.items[0x5] == 0x12) {
                    place(0x5, near.aim2);
                }
                packet("I", undefined, 0x1);
                buyEquip(0x16, 0x0);
                buyEquip(0x15, 0x1);
                game.tickBase(() => {
                    selectWeapon(player.weapons[0x1]);
                    buyEquip(0x35, 0x0);
                    buyEquip(0x15, 0x1);
                    sendAutoGather();
                    game.tickBase(() => {
                        sendUpgrade(0xc);
                        selectWeapon(player.weapons[0x1]);
                        buyEquip(0x35, 0x0);
                        buyEquip(0x15, 0x1);
                        game.tickBase(() => {
                            sendUpgrade(0xf);
                            selectWeapon(player.weapons[0x1]);
                            buyEquip(0x35, 0x0);
                            buyEquip(0x15, 0x1);
                            game.tickBase(() => {
                                sendAutoGather();
                                this.isTrue = false;
                                my.autoAim = false;
                            }, 0x1);
                        }, 0x1);
                    }, 0x1);
                }, 0x1);
            } else {
                selectWeapon(player.weapons[0x1]);
                if (player.reloads[0x35] == 0x0 && near.dist2 <= 0x2bc && near.skinIndex != 0x16) {
                    buyEquip(0x35, 0x0);
                } else {
                    buyEquip(0x14, 0x0);
                }
                buyEquip(0xb, 0x1);
                sendAutoGather();
                game.tickBase(() => {
                    sendAutoGather();
                    this.isTrue = false;
                    my.autoAim = false;
                }, 0x1);
            }
        };
        this.oneTickType = function() {
            this.isTrue = true;
            my.autoAim = true;
            selectWeapon(player.weapons[0x1]);
            buyEquip(0x35, 0x0);
            buyEquip(0xb, 0x1);
            packet("I", near.aim2, 0x1);
            if (player.weapons[0x1] == 0xf) {
                my.revAim = true;
                sendAutoGather();
            }
            game.tickBase(() => {
                my.revAim = false;
                selectWeapon(player.weapons[0x0]);
                buyEquip(0x7, 0x0);
                buyEquip(0x15, 0x1);
                packet("9", near.aim2, 0x1);
                if (player.weapons[0x1] != 0xf) {
                    sendAutoGather();
                }
                game.tickBase(() => {
                    sendAutoGather();
                    this.isTrue = false;
                    my.autoAim = false;
                    packet("9", undefined, 0x1);
                }, 0x1);
            }, 0x1);
        };
        this.threeOneTickType = function() {
            this.isTrue = true;
            my.autoAim = true;
            selectWeapon(player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0]);
            biomeGear();
            buyEquip(0xb, 0x1);
            packet("9", near.aim2, 0x1);
            game.tickBase(() => {
                selectWeapon(player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0]);
                buyEquip(0x35, 0x0);
                buyEquip(0xb, 0x1);
                packet("9", near.aim2, 0x1);
                game.tickBase(() => {
                    selectWeapon(player.weapons[0x0]);
                    buyEquip(0x7, 0x0);
                    buyEquip(0x13, 0x1);
                    sendAutoGather();
                    packet("9", near.aim2, 0x1);
                    game.tickBase(() => {
                        sendAutoGather();
                        this.isTrue = false;
                        my.autoAim = false;
                        packet("9", undefined, 0x1);
                    }, 0x1);
                }, 0x1);
            }, 0x1);
        };
        this.kmTickType = function() {
            this.isTrue = true;
            my.autoAim = true;
            my.revAim = true;
            selectWeapon(player.weapons[0x1]);
            buyEquip(0x35, 0x0);
            buyEquip(0xb, 0x1);
            sendAutoGather();
            packet("9", near.aim2, 0x1);
            game.tickBase(() => {
                my.revAim = false;
                selectWeapon(player.weapons[0x0]);
                buyEquip(0x7, 0x0);
                buyEquip(0x13, 0x1);
                packet("9", near.aim2, 0x1);
                game.tickBase(() => {
                    sendAutoGather();
                    this.isTrue = false;
                    my.autoAim = false;
                    packet("9", undefined, 0x1);
                }, 0x1);
            }, 0x1);
        };
        this.boostTickType = function() {
            this.isTrue = true;
            my.autoAim = true;
            biomeGear();
            buyEquip(0xb, 0x1);
            packet("9", near.aim2, 0x1);
            game.tickBase(() => {
                if (player.weapons[0x1] == 0xf) {
                    my.revAim = true;
                }
                selectWeapon(player.weapons[[0x9, 0xc, 0xd, 0xf].includes(player.weapons[0x1]) ? 0x1 : 0x0]);
                buyEquip(0x35, 0x0);
                buyEquip(0xb, 0x1);
                if ([0x9, 0xc, 0xd, 0xf].includes(player.weapons[0x1])) {
                    sendAutoGather();
                }
                packet("9", near.aim2, 0x1);
                place(0x4, near.aim2);
                game.tickBase(() => {
                    my.revAim = false;
                    selectWeapon(player.weapons[0x0]);
                    buyEquip(0x7, 0x0);
                    buyEquip(0x13, 0x1);
                    if (![0x9, 0xc, 0xd, 0xf].includes(player.weapons[0x1])) {
                        sendAutoGather();
                    }
                    packet("9", near.aim2, 0x1);
                    game.tickBase(() => {
                        sendAutoGather();
                        this.isTrue = false;
                        my.autoAim = false;
                        packet("9", undefined, 0x1);
                    }, 0x1);
                }, 0x1);
            }, 0x1);
        };
        this.gotoGoal = function(_0x21f755, _0x4e6384) {
            let _0x2aa29e = {
                a: _0x21f755 - _0x4e6384,
                b: _0x21f755 + _0x4e6384,
                c: _0x21f755 - 0x1 * config.playerScale,
                d: _0x21f755 + 0x1 * config.playerScale,
                e: _0x21f755 - 0x2 * config.playerScale,
                f: _0x21f755 + 0x2 * config.playerScale,
                g: _0x21f755 - 0x4 * config.playerScale,
                h: _0x21f755 + 0x4 * config.playerScale
            };
            let _0x21715d = function(_0xb0108b, _0x2d60ca) {
                if (player.y2 >= config.mapScale / 0x2 - config.riverWidth / 0x2 && player.y2 <= config.mapScale / 0x2 + config.riverWidth / 0x2 && _0x2d60ca == 0x0) {
                    buyEquip(0x1f, 0x0);
                } else {
                    buyEquip(_0xb0108b, _0x2d60ca);
                }
            };
            if (enemy.length) {
                let _0x151d95 = near.dist2;
                this.ticking = true;
                if (_0x151d95 >= _0x2aa29e.a && _0x151d95 <= _0x2aa29e.b) {
                    _0x21715d(0x16, 0x0);
                    _0x21715d(0xb, 0x1);
                    if (player.weaponIndex != player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0] || player.buildIndex > -0x1) {
                        selectWeapon(player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0]);
                    }
                    return {
                        dir: undefined,
                        action: 0x1
                    };
                } else {
                    if (_0x151d95 < _0x2aa29e.a) {
                        if (_0x151d95 >= _0x2aa29e.g) {
                            if (_0x151d95 >= _0x2aa29e.e) {
                                if (_0x151d95 >= _0x2aa29e.c) {
                                    _0x21715d(0x28, 0x0);
                                    _0x21715d(0xa, 0x1);
                                    if (player.weaponIndex != player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0] || player.buildIndex > -0x1) {
                                        selectWeapon(player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0]);
                                    }
                                } else {
                                    _0x21715d(0x16, 0x0);
                                    _0x21715d(0x13, 0x1);
                                    if (player.weaponIndex != player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0] || player.buildIndex > -0x1) {
                                        selectWeapon(player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0]);
                                    }
                                }
                            } else {
                                _0x21715d(0x6, 0x0);
                                _0x21715d(0xc, 0x1);
                                if (player.weaponIndex != player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0] || player.buildIndex > -0x1) {
                                    selectWeapon(player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0]);
                                }
                            }
                        } else {
                            biomeGear();
                            _0x21715d(0xb, 0x1);
                            if (player.weaponIndex != player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0] || player.buildIndex > -0x1) {
                                selectWeapon(player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0]);
                            }
                        }
                        return {
                            dir: near.aim2 + Math.PI,
                            action: 0x0
                        };
                    } else {
                        if (_0x151d95 > _0x2aa29e.b) {
                            if (_0x151d95 <= _0x2aa29e.h) {
                                if (_0x151d95 <= _0x2aa29e.f) {
                                    if (_0x151d95 <= _0x2aa29e.d) {
                                        _0x21715d(0x28, 0x0);
                                        _0x21715d(0x9, 0x1);
                                        if (player.weaponIndex != player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0] || player.buildIndex > -0x1) {
                                            selectWeapon(player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0]);
                                        }
                                    } else {
                                        _0x21715d(0x16, 0x0);
                                        _0x21715d(0x13, 0x1);
                                        if (player.weaponIndex != player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0] || player.buildIndex > -0x1) {
                                            selectWeapon(player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0]);
                                        }
                                    }
                                } else {
                                    _0x21715d(0x6, 0x0);
                                    _0x21715d(0xc, 0x1);
                                    if (player.weaponIndex != player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0] || player.buildIndex > -0x1) {
                                        selectWeapon(player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0]);
                                    }
                                }
                            } else {
                                biomeGear();
                                _0x21715d(0xb, 0x1);
                                if (player.weaponIndex != player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0] || player.buildIndex > -0x1) {
                                    selectWeapon(player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0]);
                                }
                            }
                            return {
                                dir: near.aim2,
                                action: 0x0
                            };
                        }
                    }
                    return {
                        dir: undefined,
                        action: 0x0
                    };
                }
            } else {
                this.ticking = false;
                return {
                    dir: undefined,
                    action: 0x0
                };
            }
        };
        this.bowMovement = function() {
            let _0x31caba = this.gotoGoal(0x2ad, 0x3);
            if (_0x31caba.action) {
                if (player.reloads[0x35] == 0x0 && !this.isTrue) {
                    this.rangeType("ageInsta");
                } else {
                    packet("9", _0x31caba.dir, 0x1);
                }
            } else {
                packet("9", _0x31caba.dir, 0x1);
            }
        };
        this.tickMovement = function() {
            let _0x5039b1 = this.gotoGoal([0xa, 0xe].includes(player.weapons[0x1]) && player.y2 > config.snowBiomeTop ? 0xf0 : player.weapons[0x1] == 0xf ? 0xfa : player.y2 <= config.snowBiomeTop ? [0xa, 0xe].includes(player.weapons[0x1]) ? 0x10e : 0x109 : 0x113, 0x3);
            if (_0x5039b1.action) {
                if (![0x6, 0x16].includes(near.skinIndex) && player.reloads[0x35] == 0x0 && !this.isTrue) {
                    if ([0xa, 0xe].includes(player.weapons[0x1]) && player.y2 > config.snowBiomeTop || player.weapons[0x1] == 0xf) {
                        this.oneTickType();
                    } else {
                        this.threeOneTickType();
                    }
                } else {
                    packet("9", _0x5039b1.dir, 0x1);
                }
            } else {
                packet("9", _0x5039b1.dir, 0x1);
            }
        };
        this.kmTickMovement = function() {
            let _0x4a8221 = this.gotoGoal(0xf0, 0x3);
            if (_0x4a8221.action) {
                if (near.skinIndex != 0x16 && player.reloads[0x35] == 0x0 && !this.isTrue && (game.tick - near.poisonTick) % config.serverUpdateRate == 0x8) {
                    this.kmTickType();
                } else {
                    packet("9", _0x4a8221.dir, 0x1);
                }
            } else {
                packet("9", _0x4a8221.dir, 0x1);
            }
        };
        this.boostTickMovement = function() {
            let _0x192b10 = player.weapons[0x1] == 0x9 ? 0x16d : player.weapons[0x1] == 0xc ? 0x17c : player.weapons[0x1] == 0xd ? 0x186 : player.weapons[0x1] == 0xf ? 0x16d : 0x172;
            let _0x53cb13 = player.weapons[0x1] == 0x9 ? 0x2 : player.weapons[0x1] == 0xc ? 1.5 : player.weapons[0x1] == 0xd ? 1.5 : player.weapons[0x1] == 0xf ? 0x2 : 0x3;
            let _0x399f03 = this.gotoGoal(_0x192b10, _0x53cb13);
            if (_0x399f03.action) {
                if (player.reloads[0x35] == 0x0 && !this.isTrue) {
                    this.boostTickType();
                } else {
                    packet("9", _0x399f03.dir, 0x1);
                }
            } else {
                packet("9", _0x399f03.dir, 0x1);
            }
        };
        this.perfCheck = function(_0x3ac7a8, _0x3b99bf) {
            if (_0x3b99bf.weaponIndex == 0xb && UTILS.getAngleDist(_0x3b99bf.aim2 + Math.PI, _0x3b99bf.d2) <= config.shieldAngle) {
                return false;
            }
            if (![0x9, 0xc, 0xd, 0xf].includes(player.weapons[0x1])) {
                return true;
            }
            let _0x107c3b = {
                x: _0x3b99bf.x2 + 0x46 * Math.cos(_0x3b99bf.aim2 + Math.PI),
                y: _0x3b99bf.y2 + 0x46 * Math.sin(_0x3b99bf.aim2 + Math.PI)
            };
            if (UTILS.lineInRect(_0x3ac7a8.x2 - _0x3ac7a8.scale, _0x3ac7a8.y2 - _0x3ac7a8.scale, _0x3ac7a8.x2 + _0x3ac7a8.scale, _0x3ac7a8.y2 + _0x3ac7a8.scale, _0x107c3b.x, _0x107c3b.y, _0x107c3b.x, _0x107c3b.y)) {
                return true;
            }
            let _0x2e8d8f = ais.filter(_0x4f530d => _0x4f530d.visible).find(_0x66b2cd => {
                if (UTILS.lineInRect(_0x66b2cd.x2 - _0x66b2cd.scale, _0x66b2cd.y2 - _0x66b2cd.scale, _0x66b2cd.x2 + _0x66b2cd.scale, _0x66b2cd.y2 + _0x66b2cd.scale, _0x107c3b.x, _0x107c3b.y, _0x107c3b.x, _0x107c3b.y)) {
                    return true;
                }
            });
            if (_0x2e8d8f) {
                return false;
            }
            _0x2e8d8f = gameObjects.filter(_0x614792 => _0x614792.active).find(_0x1e0e85 => {
                let _0x360c2e = _0x1e0e85.getScale();
                if (!_0x1e0e85.ignoreCollision && UTILS.lineInRect(_0x1e0e85.x - _0x360c2e, _0x1e0e85.y - _0x360c2e, _0x1e0e85.x + _0x360c2e, _0x1e0e85.y + _0x360c2e, _0x107c3b.x, _0x107c3b.y, _0x107c3b.x, _0x107c3b.y)) {
                    return true;
                }
            });
            if (_0x2e8d8f) {
                return false;
            }
            return true;
        };
    }
}
class Autobuy {
    constructor(_0x116b13, _0x4d9083) {
        this.hat = function() {
            _0x116b13.forEach(_0x99985b => {
                let _0x575166 = findID(hats, _0x99985b);
                if (_0x575166 && !player.skins[_0x99985b] && player.points >= _0x575166.price) {
                    packet("c", 0x1, _0x99985b, 0x0);
                }
            });
        };
        this.acc = function() {
            _0x4d9083.forEach(_0x4374e3 => {
                let _0x3c8845 = findID(accessories, _0x4374e3);
                if (_0x3c8845 && !player.tails[_0x4374e3] && player.points >= _0x3c8845.price) {
                    packet("c", 0x1, _0x4374e3, 0x1);
                }
            });
        };
    }
}
class Autoupgrade {
    constructor() {
        this.sb = function(_0x5f7496) {
            _0x5f7496(0x3);
            _0x5f7496(0x11);
            _0x5f7496(0x1f);
            _0x5f7496(0x17);
            _0x5f7496(0x9);
            _0x5f7496(0x26);
        };
        this.kh = function(_0x437c99) {
            _0x437c99(0x3);
            _0x437c99(0x11);
            _0x437c99(0x1f);
            _0x437c99(0x17);
            _0x437c99(0xa);
            _0x437c99(0x26);
            _0x437c99(0x4);
            _0x437c99(0x19);
        };
        this.pb = function(_0x3fe6a2) {
            _0x3fe6a2(0x5);
            _0x3fe6a2(0x11);
            _0x3fe6a2(0x20);
            _0x3fe6a2(0x17);
            _0x3fe6a2(0x9);
            _0x3fe6a2(0x26);
        };
        this.ph = function(_0x1b9b94) {
            _0x1b9b94(0x5);
            _0x1b9b94(0x11);
            _0x1b9b94(0x20);
            _0x1b9b94(0x17);
            _0x1b9b94(0xa);
            _0x1b9b94(0x26);
            _0x1b9b94(0x1c);
            _0x1b9b94(0x19);
        };
        this.db = function(_0x34aa25) {
            _0x34aa25(0x7);
            _0x34aa25(0x11);
            _0x34aa25(0x1f);
            _0x34aa25(0x17);
            _0x34aa25(0x9);
            _0x34aa25(0x22);
        };
        this.km = function(_0x2f51b5) {
            _0x2f51b5(0x7);
            _0x2f51b5(0x11);
            _0x2f51b5(0x1f);
            _0x2f51b5(0x17);
            _0x2f51b5(0xa);
            _0x2f51b5(0x26);
            _0x2f51b5(0x4);
            _0x2f51b5(0xf);
        };
    }
}
let tmpList = [];
let UTILS = new Utils();
let items = new Items();
let objectManager = new Objectmanager(GameObject, gameObjects, UTILS, config);
let store = new Store();
let hats = store.hats;
let accessories = store.accessories;
let projectileManager = new ProjectileManager(Projectile, projectiles, players, ais, objectManager, items, config, UTILS);
let aiManager = new AiManager(ais, AI, players, items, null, config, UTILS);
let textManager = new Textmanager();
let traps = new Traps(UTILS, items);
let instaC = new Instakill();
let autoBuy = new Autobuy([0xf, 0x1f, 0x6, 0x7, 0x16, 0xc, 0x35, 0x1a, 0x28], [0xb, 0x13, 0x15]);
let autoUpgrade = new Autoupgrade();
let lastDeath;
let minimapData;
let mapMarker = {};
let mapPings = [];
let tmpPing;
let breakTrackers = [];
let grid = [];
let pathFind = {
    active: false,
    grid: 0x28,
    scale: 0x5a0,
    x: 0x3840,
    y: 0x3840,
    chaseNear: false,
    array: [],
    lastX: this.grid / 0x2,
    lastY: this.grid / 0x2
};
let runAtNextTick = [];

function checkProjectileHolder(_0x9d49e6, _0x132155, _0x5f5207, _0x17df57, _0x130c9c, _0x3c7f79, _0x306068, _0x2f4562) {
    let _0x3baab1 = _0x3c7f79 == 0x0 ? 0x9 : _0x3c7f79 == 0x2 ? 0xc : _0x3c7f79 == 0x3 ? 0xd : _0x3c7f79 == 0x5 && 0xf;
    let _0x4ff30 = config.playerScale * 0x2;
    let _0x5c289e = {
        x: _0x3c7f79 == 0x1 ? _0x9d49e6 : _0x9d49e6 - _0x4ff30 * Math.cos(_0x5f5207),
        y: _0x3c7f79 == 0x1 ? _0x132155 : _0x132155 - _0x4ff30 * Math.sin(_0x5f5207)
    };
    let _0xe4a9e4 = players.filter(_0x608539 => _0x608539.visible && UTILS.getDist(_0x5c289e, _0x608539, 0x0, 0x2) <= _0x608539.scale).sort(function(_0x2cc3c4, _0x37f0f3) {
        return UTILS.getDist(_0x5c289e, _0x2cc3c4, 0x0, 0x2) - UTILS.getDist(_0x5c289e, _0x37f0f3, 0x0, 0x2);
    })[0x0];
    if (_0xe4a9e4) {
        if (_0x3c7f79 == 0x1) {
            _0xe4a9e4.shooting[0x35] = 0x1;
        } else {
            _0xe4a9e4.shootIndex = _0x3baab1;
            _0xe4a9e4.shooting[0x1] = 0x1;
            antiProj(_0xe4a9e4, _0x5f5207, _0x17df57, _0x130c9c, _0x3c7f79, _0x3baab1);
        }
    }
}
let projectileCount = 0x0;

function antiProj(_0x56168a, _0xa46bc4, _0xd4fe83, _0x4f62a4, _0x124c26, _0x519fd2) {
    if (!_0x56168a.isTeam(player)) {
        let _0x2cddd9 = UTILS.getDirect(player, _0x56168a, 0x2, 0x2);
        let _0x4c4b89 = UTILS.getAngleDist(_0x2cddd9, _0xa46bc4);
        if (_0x4c4b89 <= 0.2) {
            _0x56168a.bowThreat[_0x519fd2]++;
            if (_0x124c26 === 0x5) {
                projectileCount++;
            }
            setTimeout(() => {
                _0x56168a.bowThreat[_0x519fd2]--;
                if (_0x124c26 === 0x5) {
                    projectileCount--;
                }
            }, _0xd4fe83 / _0x4f62a4);
            if (_0x56168a.bowThreat[0x9] >= 0x1 && (_0x56168a.bowThreat[0xc] >= 0x1 || _0x56168a.bowThreat[0xf] >= 0x1)) {
                handleProjectileAction("Range Insta Detected", 0x4);
            } else if (projectileCount >= 0x2) {
                handleProjectileAction("Range Sync Detected", 0x4);
            }
        }
    }
}

function handleProjectileAction(_0x1a36bd, _0x37c60a) {
    place(0x1, tmpObj.aim2);
    my.anti0Tick = 0x4;
    if (!my.antiSync) {
        showNotification("You: " + _0x1a36bd);
        antiSyncHealing(_0x37c60a);
    }
}

function showItemInfo(_0xfa8805, _0x46352b, _0x5a6a8b) {
    if (player && _0xfa8805) {
        UTILS.removeAllChildren(itemInfoHolder);
        itemInfoHolder.classList.add("visible");
        UTILS.generateElement({
            id: "itemInfoName",
            text: UTILS.capitalizeFirst(_0xfa8805.name),
            parent: itemInfoHolder
        });
        UTILS.generateElement({
            id: "itemInfoDesc",
            text: _0xfa8805.desc,
            parent: itemInfoHolder
        });
        if (_0x5a6a8b) {} else {
            if (_0x46352b) {
                UTILS.generateElement({
                    class: "itemInfoReq",
                    text: !_0xfa8805.type ? "primary" : "secondary",
                    parent: itemInfoHolder
                });
            } else {
                for (let _0x3184d5 = 0x0; _0x3184d5 < _0xfa8805.req.length; _0x3184d5 += 0x2) {
                    UTILS.generateElement({
                        class: "itemInfoReq",
                        html: _0xfa8805.req[_0x3184d5] + "<span class='itemInfoReqVal'> x" + _0xfa8805.req[_0x3184d5 + 0x1] + "</span>",
                        parent: itemInfoHolder
                    });
                }
                if (_0xfa8805.group.limit) {
                    UTILS.generateElement({
                        class: "itemInfoLmt",
                        text: (player.itemCounts[_0xfa8805.group.id] || 0x0) + "/" + (config.isSandbox ? 0x63 : _0xfa8805.group.limit),
                        parent: itemInfoHolder
                    });
                }
            }
        }
    } else {
        itemInfoHolder.classList.remove("visible");
    }
}
window.addEventListener("resize", UTILS.checkTrusted(resize));

function resize() {
    screenWidth = window.innerWidth;
    screenHeight = window.innerHeight;
    let _0x3fc45b = Math.max(screenWidth / maxScreenWidth, screenHeight / maxScreenHeight) * 0x1;
    gameCanvas.width = screenWidth * 0x1;
    gameCanvas.height = screenHeight * 0x1;
    gameCanvas.style.width = screenWidth + "px";
    gameCanvas.style.height = screenHeight + "px";
    mainContext.setTransform(_0x3fc45b, 0x0, 0x0, _0x3fc45b, (screenWidth * 0x1 - maxScreenWidth * _0x3fc45b) / 0x2, (screenHeight * 0x1 - maxScreenHeight * _0x3fc45b) / 0x2);
}
resize();

function zoomVision() {
    if (maxScreenWidth != config.maxScreenWidth * 0x73 || maxScreenHeight != config.maxScreenHeight * 1.1) {
        maxScreenWidth = config.maxScreenWidth * 1.1;
        maxScreenHeight = config.maxScreenHeight * 1.1;
        resize();
    }
}
gameCanvas = document.getElementById("touch-controls-fullscreen");
gameCanvas.addEventListener("mousemove", gameInput, false);

function gameInput(_0x9ef6d0) {
    mouseX = _0x9ef6d0.clientX;
    mouseY = _0x9ef6d0.clientY;
}
let clicks = {
    left: false,
    middle: false,
    right: false
};
gameCanvas.addEventListener("mousedown", mouseDown, false);

function mouseDown(_0xb61bf4) {
    if (attackState != 0x1) {
        attackState = 0x1;
        if (_0xb61bf4.button == 0x0) {
            clicks.left = true;
        } else {
            if (_0xb61bf4.button == 0x1) {
                clicks.middle = true;
            } else if (_0xb61bf4.button == 0x2) {
                clicks.right = true;
            }
        }
    }
}
window.addEventListener("mouseup", UTILS.checkTrusted(mouseUp));

function mouseUp(_0x4feeb8) {
    if (attackState != 0x0) {
        attackState = 0x0;
        if (_0x4feeb8.button == 0x0) {
            clicks.left = false;
        } else {
            if (_0x4feeb8.button == 0x1) {
                clicks.middle = false;
            } else if (_0x4feeb8.button == 0x2) {
                clicks.right = false;
            }
        }
    }
}
gameCanvas.addEventListener("wheel", function(_0x20e57d) {
    if (_0x20e57d.deltaY > 0x0) {
        for (let _0x12ce62 = 0x0; _0x12ce62 < 0x19; _0x12ce62 += 0x1) {
            setTimeout(() => {
                maxScreenWidth *= 1.01;
                maxScreenHeight *= 1.01;
                resize();
            }, _0x12ce62 * 0xa);
        }
    } else {
        for (let _0x11139b = 0x0; _0x11139b < 0x19; _0x11139b += 0x1) {
            setTimeout(() => {
                maxScreenWidth /= 1.01;
                maxScreenHeight /= 1.01;
                resize();
            }, _0x11139b * 0xa);
        }
    }
});

function wheel(_0x3687b0) {
    if (_0x3687b0.deltaY < 0x0) {
        my.reSync = true;
    } else {
        my.reSync = false;
    }
}

function getSafeDir() {
    if (!player) {
        return 0x0;
    }
    if (!player.lockDir) {
        lastDir = Math.atan2(mouseY - screenHeight / 0x2, mouseX - screenWidth / 0x2);
    }
    return lastDir || 0x0;
}

function getAttackDir(_0xf288bd) {
    if (_0xf288bd) {
        if (!player) {
            return "0";
        }
        if (my.autoAim || clicks.left) {
            lastDir = document.getElementById("doAutoGrind").checked ? "getSafeDir()" : enemy.length ? my.revAim ? "(near.aim2 + Math.PI)" : "near.aim2" : "getSafeDir()";
        } else {
            if (clicks.right && player.reloads[player.weapons[0x1] == 0xa ? player.weapons[0x1] : player.weapons[0x0]] == 0x0) {
                lastDir = "getSafeDir()";
            } else {
                if (traps.inTrap && player.reloads[traps.notFast() ? player.weapons[0x1] : player.weapons[0x0]] == 0x0) {
                    lastDir = "traps.aim";
                } else if (!player.lockDir) {
                    lastDir = "getSafeDir()";
                }
            }
        }
        return lastDir;
    } else {
        if (!player) {
            return 0x0;
        }
        if (my.autoAim || clicks.left) {
            lastDir = document.getElementById("doAutoGrind").checked ? getSafeDir() : enemy.length ? my.revAim ? near.aim2 + Math.PI : near.aim2 : getSafeDir();
        } else {
            if (clicks.right && player.reloads[player.weapons[0x1] == 0xa ? player.weapons[0x1] : player.weapons[0x0]] == 0x0) {
                lastDir = getSafeDir();
            } else {
                if (traps.inTrap && player.reloads[traps.notFast() ? player.weapons[0x1] : player.weapons[0x0]] == 0x0) {
                    lastDir = traps.aim;
                } else if (!player.lockDir) {
                    lastDir = getSafeDir();
                }
            }
        }
        return lastDir || 0x0;
    }
}

function getVisualDir() {
    if (!player) {
        return 0x0;
    }
    if (my.autoAim || clicks.left) {
        lastDir = document.getElementById("doAutoGrind").checked ? getSafeDir() : enemy.length ? my.revAim ? near.aim2 + Math.PI : near.aim2 : getSafeDir();
    } else {
        if (clicks.right && player.reloads[player.weapons[0x1] == 0xa ? player.weapons[0x1] : player.weapons[0x0]] == 0x0) {
            lastDir = getSafeDir();
        } else {
            if (traps.inTrap && player.reloads[traps.notFast() ? player.weapons[0x1] : player.weapons[0x0]] == 0x0) {
                lastDir = traps.aim;
            } else if (!player.lockDir) {
                lastDir = getSafeDir();
            }
        }
    }
    return lastDir || 0x0;
}

function keysActive() {
    return allianceMenu.style.display != "block" && chatHolder.style.display != "block";
}

function keyDown(_0x2ab7da) {
    let _0x10f4a5 = _0x2ab7da.which || _0x2ab7da.keyCode || 0x0;
    if (player && player.alive && allianceMenu.style.display != "block" && chatHolder.style.display != "block") {
        if (!keys[_0x10f4a5]) {
            keys[_0x10f4a5] = 0x1;
            macro[_0x2ab7da.key] = 0x1;
            if (_0x10f4a5 == 0x1b) {
                openMenu = !openMenu;
                $("#modMenus").toggle();
                $("#test").toggle();
            } else {
                if (_0x10f4a5 == 0x45) {
                    sendAutoGather();
                } else {
                    if (_0x10f4a5 == 0x43) {
                        updateMapMarker();
                    } else {
                        if (player.weapons[_0x10f4a5 - 0x31] != undefined) {
                            player.weaponCode = player.weapons[_0x10f4a5 - 0x31];
                        } else {
                            if (moveKeys[_0x10f4a5]) {
                                sendMoveDir();
                            } else {
                                if (_0x2ab7da.key == "m") {
                                    mills.placeSpawnPads = !mills.placeSpawnPads;
                                } else {
                                    if (_0x2ab7da.key == "r") {
                                        instaC.wait = !instaC.wait;
                                    } else {
                                        if (_0x2ab7da.key == "z") {
                                            millC.active = !millC.active;
                                            showNotification("You: Auto Mill: " + millC.active);
                                        } else {
                                            if (_0x2ab7da.key == "Z") {
                                                if (typeof window.debug == "function") {
                                                    window.debug();
                                                }
                                            } else {
                                                if (_0x10f4a5 == 0x20) {
                                                    packet("F", 0x1, getSafeDir(), 0x1);
                                                    packet("F", 0x0, getSafeDir(), 0x1);
                                                } else if (_0x2ab7da.key == ",") {
                                                    player.sync = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
addEventListener("keydown", UTILS.checkTrusted(keyDown));

function keyUp(_0x4f42f2) {
    if (player && player.alive) {
        let _0x3444da = _0x4f42f2.which || _0x4f42f2.keyCode || 0x0;
        if (_0x3444da == 0xd) {} else {
            if (allianceMenu.style.display != "block" && chatHolder.style.display != "block") {
                if (keys[_0x3444da]) {
                    keys[_0x3444da] = 0x0;
                    macro[_0x4f42f2.key] = 0x0;
                    if (moveKeys[_0x3444da]) {
                        sendMoveDir();
                    } else if (_0x4f42f2.key == ",") {
                        player.sync = false;
                    }
                }
            }
        }
    }
}
window.addEventListener("keyup", UTILS.checkTrusted(keyUp));
var tracker = {
    draw3: {
        active: false,
        x: 0x0,
        y: 0x0,
        scale: 0x0
    },
    moveDir: undefined,
    lastPos: {
        x: 0x0,
        y: 0x0
    }
};

function bindEvents() {}
bindEvents();
let isItemSetted = {};

function updateItemCountDisplay(_0x127248 = undefined) {
    for (let _0x4ac8bf = 0x0; _0x4ac8bf < items.list.length; ++_0x4ac8bf) {
        let _0x1aca46 = items.list[_0x4ac8bf].group.id;
        let _0x19e7ad = items.weapons.length + _0x4ac8bf;
        if (!isItemSetted[_0x19e7ad]) {
            isItemSetted[_0x19e7ad] = document.createElement("div");
            isItemSetted[_0x19e7ad].id = "itemCount" + _0x19e7ad;
            isItemSetted[_0x19e7ad].style.position = "absolute";
            isItemSetted[_0x19e7ad].style.top = "5px";
            isItemSetted[_0x19e7ad].style.left = "5px";
            isItemSetted[_0x19e7ad].style.paddingLeft = "30px";
            document.getElementById("actionBarItem" + _0x19e7ad).appendChild(isItemSetted[_0x19e7ad]);
            isItemSetted[_0x19e7ad].style = "\n                display: none;\n                width: 100%;\n                height: 10px;\n                background-color: white;\n                border-radius: 3px;\n            ";
        }
        let _0x444bc6 = player.itemCounts[_0x1aca46] || 0x0;
        let _0x487f8d = _0x1aca46 === 0x3 || _0x1aca46 === 0x5 ? 0x12b : 0x63;
        if (_0x444bc6 <= _0x487f8d) {
            let _0x219403 = _0x444bc6 / _0x487f8d * 0x64;
            isItemSetted[_0x19e7ad].style.width = _0x219403 + "%";
            isItemSetted[_0x19e7ad].title = "Count: " + _0x444bc6;
        } else {
            isItemSetted[_0x19e7ad].style.display = "none";
        }
    }
}

function chechPathColl(_0x32f2ae) {
    return (player.scale + _0x32f2ae.getScale()) / (player.maxSpeed * items.weapons[player.weaponIndex].spdMult) + (_0x32f2ae.dmg && !_0x32f2ae.isTeamObject(player) ? 0x23 : 0x0);
    return _0x32f2ae.colDiv == 0.5 ? _0x32f2ae.scale * _0x32f2ae.colDiv : !_0x32f2ae.isTeamObject(player) && _0x32f2ae.dmg ? _0x32f2ae.scale + player.scale : _0x32f2ae.isTeamObject(player) && _0x32f2ae.trap ? 0x0 : _0x32f2ae.scale;
}

function checkObject() {
    let _0x3e2ce3 = gameObjects.filter(_0x1a2d9c => player.canSee(_0x1a2d9c) && _0x1a2d9c.active);
    for (let _0x413f2e = 0x0; _0x413f2e < pathFind.grid; _0x413f2e++) {
        grid[_0x413f2e] = [];
        for (let _0x178648 = 0x0; _0x178648 < pathFind.grid; _0x178648++) {
            let _0x2b5d04 = {
                x: player.x2 - pathFind.scale / 0x2 + pathFind.scale / pathFind.grid * _0x178648,
                y: player.y2 - pathFind.scale / 0x2 + pathFind.scale / pathFind.grid * _0x413f2e
            };
            if (UTILS.getDist(pathFind.chaseNear ? near : pathFind, _0x2b5d04, pathFind.chaseNear ? 0x2 : 0x0, 0x0) <= (pathFind.chaseNear ? 0x23 : 0x3c)) {
                pathFind.lastX = _0x178648;
                pathFind.lastY = _0x413f2e;
                grid[_0x413f2e][_0x178648] = 0x0;
                continue;
            }
            let _0x467adf = _0x3e2ce3.find(_0x5b2bc6 => UTILS.getDist(_0x5b2bc6, _0x2b5d04, 0x0, 0x0) <= chechPathColl(_0x5b2bc6));
            if (_0x467adf) {
                if (_0x467adf.trap) {
                    grid[_0x413f2e][_0x178648] = 0x0;
                    continue;
                }
                grid[_0x413f2e][_0x178648] = 0x1;
            } else {
                grid[_0x413f2e][_0x178648] = 0x0;
            }
        }
    }
}

function createPath() {
    grid = [];
    checkObject();
}

function Pathfinder() {
    pathFind.scale = config.maxScreenWidth / 0x2 * 1.3;
    if (!traps.inTrap && (pathFind.chaseNear ? enemy.length : true)) {
        if (near.dist2 <= items.weapons[player.weapons[0x0]].range) {
            packet("9", undefined, 0x1);
        } else {
            createPath();
            easystar.setGrid(grid);
            easystar.setAcceptableTiles([0x0]);
            easystar.enableDiagonals();
            easystar.findPath(grid[0x0].length / 0x2, grid.length / 0x2, pathFind.lastX, pathFind.lastY, function(_0x48f59d) {
                if (_0x48f59d === null) {
                    pathFind.array = [];
                    if (near.dist2 <= items.weapons[player.weapons[0x0]].range) {
                        packet("9", undefined, 0x1);
                    } else {
                        packet("9", near.aim2, 0x1);
                    }
                } else {
                    pathFind.array = _0x48f59d;
                    if (pathFind.array.length > 0x1) {
                        let _0xe155b5 = {
                            x: player.x2 - pathFind.scale / 0x2 + pathFind.scale / pathFind.grid * _0x48f59d[0x1].x,
                            y: player.y2 - pathFind.scale / 0x2 + pathFind.scale / pathFind.grid * _0x48f59d[0x1].y
                        };
                        packet("9", UTILS.getDirect(_0xe155b5, player, 0x0, 0x2), 0x1);
                    }
                }
            });
            easystar.calculate();
        }
    }
}

function fgdo(_0x235357, _0x40d02f) {
    return Math.sqrt(Math.pow(_0x40d02f.y - _0x235357.y, 0x2) + Math.pow(_0x40d02f.x - _0x235357.x, 0x2));
}

function isTeam(_0x57c5a5) {
    return _0x57c5a5 == player || _0x57c5a5.team && _0x57c5a5.team == player.team;
}

function autoPush() {
    let nearTrap = gameObjects.filter(tmp => tmp.trap && tmp.active && tmp.isTeamObject(player) && UTILS.getDist(tmp, near, 0x0, 0x2) <= near.scale + tmp.getScale() + 0x5).sort(function(a, b) {
        return UTILS.getDist(a, near, 0x0, 0x2) - UTILS.getDist(b, near, 0x0, 0x2);
    })[0x0];
    if (nearTrap) {
        let spike = gameObjects.filter(_0x264f97 => _0x264f97.dmg && _0x264f97.active && _0x264f97.isTeamObject(player) && UTILS.getDist(_0x264f97, nearTrap, 0x0, 0x0) <= near.scale + nearTrap.scale + _0x264f97.scale).sort(function(_0x530cbe, _0x3d4d8b) {
            return UTILS.getDist(_0x530cbe, near, 0x0, 0x2) - UTILS.getDist(_0x3d4d8b, near, 0x0, 0x2);
        })[0x0];
        if (spike) {
            let pos = {
                x: spike.x + 0xfa * Math.cos(UTILS.getDirect(near, spike, 0x2, 0x0)),
                y: spike.y + 0xfa * Math.sin(UTILS.getDirect(near, spike, 0x2, 0x0)),
                x2: spike.x + (UTILS.getDist(near, spike, 0x2, 0x0) + player.scale) * Math.cos(UTILS.getDirect(near, spike, 0x2, 0x0)),
                y2: spike.y + (UTILS.getDist(near, spike, 0x2, 0x0) + player.scale) * Math.sin(UTILS.getDirect(near, spike, 0x2, 0x0))
            };
            let finds = gameObjects.filter(_0x43c5fd => _0x43c5fd.active).find(_0x10e4b8 => {
                let tmpScale = _0x10e4b8.getScale();
                if (!_0x10e4b8.ignoreCollision && UTILS.lineInRect(_0x10e4b8.x - tmpScale, _0x10e4b8.y - tmpScale, _0x10e4b8.x + tmpScale, _0x10e4b8.y + tmpScale, player.x2, player.y2, pos.x2, pos.y2)) {
                    return true;
                }
            });
            if (finds) {
                if (my.autoPush) {
                    my.autoPush = false;
                    packet("9", lastMoveDir || undefined, 0x1);
                }
            } else {
                my.autoPush = true;
                my.pushData = {
                    x: spike.x,
                    y: spike.y,
                    x2: pos.x2,
                    y2: pos.y2
                };
                let scale = player.scale / 0xa;
                if (UTILS.lineInRect(player.x2 - scale, player.y2 - scale, player.x2 + scale, player.y2 + scale, near.x2, near.y2, pos.x, pos.y)) {
                    packet("9", near.aim2, 0x1);
                } else {
                    packet("9", UTILS.getDirect(pos, player, 0x2, 0x2), 0x1);
                }
            }
        } else if (my.autoPush) {
            my.autoPush = false;
            packet("9", lastMoveDir || undefined, 0x1);
        }
    } else if (my.autoPush) {
        my.autoPush = false;
        packet("9", lastMoveDir || undefined, 0x1);
    }
}
let earlyAutoBreak = {
    start: false
};

function antiTrap(_0x4ede63) {
    if (near.dist2 <= 0xfa) {
        for (let _0x2d44c1 = -0x2d; _0x2d44c1 <= 0x2d; _0x2d44c1 += 0x5a) {
            checkPlace(0x2, _0x4ede63 + UTILS.toRad(_0x2d44c1) + Math.PI);
        }
    } else {
        if (near.dist2 <= 0x258) {
            for (let _0x2e5f65 = -0x2d; _0x2e5f65 <= 0x2d; _0x2e5f65 += 0x5a) {
                if (enemy.length) {
                    checkPlace(0x4, _0x4ede63 + UTILS.toRad(_0x2e5f65) + Math.PI);
                }
            }
        }
    }
}
let myTeles = [];

function loadGameObject(_0x1e965b) {
    for (var _0x1ef8f5 = 0x0; _0x1ef8f5 < _0x1e965b.length;) {
        objectManager.add(_0x1e965b[_0x1ef8f5], _0x1e965b[_0x1ef8f5 + 0x1], _0x1e965b[_0x1ef8f5 + 0x2], _0x1e965b[_0x1ef8f5 + 0x3], _0x1e965b[_0x1ef8f5 + 0x4], _0x1e965b[_0x1ef8f5 + 0x5], items.list[_0x1e965b[_0x1ef8f5 + 0x6]], true, _0x1e965b[_0x1ef8f5 + 0x7] >= 0x0 ? {
            sid: _0x1e965b[_0x1ef8f5 + 0x7]
        } : null);
        let _0x1cd828 = {
            x: _0x1e965b[_0x1ef8f5 + 0x1],
            y: _0x1e965b[_0x1ef8f5 + 0x2]
        };
        let _0x5d97d7 = UTILS.getDist(_0x1cd828, player, 0x0, 0x2);
        let _0x9397aa = UTILS.getDirect(_0x1cd828, player, 0x0, 0x2);
        if (_0x1e965b[_0x1ef8f5 + 0x6] == 0x16 && player.sid == _0x1e965b[_0x1ef8f5 + 0x7]) {
            myTeles.push({
                x: _0x1e965b[_0x1ef8f5 + 0x1],
                y: _0x1e965b[_0x1ef8f5 + 0x2]
            });
            game.tickBase(() => {
                myTeles.shift();
            }, 0x7530);
        }
        if (_0x1e965b[_0x1ef8f5 + 0x6] == 0xf && _0x5d97d7 <= 0x64 && player.sid != _0x1e965b[_0x1ef8f5 + 0x7] && !findAllianceBySid(_0x1e965b[_0x1ef8f5 + 0x7])) {
            game.tickBase(() => {
                _0x5d97d7 = UTILS.getDist(_0x1cd828, player, 0x0, 0x2);
                _0x9397aa = UTILS.getDirect(_0x1cd828, player, 0x0, 0x2);
                traps.inTrap = true;
                traps.aim = _0x9397aa;
                if (!earlyAutoBreak.start) {
                    earlyAutoBreak.start = true;
                    earlyAutoBreak.hit = 0x0;
                    earlyAutoBreak.miss = 0x0;
                }
                if (_0x5d97d7 <= 0x4b) {
                    earlyAutoBreak.hit++;
                } else {
                    earlyAutoBreak.miss++;
                }
            }, 0x5);
        }
        game.tickBase(() => {
            _0x5d97d7 = UTILS.getDist(_0x1cd828, player, 0x0, 0x2);
            _0x9397aa = UTILS.getDirect(_0x1cd828, player, 0x0, 0x2);
            if (_0x1e965b[_0x1ef8f5 + 0x6] == 0xf && _0x5d97d7 <= 0x64 && player.sid != _0x1e965b[_0x1ef8f5 + 0x7] && !findAllianceBySid(_0x1e965b[_0x1ef8f5 + 0x7])) {
                antiTrap(_0x9397aa);
            }
        }, 0x1);
        _0x1ef8f5 += 0x8;
    }
}

function addDeadPlayer(_0x99b0ac) {
    deadPlayers.push(new DeadPlayer(_0x99b0ac.x, _0x99b0ac.y, _0x99b0ac.dir, _0x99b0ac.buildIndex, _0x99b0ac.weaponIndex, _0x99b0ac.weaponVariant, _0x99b0ac.skinColor, _0x99b0ac.scale, _0x99b0ac.name));
}

function setInitData(_0x57b74b) {
    alliances = _0x57b74b.teams;
}

function setupGame(_0x575b02) {
    keys = {};
    macro = {};
    playerSID = _0x575b02;
    attackState = 0x0;
    inGame = true;
    packet("F", 0x0, getAttackDir(), 0x1);
    my.ageInsta = true;
    if (firstSetup) {
        firstSetup = false;
        gameObjects.length = 0x0;
    }
}

function addPlayer(_0x297beb, _0x111734) {
    let _0x36f792 = findID(players, _0x297beb[0x0]);
    if (!_0x36f792) {
        _0x36f792 = new Player(_0x297beb[0x0], _0x297beb[0x1], config, UTILS, projectileManager, objectManager, players, ais, items, hats, accessories);
        players.push(_0x36f792);
    }
    _0x36f792.spawn(_0x111734 ? true : null);
    _0x36f792.visible = false;
    _0x36f792.oldPos = {
        x2: undefined,
        y2: undefined
    };
    _0x36f792.x2 = undefined;
    _0x36f792.y2 = undefined;
    _0x36f792.x3 = undefined;
    _0x36f792.y3 = undefined;
    _0x36f792.setData(_0x297beb);
    if (_0x111734) {
        if (!player) {
            window.prepareUI(_0x36f792);
        }
        player = _0x36f792;
        camX = player.x;
        camY = player.y;
        my.lastDir = 0x0;
        updateItems();
        updateStatusDisplay();
        updateAge();
        updateItemCountDisplay();
        if (player.skins[0x7]) {
            my.reSync = true;
        }
    }
}

function removePlayer(_0x5fae2) {
    for (let _0x52e0e4 = 0x0; _0x52e0e4 < players.length; _0x52e0e4++) {
        if (players[_0x52e0e4].id == _0x5fae2) {
            players.splice(_0x52e0e4, 0x1);
            break;
        }
    }
}
let ticks = {
    tick: 0x0,
    delay: 0x0,
    time: [],
    manage: []
};

function applCxC(_0x31f979) {
    if (player.skinIndex != 0x2d && player.skinIndex != 0x38) {
        if (0x0 == player.items[0x0]) {
            if (_0x31f979 > 0x50) {
                return 0x5;
            } else {
                if (_0x31f979 > 0x3c) {
                    return 0x4;
                } else {
                    if (_0x31f979 > 0x28) {
                        return 0x3;
                    } else {
                        return _0x31f979 > 0x14 ? 0x2 : 0x1;
                    }
                }
            }
        } else {
            if (0x1 == player.items[0x0]) {
                if (_0x31f979 > 0x50) {
                    return 0x3;
                } else {
                    return _0x31f979 > 0x28 ? 0x2 : 0x1;
                }
            } else {
                if (0x2 == player.items[0x0]) {
                    if (_0x31f979 > 0x5a) {
                        return 0x4;
                    } else {
                        if (_0x31f979 > 0x3c) {
                            return 0x3;
                        } else {
                            return _0x31f979 > 0x1e ? 0x2 : 0x1;
                        }
                    }
                } else {
                    return 0x4;
                }
            }
        }
    } else {
        return 0x0;
    }
}

function setTickout(_0x1f9b66, _0x567efb) {
    if (!ticks.manage[ticks.tick + _0x567efb]) {
        ticks.manage[ticks.tick + _0x567efb] = [_0x1f9b66];
    } else {
        ticks.manage[ticks.tick + _0x567efb].push(_0x1f9b66);
    }
}
let doEmpAntiInsta = false;

function updateHealth(_0x87ed0f, _0x57ceaa) {
    tmpObj = findSID(players, _0x87ed0f);
    if (tmpObj) {
        tmpObj.oldHealth = tmpObj.health;
        tmpObj.health = _0x57ceaa;
        tmpObj.judgeShame();
        if (tmpObj.oldHealth > tmpObj.health) {
            tmpObj.damaged = tmpObj.oldHealth - tmpObj.health;
            advHeal.push([_0x87ed0f, _0x57ceaa, tmpObj.damaged]);
        }
    }
}

function killPlayer() {
    inGame = false;
    lastDeath = {
        x: player.x,
        y: player.y
    };
}

function updateItemCounts(_0x228c8c, _0x3dc208) {
    if (player) {
        player.itemCounts[_0x228c8c] = _0x3dc208;
        updateItemCountDisplay(_0x228c8c);
    }
}

function updateAge(_0x339330, _0x1aa7c6, _0x18b724) {
    if (_0x339330 != undefined) {
        player.XP = _0x339330;
    }
    if (_0x1aa7c6 != undefined) {
        player.maxXP = _0x1aa7c6;
    }
    if (_0x18b724 != undefined) {
        player.age = _0x18b724;
    }
    if (_0x18b724 >= 0xf) {
        ageText.innerHTML = "MAX AGE";
        ageBarBody.style.width = "100%";
    } else {
        ageText.innerHTML = "AGE " + player.age;
        if (config.idk) {
            ageBarBody.style.transition = "1s";
        } else {
            ageBarBody.style.transition = null;
        }
        ageBarBody.style.width = player.XP / player.maxXP * 0x64 + "%";
    }
}

function updateUpgrades(_0x2d0c06, _0x3e94a9) {
    player.upgradePoints = _0x2d0c06;
    player.upgrAge = _0x3e94a9;
    if (_0x2d0c06 > 0x0) {
        tmpList.length = 0x0;
        UTILS.removeAllChildren(upgradeHolder);
        for (let _0x20ce9b = 0x0; _0x20ce9b < items.weapons.length; ++_0x20ce9b) {
            if (items.weapons[_0x20ce9b].age == _0x3e94a9 && (items.weapons[_0x20ce9b].pre == undefined || player.weapons.indexOf(items.weapons[_0x20ce9b].pre) >= 0x0)) {
                let _0x29f1dc = UTILS.generateElement({
                    id: "upgradeItem" + _0x20ce9b,
                    class: "actionBarItem",
                    onmouseout: function() {
                        showItemInfo();
                    },
                    parent: upgradeHolder
                });
                _0x29f1dc.style.backgroundImage = document.getElementById("actionBarItem" + _0x20ce9b).style.backgroundImage;
                tmpList.push(_0x20ce9b);
            }
        }
        for (let _0x42789f = 0x0; _0x42789f < items.list.length; ++_0x42789f) {
            if (items.list[_0x42789f].age == _0x3e94a9 && (items.list[_0x42789f].pre == undefined || player.items.indexOf(items.list[_0x42789f].pre) >= 0x0)) {
                let _0x1cda03 = items.weapons.length + _0x42789f;
                let _0x4b2de2 = UTILS.generateElement({
                    id: "upgradeItem" + _0x1cda03,
                    class: "actionBarItem",
                    onmouseout: function() {
                        showItemInfo();
                    },
                    parent: upgradeHolder
                });
                _0x4b2de2.style.backgroundImage = document.getElementById("actionBarItem" + _0x1cda03).style.backgroundImage;
                tmpList.push(_0x1cda03);
            }
        }
        for (let _0x3c2bcc = 0x0; _0x3c2bcc < tmpList.length; _0x3c2bcc++) {
            (function(_0xd713ee) {
                let _0x107db5 = document.getElementById("upgradeItem" + _0xd713ee);
                _0x107db5.onmouseover = function() {
                    if (items.weapons[_0xd713ee]) {
                        showItemInfo(items.weapons[_0xd713ee], true);
                    } else {
                        showItemInfo(items.list[_0xd713ee - items.weapons.length]);
                    }
                };
                _0x107db5.onclick = UTILS.checkTrusted(function() {
                    packet("H", _0xd713ee);
                });
                UTILS.hookTouchEvents(_0x107db5);
            })(tmpList[_0x3c2bcc]);
        }
        if (tmpList.length) {
            upgradeHolder.style.display = "block";
            upgradeCounter.style.display = "block";
            upgradeCounter.innerHTML = "SELECT ITEMS (" + _0x2d0c06 + ")";
        } else {
            upgradeHolder.style.display = "none";
            upgradeCounter.style.display = "none";
            showItemInfo();
        }
    } else {
        upgradeHolder.style.display = "none";
        upgradeCounter.style.display = "none";
        showItemInfo();
    }
}

function objDist(_0x3f7101, _0x19d99a) {
    return Math.hypot(_0x3f7101.y - _0x19d99a.y, _0x3f7101.x - _0x19d99a.x);
}

function tmpObjDist(_0x274e29, _0xb95411) {
    return Math.hypot(_0x274e29.y2 - _0xb95411.y2, _0x274e29.x2 - _0xb95411.x2);
}

function objLoc(_0x4babf0, _0x1a53e2) {
    return Math.atan2(_0x4babf0.y - _0x1a53e2.y, _0x4babf0.x - _0x1a53e2.x);
}

function tmpObjLoc(_0x5ca8c1, _0x43e1c2) {
    return Math.atan2(_0x5ca8c1.y2 - _0x43e1c2.y2, _0x5ca8c1.x2 - _0x43e1c2.x2);
}

function getDist(_0x1b377b, _0x439176) {
    try {
        return Math.hypot((_0x439176.y2 || _0x439176.y) - (_0x1b377b.y2 || _0x1b377b.y), (_0x439176.x2 || _0x439176.x) - (_0x1b377b.x2 || _0x1b377b.x));
    } catch (_0x3657cb) {
        return Infinity;
    }
}

function cdf(_0x1b5ae9, _0x23b563) {
    try {
        return Math.hypot((_0x23b563.y2 || _0x23b563.y) - (_0x1b5ae9.y2 || _0x1b5ae9.y), (_0x23b563.x2 || _0x23b563.x) - (_0x1b5ae9.x2 || _0x1b5ae9.x));
    } catch (_0x5ec068) {
        return Infinity;
    }
}

function caf(_0x3bc38c, _0xc3c1dd) {
    try {
        return Math.atan2((_0xc3c1dd.y2 || _0xc3c1dd.y) - (_0x3bc38c.y2 || _0x3bc38c.y), (_0xc3c1dd.x2 || _0xc3c1dd.x) - (_0x3bc38c.x2 || _0x3bc38c.x));
    } catch (_0x3e329e) {
        return 0x0;
    }
}

function GetMoveDirection() {
    const _0x47bcca = camX - maxScreenWidth / 0x2;
    const _0x555165 = camY - maxScreenHeight / 0x2;
    const _0x657007 = player.x - _0x47bcca;
    const _0x375d55 = player.y - _0x555165;
    return {
        movex: _0x657007,
        movey: _0x375d55
    };
}

function toD(_0x2f0212) {
    var _0xf5cca4 = _0x2f0212 / Math.PI * 0x168 % 0x168;
    return _0xf5cca4 >= 0x168 ? _0xf5cca4 - 0x168 : _0xf5cca4;
}

function toR(_0x1f41a7) {
    var _0xee65fd = _0x1f41a7 * Math.PI / 0xb4 % (0x2 * Math.PI);
    return _0xee65fd > Math.PI ? Math.PI - _0xee65fd : _0xee65fd;
}

function KillObject2(_0x35b4ec) {
    objectManager.disableBySid(_0x35b4ec);
}

function killObject(_0x1d4a8a) {
    let _0x41ee9f = findSID(gameObjects, _0x1d4a8a);
    objectManager.disableBySid(_0x1d4a8a);
    if (nears.length) {
        let _0x4823ca = Math.atan2(_0x41ee9f.y - player.y2, _0x41ee9f.x - player.x2);
        let _0x460dbe = Math.hypot(_0x41ee9f.y - player.y2, _0x41ee9f.x - player.x2);
        let _0x4c6a2f = function(_0x4b3e44, _0x2a76ce) {
            checkPlace(_0x4b3e44, _0x2a76ce);
        };
        if (_0x460dbe <= 0xc8 && getDist(player, tmpObj) <= 0xa8 && tmpObj != player && player.reloads[player.weapons[0x0]] == 0x0) {
            _0x4c6a2f(0x2, _0x4823ca);
        }
        if (player.alive) {
            if (document.getElementById("doAutoReplacer").checked && _0x460dbe <= 0x190) {
                if (Math.hypot(near.dist2.y2 - player.y2, near.dist2.x2 - player.x2) <= 0xfa) {
                    let _0x223a81 = -0x1;
                    for (let _0x1949f6 = -0x5a; _0x1949f6 < 180; _0x1949f6 += 0x1e) {
                        _0x223a81++;
                        if (_0x223a81 == 0x1 && _0x460dbe <= 0xc8) {
                            _0x4c6a2f(0x2, _0x4823ca);
                        } else {
                            checkPlace(0x2, _0x4823ca + rad(_0x1949f6));
                        }
                    }
                } else {
                    if (Math.hypot(near.dist2.y2 - player.y2, near.dist2.x2 - player.x2) > 0xfa && Math.hypot(near.dist2.y2 - player.y2, near.dist2.x2 - player.x2) < 0x1f4) {
                        let _0x4c9f6d = -0x1;
                        for (let _0x59037e = 0x0; _0x59037e < Math.PI * 0x2; _0x59037e += Math.PI / 0x6) {
                            if (player.items[0x4] == 0xf) {
                                _0x4c9f6d++;
                                if (_0x4c9f6d == 0x0 && _0x460dbe <= 0xc8) {
                                    _0x4c6a2f(0x4, _0x4823ca);
                                } else {
                                    checkPlace(0x4, _0x4823ca + _0x59037e);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

function killObjects(_0x1dd6c9) {
    if (player) {
        objectManager.removeAllItems(_0x1dd6c9);
    }
}
let Status = document.createElement("div");
Status.id = "test";
document.body.prepend(Status);
document.getElementById("test").style.display = "block";
document.getElementById("test").style.opacity = "1";
document.getElementById("test").innerHTML = '\n            <div>   <table id="StatTbl"\n            class="hackDisp"\n            style="\n            opacity: 1;\n            display: block;\n            width: 205px;\n            position: absolute;\n            top: 20px;\n            left: 20px;\n            color: #fff;\n            background-color: rgba(0, 0, 0, 0.25);\n            border-radius: 4px;\n            -moz-border-radius: 4px;\n            -webkit-border-radius: 4px;\n            pointer-events: none;\n            "\n            border="0">\n            <tbody>\n            <tr style="height: 21px;">\n            <td style="height: 21px;color: rgba(255, 255, 255, 0.6);">\n            <button id="settingsBoxOpen" style="pointer-events: auto;background-color: white;color: black;border-color: white;border-radius: 4px;-moz-border-radius: 4px;-webkit-border-radius: 4px;">‎ ‎ ‎ Info:‎ ‎ ‎</button> </td>\n            <td id="pingDisp" style="height: 21px;color: white;"> Ping: undefined</td>\n            </tr>\n            <tr style="height: 21px;">\n            <td style="height: 21px;color: rgba(255, 255, 255, 0.6);">Shame: </td>\n            <td style="height: 21px;"><span id="shamer">0 / 8</span></td>\n            </tr>\n            <tr style="height: 21px;">\n            <td style="height: 21px;color: rgba(255, 255, 255, 0.6);">Packets:</td>\n            <td style="height: 21px;"><span id="eabStatus">0</span></td>\n            </tr>\n            <tr style="height: 21px;">\n            <td style="height: 21px;color: rgba(255, 255, 255, 0.6);">EAB:</td>\n            <td style="height: 21px;"><span id="yaya">[Hit: 0, Miss: 0]</span></td>\n            </tr>\n            <tr style="height: 21px;">\n            <td style="height: 21px;color: rgba(255, 255, 255, 0.6);">Turrets:</td>\n            <td style="height: 21px;"><span id="turret">0</span></td>\n            </tr>\n            <tr style="height: 21px;">\n            <td style="height: 21px;color: rgba(255, 255, 255, 0.6);">Healer:</td>\n            <td style="height: 21px;"><span id="healer">undefined</span></td>\n            </tr>\n            </tbody>\n            </table>\n            </div></div><style>\n            ';
config.isSandbox;
let millC = {
    x: undefined,
    y: undefined,
    size: function(_0xb9e16c) {
        return _0xb9e16c * 1.7;
    },
    dist: function(_0x212a1f) {
        return _0x212a1f * 1.8;
    },
    active: false,
    count: 0x0
};
let autoQ = false;
(function() {
    const _0x108932 = function() {
        let _0x110ef3;
        try {
            _0x110ef3 = Function('return (function() {}.constructor("return this")( ));')();
        } catch (_0x5111ac) {
            _0x110ef3 = window;
        }
        return _0x110ef3;
    };
    const _0x6b9320 = _0x108932();
    _0x6b9320.setInterval(hihello_0xbe8b1a, 0x5);
})();
let doAutoQ = false;
let autos = {
    reloaded: false,
    bull: false
};
let oldXY = {
    x: 0x0,
    y: 0x0
};

function updatePlayers(_0x358272) {
    game.tick++;
    enemy = [];
    nears = [];
    near = [];
    ticks.time.push(Date.now() - ticks.delay <= 0x32 || Date.now() - ticks.delay >= 0xaf ? "lag" : 0x1);
    if (ticks.tick % 0xa === 0x0) {
        ticks.time = [];
    }
    if (game.tick % 0x12c === 0x0 && config.idk) {
        maxPing = window.pingTime;
        minPing = window.pingTime;
    }
    game.tickSpeed = performance.now() - game.lastTick;
    game.lastTick = performance.now();
    players.forEach(_0x3966b7 => {
        _0x3966b7.forcePos = !_0x3966b7.visible;
        _0x3966b7.visible = false;
    });
    for (let _0x499e2b = 0x0; _0x499e2b < _0x358272.length;) {
        tmpObj = findSID(players, _0x358272[_0x499e2b]);
        if (tmpObj) {
            tmpObj.t1 = tmpObj.t2 === undefined ? game.lastTick : tmpObj.t2;
            tmpObj.t2 = game.lastTick;
            tmpObj.oldPos.x2 = tmpObj.x2;
            tmpObj.oldPos.y2 = tmpObj.y2;
            tmpObj.x1 = tmpObj.x;
            tmpObj.y1 = tmpObj.y;
            tmpObj.x2 = _0x358272[_0x499e2b + 0x1];
            tmpObj.y2 = _0x358272[_0x499e2b + 0x2];
            tmpObj.x3 = tmpObj.x2 + (tmpObj.x2 - tmpObj.oldPos.x2);
            tmpObj.y3 = tmpObj.y2 + (tmpObj.y2 - tmpObj.oldPos.y2);
            tmpObj.d1 = tmpObj.d2 === undefined ? _0x358272[_0x499e2b + 0x3] : tmpObj.d2;
            tmpObj.d2 = _0x358272[_0x499e2b + 0x3];
            tmpObj.dt = 0x0;
            tmpObj.buildIndex = _0x358272[_0x499e2b + 0x4];
            tmpObj.weaponIndex = _0x358272[_0x499e2b + 0x5];
            tmpObj.weaponVariant = _0x358272[_0x499e2b + 0x6];
            tmpObj.team = _0x358272[_0x499e2b + 0x7];
            tmpObj.isLeader = _0x358272[_0x499e2b + 0x8];
            tmpObj.oldSkinIndex = tmpObj.skinIndex;
            tmpObj.oldTailIndex = tmpObj.tailIndex;
            tmpObj.skinIndex = _0x358272[_0x499e2b + 0x9];
            tmpObj.tailIndex = _0x358272[_0x499e2b + 0xa];
            tmpObj.iconIndex = _0x358272[_0x499e2b + 0xb];
            tmpObj.zIndex = _0x358272[_0x499e2b + 0xc];
            tmpObj.visible = true;
            tmpObj.update(game.tickSpeed);
            tmpObj.dist2 = UTILS.getDist(tmpObj, player, 0x2, 0x2);
            tmpObj.aim2 = UTILS.getDirect(tmpObj, player, 0x2, 0x2);
            tmpObj.dist3 = UTILS.getDist(tmpObj, player, 0x3, 0x3);
            tmpObj.aim3 = UTILS.getDirect(tmpObj, player, 0x3, 0x3);
            tmpObj.damageThreat = 0x0;
            if (tmpObj == player) {
                tmpObj.syncThreats = 0x0;
                tmpObj.primaryIndex = tmpObj.weapons[0x0];
                tmpObj.secondaryIndex = tmpObj.weapons[0x1];
                if (!millC.x || !oldXY.x) {
                    millC.x = oldXY.x = tmpObj.x2;
                }
                if (!millC.y || !oldXY.y) {
                    millC.y = oldXY.y = tmpObj.y2;
                }
            }
            if (tmpObj == player && (oldXY.x2 == undefined || oldXY.y2 == undefined)) {
                oldXY.x2 = tmpObj.x2;
                oldXY.y2 = tmpObj.x2;
            }
            if (tmpObj.skinIndex == 0x2d && tmpObj.shameTimer <= 0x0) {
                tmpObj.addShameTimer();
            }
            if (tmpObj.oldSkinIndex == 0x2d && tmpObj.skinIndex != 0x2d) {
                tmpObj.shameTimer = 0x0;
                tmpObj.shameCount = 0x0;
                if (tmpObj == player) {
                    healer();
                }
            }
            if (tmpObj == player) {
                if (gameObjects.length) {
                    gameObjects.forEach(_0x27e349 => {
                        _0x27e349.onNear = false;
                        if (_0x27e349.active) {
                            if (!_0x27e349.onNear && UTILS.getDist(_0x27e349, tmpObj, 0x0, 0x2) <= _0x27e349.scale + items.weapons[tmpObj.weapons[0x0]].range) {
                                _0x27e349.onNear = true;
                            }
                            if (_0x27e349.isItem && _0x27e349.owner && !_0x27e349.pps && tmpObj.sid == _0x27e349.owner.sid && UTILS.getDist(_0x27e349, tmpObj, 0x0, 0x2) > 0x0 && !_0x27e349.breakObj && ![0xd, 0xe, 0x14].includes(_0x27e349.id)) {
                                _0x27e349.breakObj = true;
                                breakObjects.push({
                                    x: _0x27e349.x,
                                    y: _0x27e349.y,
                                    sid: _0x27e349.sid
                                });
                            }
                        }
                    });
                    let _0x1ac8d4 = gameObjects.filter(_0x241533 => _0x241533.trap && _0x241533.active && UTILS.getDist(_0x241533, tmpObj, 0x0, 0x2) <= tmpObj.scale + _0x241533.getScale() + 0x5 && !_0x241533.isTeamObject(tmpObj)).sort(function(_0x67893a, _0x5db8c4) {
                        return UTILS.getDist(_0x67893a, tmpObj, 0x0, 0x2) - UTILS.getDist(_0x5db8c4, tmpObj, 0x0, 0x2);
                    })[0x0];
                    if (_0x1ac8d4) {
                        traps.dist = UTILS.getDist(_0x1ac8d4, tmpObj, 0x0, 0x2);
                        traps.aim = UTILS.getDirect(_0x1ac8d4, tmpObj, 0x0, 0x2);
                        if (!traps.inTrap) {
                            traps.protect(traps.aim);
                        }
                        traps.inTrap = true;
                        traps.info = _0x1ac8d4;
                    } else {
                        traps.inTrap = false;
                        traps.info = {};
                    }
                } else {
                    traps.inTrap = false;
                }
            }
            if (tmpObj.weaponIndex < 0x9) {
                tmpObj.primaryIndex = tmpObj.weaponIndex;
                tmpObj.primaryVariant = tmpObj.weaponVariant;
            } else if (tmpObj.weaponIndex > 0x8) {
                tmpObj.secondaryIndex = tmpObj.weaponIndex;
                tmpObj.secondaryVariant = tmpObj.weaponVariant;
            }
        }
        _0x499e2b += 0xd;
    }
    if (window.pingTime >= 0x5a) {
        doAutoQ = true;
    } else {
        doAutoQ = false;
    }
    if (document.getElementById("doAutoQ").checked && doAutoQ) {
        document.getElementById("healer").innerHTML = "Auto Q";
        if (player.shameCount < 0x4 && near.dist2 <= 0x12c && near.reloads[near.primary] <= game.tickRate * (window.pingTime >= 0xc8 ? 0x2 : 0x1)) {
            autoQ = true;
            place(0x0, getAttackDir());
        } else {
            if (autoQ) {
                place(0x0, getAttackDir());
            }
            autoQ = false;
        }
    } else {
        if (autoQ) {
            place(0x0, getAttackDir());
        }
        autoQ = false;
        if (enemy.length >= 0x2) {
            document.getElementById("healer").innerHTML = enemy.length + "v1";
        } else {
            document.getElementById("healer").innerHTML = window.pingTime <= 0x55 ? "Low Ping" : "High Ping";
        }
    }
    if (player) {
        document.getElementById("pingDisp").innerHTML = "Ping: " + window.pingTime;
        document.getElementById("eabStatus").innerHTML = secPacket;
        document.getElementById("turret").innerHTML = turretEmp;
        document.getElementById("yaya").innerHTML = earlyAutoBreak.start ? ["[Hit: " + earlyAutoBreak.hit, " Miss: " + earlyAutoBreak.miss + "]"].join(",") : "[Hit: 0, Miss: 0]";
        document.getElementById("shamer").innerHTML = player.shameCount + " / 8";
    }
    turretEmp = 0x0;
    gameObjects.filter(_0xa41adb => _0xa41adb.active && _0xa41adb.doUpdate).forEach(_0x405908 => {
        if (_0x405908.shootted) {
            _0x405908.shootted = 0x0;
            _0x405908.shootReload = 0x898 - game.tickRate;
        } else {
            if (_0x405908.shootReload > 0x0) {
                _0x405908.shootReload = Math.max(0x0, _0x405908.shootReload - game.tickRate);
                if (_0x405908.shootReload <= 0x0) {
                    _0x405908.shootReload = 0x898;
                }
            }
            if (player.sid != _0x405908.owner.sid && !findAllianceBySid(_0x405908.owner.sid) && UTILS.getDist(_0x405908, player, 0x0, 0x2) <= 0x2df) {
                turretEmp++;
            }
        }
    });
    if (advHeal.length) {
        advHeal.forEach(_0x1ebd86 => {
            let _0x5a0c8e = _0x1ebd86[0x0];
            let _0x2298a1 = _0x1ebd86[0x2];
            tmpObj = findSID(players, _0x5a0c8e);
            let _0x58e543 = false;
            if (tmpObj == player) {
                if (tmpObj.skinIndex == 0x7 && (_0x2298a1 == 0x5 || tmpObj.latestTail == 0xd && _0x2298a1 == 0x2)) {
                    if (my.reSync) {
                        my.reSync = false;
                    }
                    tmpObj.setBullTick = true;
                    _0x58e543 = true;
                }
                if (tmpObj.health <= 0x0 && !tmpObj.death) {
                    tmpObj.death = true;
                    if (tmpObj != player) {
                        showNotification("System: " + tmpObj.name + " died");
                    }
                    addDeadPlayer(tmpObj);
                }
                if (inGame) {
                    let _0x4679ea = [0.25, 0.45].map(_0xabdfd8 => _0xabdfd8 * items.weapons[player.weapons[0x0]].dmg * (player.latestSkin == 0x6 ? 0.75 : 0x1));
                    let _0x433394 = enemy.length ? !_0x58e543 && _0x4679ea.includes(_0x2298a1) && near.skinIndex == 0xb : false;
                    let _0x5156b8 = 0x64 - player.health;
                    let _0x7e16bb = function() {
                        if (near.primaryIndex == 0x7 || player.weapons[0x0] == 0x7 && clicks.left) {
                            setTimeout(() => {
                                healer();
                            }, 0x8c - window.pingTime);
                        } else {
                            setTimeout(() => {
                                healer();
                            }, 0xde - window.pingTime);
                        }
                    };
                    if (_0x5156b8 >= (_0x433394 ? 0xa : 0x19) && (_0x5156b8 <= 0x50 ? _0x5156b8 + tmpObj.damageThreat > 0x50 : _0x5156b8 + tmpObj.damageThreat >= 0x64) && game.tick - tmpObj.antiTimer > 0x1) {
                        tmpObj.canEmpAnti = true;
                        tmpObj.antiTimer = game.tick;
                        if (player.shameCount < 0x5) {
                            healer();
                        } else {
                            _0x7e16bb();
                        }
                    } else {
                        _0x7e16bb();
                    }
                    if (_0x2298a1 >= 0x19 && near.dist2 <= items.weapons[player.weapons[0x0]].range + player.scale * 1.5 && player.skinIndex == 0xb && player.tailIndex == 0x15) {
                        instaC.canCounter = true;
                    }
                }
            } else if (!tmpObj.setPoisonTick && (tmpObj.damaged == 0x5 || tmpObj.latestTail == 0xd && tmpObj.damaged == 0x2)) {
                tmpObj.setPoisonTick = true;
            }
        });
        advHeal = [];
    }
    if (near.dist2 <= 0x136 && [0x3, 0x4, 0x5].includes(near.primaryIndex) && [0xa, 0x9, 0xc, 0xd, 0xf].includes(near.secondaryIndex) && near.skinIndex == 0x7 && near.reloads[near.primaryIndex]) {
        buyEquip(0x6, 0x0);
        if (near.skinIndex == 0x35 || near.reloads[0x35] == 0x1) {
            buyEquip(0x16, 0x0);
        }
    }
    if (textManager.stack.length) {
        let _0x5b5149 = 0x0;
        let _0x3c4da9 = 0x0;
        let _0x5d7756 = {
            x: null,
            y: null
        };
        let _0x445e48 = {
            x: null,
            y: null
        };
        textManager.stack.forEach(_0x2f9e4f => {
            if (_0x2f9e4f.value >= 0x0) {
                if (_0x5b5149 == 0x0) {
                    _0x5d7756 = {
                        x: _0x2f9e4f.x,
                        y: _0x2f9e4f.y
                    };
                }
                _0x5b5149 += Math.abs(_0x2f9e4f.value);
            } else {
                if (_0x3c4da9 == 0x0) {
                    _0x445e48 = {
                        x: _0x2f9e4f.x,
                        y: _0x2f9e4f.y
                    };
                }
                _0x3c4da9 += Math.abs(_0x2f9e4f.value);
            }
        });
        if (_0x3c4da9 > 0x0) {
            textManager.showText(_0x445e48.x, _0x445e48.y, Math.max(0x2d, Math.min(0x32, _0x3c4da9)), 0.18, 0x1f4, _0x3c4da9, "#8ecc51");
        }
        if (_0x5b5149 > 0x0) {
            textManager.showText(_0x5d7756.x, _0x5d7756.y, Math.max(0x2d, Math.min(0x32, _0x5b5149)), 0.18, 0x1f4, _0x5b5149, "#fff");
        }
        textManager.stack = [];
    }
    if (runAtNextTick.length) {
        runAtNextTick.forEach(_0x2ef10d => {
            checkProjectileHolder(..._0x2ef10d);
        });
        runAtNextTick = [];
    }
    for (let _0x824909 = 0x0; _0x824909 < _0x358272.length;) {
        tmpObj = findSID(players, _0x358272[_0x824909]);
        if (tmpObj) {
            if (!tmpObj.isTeam(player)) {
                enemy.push(tmpObj);
                if (tmpObj.dist2 <= items.weapons[tmpObj.primaryIndex == undefined ? 0x5 : tmpObj.primaryIndex].range + player.scale * 0x2) {
                    nears.push(tmpObj);
                }
            }
            if (document.getElementById("antitick").checked && !(tmpObj == player || tmpObj.team && tmpObj.team == player.team) && tmpObj.primaryIndex == 0x5 && tmpObj.primaryVariant >= 0x2 && tmpObj.dist2 >= 0xaf && tmpObj.dist2 <= 0x113) {
                if (near.skinIndex == 0x35) {
                    my.anti0Tick = 0x3;
                }
                my.anti0Tick = 0x2;
            }
            tmpObj.manageReload();
            if (tmpObj != player) {
                tmpObj.addDamageThreat(player);
            }
        }
        _0x824909 += 0xd;
    }
    if (player && player.alive) {
        if (enemy.length) {
            near = enemy.sort(function(_0x18a2b0, _0x1fe9d4) {
                return _0x18a2b0.dist2 - _0x1fe9d4.dist2;
            })[0x0];
        }
        nears.forEach(_0x3f9709 => {
            if (_0x3f9709.primaryIndex != undefined && _0x3f9709.reloads[_0x3f9709.primaryIndex] == 0x0 && _0x3f9709.primaryIndex != undefined && _0x3f9709.reloads[_0x3f9709.primaryIndex] == 0x0) {
                player.syncThreats++;
            }
        });
        if (game.tickQueue[game.tick]) {
            game.tickQueue[game.tick].forEach(_0x5bf7d4 => {
                _0x5bf7d4();
            });
            game.tickQueue[game.tick] = null;
        }
        players.forEach(_0x4ba605 => {
            if (!_0x4ba605.visible && player != _0x4ba605) {
                _0x4ba605.reloads = {
                    0x0: 0x0,
                    0x1: 0x0,
                    0x2: 0x0,
                    0x3: 0x0,
                    0x4: 0x0,
                    0x5: 0x0,
                    0x6: 0x0,
                    0x7: 0x0,
                    0x8: 0x0,
                    0x9: 0x0,
                    0xa: 0x0,
                    0xb: 0x0,
                    0xc: 0x0,
                    0xd: 0x0,
                    0xe: 0x0,
                    0xf: 0x0,
                    0x35: 0x0
                };
            }
            if (_0x4ba605.setBullTick) {
                _0x4ba605.bullTimer = 0x0;
            }
            if (_0x4ba605.setPoisonTick) {
                _0x4ba605.poisonTimer = 0x0;
            }
            _0x4ba605.updateTimer();
        });
        if (inGame) {
            if (enemy.length) {
                if (player.canEmpAnti) {
                    player.canEmpAnti = false;
                    if (near.dist2 <= 0x12c && !my.safePrimary(near) && !my.safeSecondary(near)) {
                        if (near.reloads[0x35] == 0x0) {
                            player.empAnti = true;
                            player.soldierAnti = false;
                        } else {
                            player.empAnti = false;
                            player.soldierAnti = true;
                        }
                    }
                }
                let _0x249500 = gameObjects.filter(_0x26bbd2 => _0x26bbd2.dmg && _0x26bbd2.active && _0x26bbd2.isTeamObject(player) && UTILS.getDist(_0x26bbd2, near, 0x0, 0x3) <= _0x26bbd2.scale + near.scale).sort(function(_0x2c9b2b, _0x1140ed) {
                    return UTILS.getDist(_0x2c9b2b, near, 0x0, 0x2) - UTILS.getDist(_0x1140ed, near, 0x0, 0x2);
                })[0x0];
                if (_0x249500 && near.dist2 <= items.weapons[player.weapons[0x0]].range + player.scale * 1.9) {
                    instaC.canSpikeTick = true;
                    instaC.syncHit = true;
                    if (document.getElementById("reverse").checked && player.weapons[0x1] == 0xf && player.reloads[0x35] == 0x0 && instaC.perfCheck(player, near)) {
                        instaC.revTick = true;
                    }
                }
                let _0x6e65eb = traps.spikeGay();
                let _0x150356 = [0x4, 0x5].includes(items.weapons.range);
                let _0x16c40d = gameObjects.filter(_0x268149 => _0x268149.dmg && _0x268149.active && !_0x268149.isTeamObject(player) && UTILS.getDist(_0x268149, player, 0x0, 0x3) < _0x268149.scale + player.scale).sort(function(_0x2b2708, _0x70b3da) {
                    return UTILS.getDist(_0x2b2708, player, 0x0, 0x2) - UTILS.getDist(_0x70b3da, player, 0x0, 0x2);
                })[0x0];
                if (_0x16c40d && !traps.inTrap && near.dist2 <= _0x150356 + near.scale * 1.8) {
                    player.soldierAnti = true;
                    showNotification("You: Spike Sync Blocked");
                    my.anti0Tick++;
                }
                if (_0x6e65eb) {
                    my.anti0Tick++;
                    player.soldierAnti = true;
                }
            }
            if ((player.checkCanInsta(true) >= 0x64 ? player.checkCanInsta(true) : player.checkCanInsta(false)) >= (player.weapons[0x1] == 0xa ? 0x5f : 0x64) && near.dist2 <= items.weapons[player.weapons[0x1] == 0xa ? player.weapons[0x1] : player.weapons[0x0]].range + near.scale * 1.8 && (instaC.wait || Math.floor(Math.random() * 0x5) == 0x0) && !instaC.isTrue && !my.waitHit && player.reloads[player.weapons[0x0]] == 0x0 && player.reloads[player.weapons[0x1]] == 0x0 && player.reloads[0x35] <= (player.weapons[0x1] == 0xa ? 0x0 : game.tickRate) && instaC.perfCheck(player, near)) {
                if (player.checkCanInsta(true) >= 0x64) {
                    instaC.nobull = !instaC.canSpikeTick;
                } else {
                    instaC.nobull = false;
                }
                instaC.can = true;
            } else {
                instaC.can = false;
            }
            if (macro.q) {
                place(0x0, getAttackDir());
            }
            if (macro.f) {
                place(0x4, getSafeDir());
            }
            if (macro.v) {
                place(0x2, getSafeDir());
            }
            if (macro.y) {
                place(0x5, getSafeDir());
            }
            if (macro.h) {
                place(player.getItemType(0x16), getSafeDir());
            }
            if (macro.n) {
                place(0x3, getSafeDir());
            }
            if (game.tick % 0x2 == 0x0) {
                if (mills.placeSpawnPads) {
                    for (let _0x1e682c = 0x0; _0x1e682c < Math.PI * 0x2; _0x1e682c += Math.PI / 0x2) {
                        checkPlace(player.getItemType(0x14), UTILS.getDirect(player.oldPos, player, 0x2, 0x2) + _0x1e682c);
                    }
                }
            }
            if (UTILS.getDist(my.oldXY, player, 0x0, 0x2) >= items.list[player.items[0x3]].scale * 1.8 + player.scale / 0x2) {
                if (millC.active) {
                    let _0x3fe218 = UTILS.getDirect(my.oldXY, player, 0x0, 0x2);
                    checkPlace(0x3, _0x3fe218 + 0x46 * Math.PI / 0xb4);
                    checkPlace(0x3, _0x3fe218 - 0x46 * Math.PI / 0xb4);
                    checkPlace(0x3, _0x3fe218);
                }
                my.oldXY = {
                    x: player.x2,
                    y: player.y2
                };
            }
            if (instaC.can) {
                instaC.changeType(player.weapons[0x1] == 0xa ? "rev" : instaC.nobull ? "nobull" : "normal");
            }
            if (instaC.canCounter) {
                instaC.canCounter = false;
                if (player.reloads[player.weapons[0x0]] == 0x0 && !instaC.isTrue) {
                    instaC.counterType();
                }
            }
            if (instaC.canSpikeTick) {
                instaC.canSpikeTick = false;
                if (instaC.revTick) {
                    instaC.revTick = false;
                    if ([0x1, 0x2, 0x3, 0x4, 0x5, 0x6].includes(player.weapons[0x0]) && player.reloads[player.weapons[0x1]] == 0x0 && !instaC.isTrue) {
                        instaC.changeType("rev");
                    }
                } else {
                    if ([0x1, 0x2, 0x3, 0x4, 0x5, 0x6].includes(player.weapons[0x0]) && player.reloads[player.weapons[0x0]] == 0x0 && !instaC.isTrue) {
                        instaC.spikeTickType();
                        if (instaC.syncHit) {}
                    }
                }
            }
            if (document.getElementById("doAvoidSpikes").checked) {
                let _0x16c99a = lastMoveDir;
                let _0x58fdd7 = {
                    x: player.x2 + (player.x2 - tracker.lastPos.x) * 1.3 + Math.cos(_0x16c99a) * 0x32,
                    y: player.y2 + (player.y2 - tracker.lastPos.y) * 1.3 + Math.sin(_0x16c99a) * 0x32
                };
                let _0x4e50b8 = gameObjects.filter(_0x2d49a6 => _0x2d49a6.dmg && Math.sqrt(Math.pow(_0x2d49a6.y - player.y, 0x2) + Math.pow(_0x2d49a6.x - player.x, 0x2)) < 0xfa && !_0x2d49a6.isTeamObject(player) && _0x2d49a6.active);
                _0x4e50b8.sort((_0xfc8365, _0x13464e) => Math.hypot(player.y2 - _0xfc8365.y, player.x2 - _0xfc8365.x) - Math.hypot(player.y2 - _0x13464e.y, player.x2 - _0x13464e.x));
                let _0x3bb44a = false;
                for (let _0x235b5a = 0x0; _0x235b5a < _0x4e50b8.length; _0x235b5a++) {
                    let _0x362d64 = _0x4e50b8[_0x235b5a];
                    if (Math.sqrt(Math.pow(_0x58fdd7.y - _0x362d64.y, 0x2) + Math.pow(_0x58fdd7.x - _0x362d64.x, 0x2)) < _0x362d64.scale + player.scale + 0x5) {
                        _0x3bb44a = Math.atan2(player.y2 - _0x362d64.y, player.x2 - _0x362d64.x);
                        tracker.draw3.active = true;
                        tracker.draw3.x = _0x362d64.x;
                        tracker.draw3.y = _0x362d64.y;
                        tracker.draw3.scale = _0x362d64.scale;
                        break;
                    }
                }
                if (_0x3bb44a !== false && !traps.inTrap) {
                    packet("e");
                    showNotification("You: Near Spike: Stopped");
                } else {
                    packet("9", tracker.moveDir, 0x1);
                    tracker.draw3.active = false;
                }
            } else {
                packet("9", tracker.moveDir, 0x1);
            }
            tracker.lastPos.x = player.x2;
            tracker.lastPos.y = player.y2;
            if (!clicks.middle && (clicks.left || clicks.right) && !instaC.isTrue) {
                if (player.weaponIndex != (clicks.right && player.weapons[0x1] == 0xa ? player.weapons[0x1] : player.weapons[0x0]) || player.buildIndex > -0x1) {
                    selectWeapon(clicks.right && player.weapons[0x1] == 0xa ? player.weapons[0x1] : player.weapons[0x0]);
                }
                if (player.reloads[clicks.right && player.weapons[0x1] == 0xa ? player.weapons[0x1] : player.weapons[0x0]] == 0x0 && !my.waitHit) {
                    sendAutoGather();
                    my.waitHit = 0x1;
                    game.tickBase(() => {
                        sendAutoGather();
                        my.waitHit = 0x0;
                    }, 0x1);
                }
            }
            if (traps.inTrap && !clicks.left && !clicks.right && !instaC.isTrue) {
                if (player.weaponIndex != (traps.notFast() ? player.weapons[0x1] : player.weapons[0x0]) || player.buildIndex > -0x1) {
                    selectWeapon(traps.notFast() ? player.weapons[0x1] : player.weapons[0x0]);
                }
                if (player.reloads[traps.notFast() ? player.weapons[0x1] : player.weapons[0x0]] == 0x0 && !my.waitHit) {
                    sendAutoGather();
                    my.waitHit = 0x1;
                    game.tickBase(() => {
                        sendAutoGather();
                        my.waitHit = 0x0;
                    }, 0x1);
                }
            }
            if (clicks.middle && !traps.inTrap && !instaC.isTrue && player.reloads[player.weapons[0x1]] == 0x0) {
                if (my.ageInsta && player.weapons[0x0] != 0x4 && player.weapons[0x1] == 0x9 && player.age >= 0x9 && enemy.length) {
                    instaC.bowMovement();
                } else {
                    instaC.rangeType();
                }
            }
            if (document.getElementById("doBullSpam").checked && !clicks.left && !clicks.right && !instaC.isTrue && near.dist2 <= items.weapons[player.weapons[0x0]].range + near.scale * 1.8 && !traps.inTrap) {
                buyEquip(0x15, 0x1);
                if (player.weaponIndex != player.weapons[0x0] || player.buildIndex > -0x1) {
                    selectWeapon(player.weapons[0x0]);
                }
                autos.bull = true;
                if (player.reloads[player.weapons[0x0]] == 0x0 && !my.waitHit) {
                    sendAutoGather();
                    my.waitHit = 0x1;
                    my.autoAim = true;
                    buyEquip(0x7, 0x0);
                    buyEquip(0x15, 0x1);
                    game.tickBase(() => {
                        buyEquip(0x6, 0x0);
                        buyEquip(0x15, 0x1);
                        sendAutoGather();
                        my.waitHit = 0x0;
                        my.autoAim = false;
                    }, 0x1);
                }
            } else {
                autos.bull = false;
            }
            if (!autos.bull && !instaC.isTrue && player.weapons[0x1] && !clicks.left && !clicks.right && !traps.inTrap) {
                if ((player.weapons[0x0] == 0x3 || player.weapons[0x0] == 0x4 || player.weapons[0x0] == 0x5) && (player.weapons[0x1] == 0xa || player.weapons[0x1] == 0xe)) {
                    if (player.reloads[player.weapons[0x0]] == 0x0 && player.reloads[player.weapons[0x1]] == 0x0) {
                        if (!my.reloaded) {
                            my.reloaded = true;
                            if (player.weaponIndex != player.weapons[0x1]) {
                                selectWeapon(player.weapons[0x1]);
                            }
                        }
                    } else {
                        my.reloaded = false;
                        if (player.reloads[player.weapons[0x0]] > 0x0) {
                            if (player.weaponIndex != player.weapons[0x0]) {
                                selectWeapon(player.weapons[0x0]);
                            }
                        } else if (player.reloads[player.weapons[0x0]] == 0x0 && player.reloads[player.weapons[0x1]] > 0x0 && player.weaponIndex != player.weapons[0x1]) {
                            selectWeapon(player.weapons[0x1]);
                        }
                    }
                } else {
                    if (player.reloads[player.weapons[0x0]] == 0x0 && player.reloads[player.weapons[0x1]] == 0x0) {
                        if (!my.reloaded) {
                            my.reloaded = true;
                            if (player.weaponIndex != player.weapons[0x0]) {
                                selectWeapon(player.weapons[0x0]);
                            }
                        }
                    } else {
                        my.reloaded = false;
                        if (player.reloads[player.weapons[0x1]] > 0x0) {
                            if (player.weaponIndex != player.weapons[0x1]) {
                                selectWeapon(player.weapons[0x1]);
                            }
                        } else if (player.reloads[player.weapons[0x1]] == 0x0 && player.reloads[player.weapons[0x0]] > 0x0 && player.weaponIndex != player.weapons[0x0]) {
                            selectWeapon(player.weapons[0x0]);
                        }
                    }
                }
            }
            if (!instaC.isTrue && document.getElementById("doAutoPlacer").checked) {
                traps.autoPlace();
            }
            if (!macro.q && !macro.f && !macro.v && !macro.h && !macro.n) {
                packet("D", getAttackDir());
            }
            let _0x3fa7df = player.shameCount > 0x0 && (game.tick - player.bullTick) % config.serverUpdateRate === 0x0 && player.skinIndex != 0x2d || my.reSync;

            function _0x3e0c92(_0x3bc66c) {
                if (_0x3bc66c == "normal") {
                    if (my.anti0Tick > 0x0) {
                        buyEquip(0x6, 0x0);
                    } else if (_0x3fa7df) {
                        buyEquip(0x7, 0x0);
                    } else {
                        if (turretEmp > 0x0 || doEmpAntiInsta) {
                            buyEquip(0x16, 0x0);
                        } else if (player.y2 >= config.mapScale / 0x2 - config.riverWidth / 0x2 && player.y2 <= config.mapScale / 0x2 + config.riverWidth / 0x2) {
                            buyEquip(0x1f, 0x0);
                        } else if (enemy.length) {
                            if (near.dist2 <= items.weapons[near.primaryIndex ? near.primaryIndex : 0x5].range + player.scale * 0x3) {
                                if (near.primaryIndex != undefined && near.reloads[near.primaryIndex] == 0x0 && near.secondaryIndex != undefined && near.reloads[near.secondaryIndex] == 0x0 && player.reloads[player.weapons[0x0]] <= game.tickRate && player.reloads[player.weapons[0x1]] == 0x0 && player.weapons[0x0] != 0x7 && player.weapons[0x0] != 0x8 && near.primaryIndex != 0x7 && near.primaryIndex != 0x8) {
                                    buyEquip(0xb, 0x0);
                                } else if ((near.primaryIndex == 0x0 || near.primaryIndex == 0x6 || near.primaryIndex == 0x7 || near.primaryIndex == 0x8) && (near.secondaryIndex == 0x9 || near.secondaryIndex == 0xa || near.secondaryIndex == 0xb || near.secondaryIndex == 0xe)) {
                                    buyEquip(doEmpAntiInsta ? 0x16 : 0x1a, 0x0);
                                } else {
                                    buyEquip(0x6, 0x0);
                                }
                            } else {
                                biomeGear();
                            }
                        } else {
                            biomeGear();
                        }
                    }
                } else {
                    if (_0x3bc66c == "click") {
                        if (my.anti0Tick > 0x0) {
                            buyEquip(0x6, 0x0);
                        } else {
                            if (_0x3fa7df) {
                                buyEquip(0x7, 0x0);
                            } else {
                                if (clicks.left && player.reloads[player.weapons[0x0]] == 0x0) {
                                    buyEquip(document.getElementById("doAutoGrind").checked ? 0x28 : 0x7, 0x0);
                                } else if (clicks.right && player.reloads[player.weapons[0x1] == 0xa ? player.weapons[0x1] : player.weapons[0x0]] == 0x0) {
                                    buyEquip(0x28, 0x0);
                                } else {
                                    if (turretEmp > 0x0 || doEmpAntiInsta) {
                                        buyEquip(0x16, 0x0);
                                    } else if (player.y2 >= config.mapScale / 0x2 - config.riverWidth / 0x2 && player.y2 <= config.mapScale / 0x2 + config.riverWidth / 0x2) {
                                        buyEquip(0x1f, 0x0);
                                    } else if (near.dist2 <= 0x1f4) {
                                        if ((near.primaryIndex == 0x0 || near.primaryIndex == 0x6 || near.primaryIndex == 0x7 || near.primaryIndex == 0x8) && (near.secondaryIndex == 0x9 || near.secondaryIndex == 0xa || near.secondaryIndex == 0xb || near.secondaryIndex == 0xe)) {
                                            buyEquip(0x1a, 0x0);
                                        } else {
                                            buyEquip(0x6, 0x0);
                                        }
                                    } else {
                                        biomeGear();
                                    }
                                }
                            }
                        }
                    } else if (_0x3bc66c == "trap") {
                        if (my.anti0Tick > 0x0) {
                            buyEquip(0x6, 0x0);
                        } else if (_0x3fa7df) {
                            buyEquip(0x7, 0x0);
                        } else if (traps.info.health > items.weapons[player.weapons[0x0]].dmg && player.reloads[player.weapons[0x1] == 0xa ? player.weapons[0x1] : player.weapons[0x0]] == 0x0) {
                            buyEquip(0x28, 0x0);
                        } else {
                            if (turretEmp > 0x0 || doEmpAntiInsta) {
                                buyEquip(0x16, 0x0);
                            } else if (near.dist2 <= 0x12c) {
                                if ((near.primaryIndex == 0x0 || near.primaryIndex == 0x6 || near.primaryIndex == 0x7 || near.primaryIndex == 0x8) && (near.secondaryIndex == 0x9 || near.secondaryIndex == 0xa || near.secondaryIndex == 0xb || near.secondaryIndex == 0xe) || near.primaryIndex == 0x5 && near.dist2 >= 0xaf) {
                                    buyEquip(0x1a, 0x0);
                                } else {
                                    buyEquip(0x6, 0x0);
                                }
                            } else {
                                biomeGear();
                            }
                        }
                    }
                }
                if (_0x3bc66c == "normal") {
                    if (player.y2 >= config.mapScale / 0x2 - config.riverWidth / 0x2 && player.y2 <= config.mapScale / 0x2 + config.riverWidth / 0x2) {
                        buyEquip(0xb, 0x1);
                    } else if (enemy.length) {
                        if (near.dist2 <= items.weapons[near.primaryIndex ? near.primaryIndex : 0x5].range + player.scale * 0x3) {
                            if (near.primaryIndex != undefined && near.reloads[near.primaryIndex] == 0x0 && near.secondaryIndex != undefined && near.reloads[near.secondaryIndex] == 0x0 && player.reloads[player.weapons[0x0]] <= game.tickRate && player.reloads[player.weapons[0x1]] == 0x0 && player.weapons[0x0] != 0x7 && player.weapons[0x0] != 0x8 && near.primaryIndex != 0x7 && near.primaryIndex != 0x8) {
                                buyEquip(0x15, 0x1);
                            } else if (near.antiBull > 0x0) {
                                buyEquip(0x15, 0x1);
                            } else if ((game.tick - player.bullTick) % config.serverUpdateRate === 0x0) {
                                buyEquip(0xd, 0x1);
                            } else {
                                buyEquip(0x15, 0x1);
                            }
                        } else {
                            buyEquip(0xb, 0x1);
                        }
                    } else {
                        buyEquip(0xb, 0x1);
                    }
                } else {
                    if (_0x3bc66c == "click") {
                        if (near.antiBull > 0x0) {
                            buyEquip(0x15, 0x1);
                        } else {
                            if (clicks.left && player.reloads[player.weapons[0x0]] == 0x0) {
                                buyEquip(near.dist2 <= 0x1f4 ? 0x12 : 0x15, 0x1);
                            } else if (clicks.right && player.reloads[player.weapons[0x0]] == 0x0) {
                                buyEquip(near.dist2 <= 0x1f4 ? 0x12 : 0xb, 0x1);
                            } else if ((game.tick - player.bullTick) % config.serverUpdateRate === 0x0) {
                                buyEquip(near.dist2 <= 0x1f4 ? 0xd : 0xb, 0x1);
                            } else {
                                buyEquip(near.dist2 <= 0x258 ? 0x12 : 0x15, 0x1);
                            }
                        }
                    } else if (_0x3bc66c == "trap") {
                        if (near.antiBull > 0x0) {
                            buyEquip(0x15, 0x1);
                        } else if (traps.info.health > items.weapons[player.weapons[0x0]].dmg && player.reloads[player.weapons[0x1] == 0xa ? player.weapons[0x1] : player.weapons[0x0]] == 0x0) {
                            buyEquip(near.dist2 <= 0x113 ? 0x12 : 0x15, 0x1);
                        } else if (near.dist2 <= 0x12c) {
                            if (instaC.wait) {
                                buyEquip(0x15, 0x1);
                            } else if ((game.tick - player.bullTick) % config.serverUpdateRate === 0x0) {
                                buyEquip(0xd, 0x1);
                            } else {
                                buyEquip(0x15, 0x1);
                            }
                        } else {
                            buyEquip(0xb, 0x1);
                        }
                    }
                }
            }
            if (storeMenu.style.display != "block" && !instaC.isTrue && !instaC.ticking) {
                if (clicks.left || clicks.right) {
                    _0x3e0c92("click");
                } else if (traps.inTrap) {
                    _0x3e0c92("trap");
                } else {
                    _0x3e0c92("normal");
                }
            }
            if (document.getElementById("autoPush").checked && enemy.length && !traps.inTrap && !instaC.ticking && tmpObj.skinIndex != 0x2d) {
                autoPush();
            } else if (my.autoPush) {
                my.autoPush = false;
                packet("9", lastMoveDir || undefined, 0x1);
            }
            if (!my.autoPush && pathFind.active) {
                Pathfinder();
            }
            if (instaC.ticking) {
                instaC.ticking = false;
            }
            if (instaC.syncHit) {
                instaC.syncHit = false;
            }
            if (doEmpAntiInsta) {
                doEmpAntiInsta = false;
            }
            if (player.empAnti) {
                player.empAnti = false;
            }
            if (player.soldierAnti) {
                player.soldierAnti = false;
            }
            if (my.anti0Tick > 0x0) {
                my.anti0Tick--;
            }
            if (traps.replaced) {
                traps.replaced = false;
            }
            if (traps.antiTrapped) {
                traps.antiTrapped = false;
            }
        }
    }
}

function updateLeaderboard(_0x3e8c5f) {
    lastLeaderboardData = _0x3e8c5f;
    let _0x7b1cc3 = 0x1;
    let _0x3d0b81 = "";
    for (let _0x376df4 = 0x0; _0x376df4 < _0x3e8c5f.length; _0x376df4 += 0x3) {
        const _0x38d317 = _0x3e8c5f[_0x376df4 + 0x1] !== "" ? _0x3e8c5f[_0x376df4 + 0x1] : "unknown";
        const _0x5f1fb4 = _0x3e8c5f[_0x376df4] === playerSID;
        const _0x150a17 = '\n            <div class="leaderHolder">\n                <div class="leaderboardItem" style="color: ' + (_0x5f1fb4 ? "#8ecc51" : "rgba(255, 255, 255, 0.6)") + '">\n                    ' + _0x7b1cc3 + ". " + _0x38d317 + '\n                </div>\n                <div class="leaderScore">\n                    ' + (UTILS.sFormat(_0x3e8c5f[_0x376df4 + 0x2]) || "0") + "\n                </div>\n            </div>\n        ";
        _0x3d0b81 += _0x150a17;
        _0x7b1cc3++;
    }
    smoothUpdate(leaderboardData, _0x3d0b81, 0xa);
}

function smoothUpdate(_0x42a3c9, _0x379531, _0x53bce9) {
    const _0x127940 = _0x42a3c9.innerHTML;
    if (!_0x127940) {
        _0x42a3c9.innerHTML = _0x379531;
        return;
    }
    const _0x39cfa9 = document.createElement("div");
    _0x39cfa9.innerHTML = _0x379531;
    const _0x3e2176 = Array.from(_0x42a3c9.children);
    const _0x243cfe = Array.from(_0x39cfa9.children);
    const _0x4706ce = Math.max(_0x3e2176.length, _0x243cfe.length);
    for (let _0x3fdf2a = 0x0; _0x3fdf2a < _0x4706ce; _0x3fdf2a++) {
        if (_0x3fdf2a < _0x243cfe.length) {
            if (_0x3fdf2a < _0x3e2176.length) {
                const _0x164896 = _0x3e2176[_0x3fdf2a];
                const _0x218e82 = _0x243cfe[_0x3fdf2a];
                if (_0x164896.innerHTML !== _0x218e82.innerHTML) {
                    _0x164896.innerHTML = _0x218e82.innerHTML;
                }
            } else {
                _0x42a3c9.appendChild(_0x243cfe[_0x3fdf2a]);
            }
        } else if (_0x3fdf2a < _0x3e2176.length) {
            _0x42a3c9.removeChild(_0x3e2176[_0x3fdf2a]);
        }
    }
}

function loadAI(_0x5ec3f0) {
    for (let _0x1c8178 = 0x0; _0x1c8178 < ais.length; ++_0x1c8178) {
        ais[_0x1c8178].forcePos = !ais[_0x1c8178].visible;
        ais[_0x1c8178].visible = false;
    }
    if (_0x5ec3f0) {
        let _0x5c417b = performance.now();
        for (let _0x5c1a2b = 0x0; _0x5c1a2b < _0x5ec3f0.length;) {
            tmpObj = findSID(ais, _0x5ec3f0[_0x5c1a2b]);
            if (tmpObj) {
                tmpObj.index = _0x5ec3f0[_0x5c1a2b + 0x1];
                tmpObj.t1 = tmpObj.t2 === undefined ? _0x5c417b : tmpObj.t2;
                tmpObj.t2 = _0x5c417b;
                tmpObj.x1 = tmpObj.x;
                tmpObj.y1 = tmpObj.y;
                tmpObj.x2 = _0x5ec3f0[_0x5c1a2b + 0x2];
                tmpObj.y2 = _0x5ec3f0[_0x5c1a2b + 0x3];
                tmpObj.d1 = tmpObj.d2 === undefined ? _0x5ec3f0[_0x5c1a2b + 0x4] : tmpObj.d2;
                tmpObj.d2 = _0x5ec3f0[_0x5c1a2b + 0x4];
                tmpObj.health = _0x5ec3f0[_0x5c1a2b + 0x5];
                tmpObj.dt = 0x0;
                tmpObj.visible = true;
            } else {
                tmpObj = aiManager.spawn(_0x5ec3f0[_0x5c1a2b + 0x2], _0x5ec3f0[_0x5c1a2b + 0x3], _0x5ec3f0[_0x5c1a2b + 0x4], _0x5ec3f0[_0x5c1a2b + 0x1]);
                tmpObj.x2 = tmpObj.x;
                tmpObj.y2 = tmpObj.y;
                tmpObj.d2 = tmpObj.dir;
                tmpObj.health = _0x5ec3f0[_0x5c1a2b + 0x5];
                if (!aiManager.aiTypes[_0x5ec3f0[_0x5c1a2b + 0x1]].name) {
                    tmpObj.name = config.cowNames[_0x5ec3f0[_0x5c1a2b + 0x6]];
                }
                tmpObj.forcePos = true;
                tmpObj.sid = _0x5ec3f0[_0x5c1a2b];
                tmpObj.visible = true;
            }
            _0x5c1a2b += 0x7;
        }
    }
}

function animateAI(_0xa5b8c8) {
    tmpObj = findSID(ais, _0xa5b8c8);
    if (tmpObj) {
        tmpObj.startAnim();
    }
}
let hconfig = {
    reverse: false,
    onetick: false,
    spiketick: false,
    antibulldet: false
};

function teamDetect(_0x53ffd5) {
    for (let _0x5c5283 = 0x0; _0x5c5283 < alliancePlayers.length; _0x5c5283 += 0x2) {
        if (_0x53ffd5 == alliancePlayers[_0x5c5283]) {
            return true;
        }
    }
}

function isEnemy(_0x427970) {
    return !!(_0x427970.sid != player.sid && (player.team ? _0x427970.team != player.team : !player.team));
}
let hittedObj = [];

function gatherAnimation(_0x5706dc, _0x927346, _0x2cb30b) {
    tmpObj = findSID(players, _0x5706dc);
    if (tmpObj) {
        tmpObj.startAnim(_0x927346, _0x2cb30b);
        tmpObj.gatherIndex = _0x2cb30b;
        tmpObj.gathering = 0x1;
        if (_0x927346) {
            let _0x4e6cb9 = objectManager.hitObj;
            objectManager.hitObj = [];
            game.tickBase(() => {
                tmpObj = findSID(players, _0x5706dc);
                let _0x166a3a = items.weapons[_0x2cb30b].dmg * config.weaponVariants[tmpObj[(_0x2cb30b < 0x9 ? "prima" : "seconda") + "ryVariant"]].val * (items.weapons[_0x2cb30b].sDmg || 0x1) * (tmpObj.skinIndex == 0x28 ? 3.3 : 0x1);
                _0x4e6cb9.forEach(_0x13467d => {
                    _0x13467d.health -= _0x166a3a;
                });
            }, 0x1);
            if (near.dist2 <= 0xbe && !teamDetect(tmpObj) && UTILS.getAngleDist(tmpDir, tmpObj.dir) <= config.gatherAngle) {
                if (tmpObj.weaponIndex == 0xa && (tmpObj.skinIndex == 0x35 || tmpObj.skinIndex == 0x7) && _0x5706dc != player.sid) {
                    showNotification("You: Reverse Detected");
                    hconfig.reverse = true;
                } else {
                    hconfig.reverse = false;
                }
            }
            if (near.primaryIndex == 0x5 && near.primaryVariant >= 0x2 && near.dist2 >= 0xa0 && near.dist2 < 0x104 && near.skinIndex == 0x35) {
                showNotification("You: 1 Tick Blocked");
                buyEquip(0x6, 0x0);
            }
            let _0x16b415 = UTILS.getDistance(tmpObj.x, tmpObj.y, player.x, player.y) - player.scale * 1.8;
            if (_0x16b415 <= items.weapons[_0x2cb30b].range) {
                tmpDir = UTILS.getDirection(player.x, player.y, tmpObj.x, tmpObj.y);
                if (UTILS.getAngleDist(tmpDir, tmpObj.dir) <= config.gatherAngle) {
                    if (tmpObj.skinIndex == 0xb && player.skinIndex == 0x7) {
                        if (_0x5706dc != player.sid) {
                            hconfig.antibulldet = true;
                            buyEquip(0x6, 0x0);
                            buyEquip(0x15, 0x1);
                            showNotification("You: PAB Detected");
                        }
                    } else {
                        hconfig.antibulldet = false;
                    }
                }
            }
        }
    }
}

function wiggleGameObject(_0x49f5d8, _0x5b7717) {
    tmpObj = findSID(gameObjects, _0x5b7717);
    if (tmpObj) {
        tmpObj.xWiggle += config.gatherWiggle * Math.cos(_0x49f5d8);
        tmpObj.yWiggle += config.gatherWiggle * Math.sin(_0x49f5d8);
        if (tmpObj.health) {
            objectManager.hitObj.push(tmpObj);
        }
    }
}

function shootTurret(_0x2230c5, _0x455a9c) {
    tmpObj = findSID(gameObjects, _0x2230c5);
    if (tmpObj) {
        tmpObj.dir = _0x455a9c;
        tmpObj.xWiggle += config.gatherWiggle * Math.cos(_0x455a9c + Math.PI);
        tmpObj.yWiggle += config.gatherWiggle * Math.sin(_0x455a9c + Math.PI);
        tmpObj.shootted = 0x1;
    }
}

function updatePlayerValue(_0x40f712, _0x152dde, _0x324559) {
    if (player) {
        player[_0x40f712] = _0x152dde;
        if (_0x40f712 == "points") {
            autoBuy.hat();
            autoBuy.acc();
        } else if (_0x40f712 == "kills") {
            sendChat("Stop being Bad ez");
        }
    }
    if (_0x324559) {
        updateStatusDisplay();
    }
}
if (player) {
    ageBarBody.style.width = (config.idk ? "0" : player.XP / player.maxXP * 0x64) + "%";
    for (var i = 0x0; i < items.list.length; ++i) {
        var tmpI = items.weapons.length + i;
        document.getElementById("actionBarItem" + tmpI).style.display = (config.idk ? player.firstItems : player.items).indexOf(items.list[i].id) >= 0x0 ? "inline-block" : "none";
    }
}

function updateItems(_0x4a59ea, _0xa1b7e) {
    if (_0x4a59ea) {
        if (_0xa1b7e) {
            player.weapons = _0x4a59ea;
            player.primaryIndex = player.weapons[0x0];
            player.secondaryIndex = player.weapons[0x1];
            if (!instaC.isTrue) {
                selectWeapon(player.weapons[0x0]);
            }
        } else {
            player.items = _0x4a59ea;
        }
    }
    for (let _0x879c44 = 0x0; _0x879c44 < items.list.length; _0x879c44++) {
        let _0x362a7e = items.weapons.length + _0x879c44;
        document.getElementById("actionBarItem" + _0x362a7e).style.display = player.items.indexOf(items.list[_0x879c44].id) >= 0x0 ? "inline-block" : "none";
    }
    for (let _0x3173ab = 0x0; _0x3173ab < items.weapons.length; _0x3173ab++) {
        document.getElementById("actionBarItem" + _0x3173ab).style.display = player.weapons[items.weapons[_0x3173ab].type] == items.weapons[_0x3173ab].id ? "inline-block" : "none";
    }
    let _0x4276f5 = player.weapons[0x0] == 0x3 && player.weapons[0x1] == 0xf;
    if (_0x4276f5) {
        document.getElementById("actionBarItem3").style.display = "none";
        document.getElementById("actionBarItem4").style.display = "inline-block";
    }
}

function addProjectile(_0x2ff855, _0x52abf9, _0x48607c, _0x44e0d9, _0x5ac8d9, _0x48375a, _0x4720e0, _0x3a0cc4) {
    projectileManager.addProjectile(_0x2ff855, _0x52abf9, _0x48607c, _0x44e0d9, _0x5ac8d9, _0x48375a, null, null, _0x4720e0, inWindow).sid = _0x3a0cc4;
    runAtNextTick.push(Array.prototype.slice.call(arguments));
}

function remProjectile(_0x24a7f4, _0x1bb560) {
    for (let _0x3bab48 = 0x0; _0x3bab48 < projectiles.length; ++_0x3bab48) {
        if (projectiles[_0x3bab48].sid == _0x24a7f4) {
            projectiles[_0x3bab48].range = _0x1bb560;
            let _0x5074f4 = objectManager.hitObj;
            objectManager.hitObj = [];
            game.tickBase(() => {
                let _0x541145 = projectiles[_0x3bab48].dmg;
                _0x5074f4.forEach(_0x815c27 => {
                    if (_0x815c27.projDmg) {
                        _0x815c27.health -= _0x541145;
                    }
                });
            }, 0x1);
        }
    }
}

function allianceNotification(_0x261c68, _0xf6bdf2) {}

function setPlayerTeam(_0x50a3eb, _0xe9f48d) {
    if (player) {
        player.team = _0x50a3eb;
        player.isOwner = _0xe9f48d;
        if (_0x50a3eb == null) {
            alliancePlayers = [];
        }
    }
}

function setAlliancePlayers(_0x5506d3) {
    alliancePlayers = _0x5506d3;
}

function updateStoreItems(_0x5ec87f, _0x14a639, _0x2a6733) {
    if (_0x2a6733) {
        if (!_0x5ec87f) {
            player.tails[_0x14a639] = 0x1;
        } else {
            player.latestTail = _0x14a639;
        }
    } else if (!_0x5ec87f) {
        player.skins[_0x14a639] = 0x1;
        if (_0x14a639 == 0x7) {
            my.reSync = true;
        }
    } else {
        player.latestSkin = _0x14a639;
    }
}

function receiveChat(_0x2ddda9, _0x47855f) {
    let _0x5a8ccf = findSID(players, _0x2ddda9);
    if (_0x5a8ccf) {
        allChats.push(new addCh(_0x5a8ccf.x, _0x5a8ccf.y, _0x47855f, _0x5a8ccf));
    }
}

function updateMinimap(_0xceb058) {
    minimapData = _0xceb058;
}
var TickDmg = 0x0;
var TickHeal = 0x0;
var TickDmgX = 0x0;
var TickHealX = 0x0;
var TickDmgY = 0x0;
var TickHealY = 0x0;
var DmgPerTick = [];
var HealPerTick = [];
var DmgXPerTick = [];
var HealXPerTick = [];
var DmgYPerTick = [];
var HealYPerTick = [];

function showText(_0x46ff6f, _0x3eeeb8, _0x4b3b59, _0x5148d0) {
    if (config.idk) {
        HealYPerTick.push(_0x3eeeb8);
        HealXPerTick.push(_0x46ff6f);
        if (_0x4b3b59 >= 0x0) {
            DmgPerTick.push(_0x4b3b59);
            DmgYPerTick.push(_0x3eeeb8);
            DmgXPerTick.push(_0x46ff6f);
        } else {
            HealPerTick.push(_0x4b3b59);
            HealYPerTick.push(_0x3eeeb8);
            HealXPerTick.push(_0x46ff6f);
        }
        setTimeout(() => {
            for (let _0x4f3d77 = 0x0; _0x4f3d77 < DmgPerTick.length; _0x4f3d77++) {
                TickDmg = TickDmg + DmgPerTick[_0x4f3d77];
                TickDmgX = TickDmgX + DmgXPerTick[_0x4f3d77];
                if (_0x4f3d77 == DmgPerTick.length - 0x1) {
                    TickDmgX = TickDmgX / DmgPerTick.length + 0x1;
                }
                TickDmgY = TickDmgY + DmgYPerTick[_0x4f3d77];
                if (_0x4f3d77 == DmgPerTick.length - 0x1) {
                    TickDmgY = TickDmgY / DmgPerTick.length + 0x1;
                }
            }
            for (let _0x5cd88a = 0x0; _0x5cd88a < HealPerTick.length; _0x5cd88a++) {
                TickHeal = TickHeal + HealPerTick[_0x5cd88a];
                TickHealX = TickHealX + HealXPerTick[_0x5cd88a];
                if (_0x5cd88a == HealPerTick.length - 0x1) {
                    TickHealX = TickHealX / HealPerTick.length + 0x1;
                }
                TickHealY = TickHealY + HealYPerTick[_0x5cd88a];
                if (_0x5cd88a == HealPerTick.length - 0x1) {
                    TickHealY = TickHealY / HealPerTick.length + 0x1;
                }
            }
            if (TickHeal < 0x0 && TickHeal != 0x0) {
                textManager.showText(TickHealX, TickHealY, 0x41, 0.18, 0x1f4, "" + Math.abs(TickHeal), "#8ecc51");
            }
            if (TickDmg > 0x0) {
                textManager.showText(TickDmgX, TickDmgY, 0x41, 0.18, 0x1f4, "" + Math.abs(TickDmg), "#fff");
            }
            TickDmg = 0x0;
            TickHeal = 0x0;
            TickDmgX = 0x0;
            TickHealX = 0x0;
            TickDmgY = 0x0;
            TickHealY = 0x0;
            DmgPerTick = [];
            HealPerTick = [];
            DmgXPerTick = [];
            HealXPerTick = [];
            DmgYPerTick = [];
            HealYPerTick = [];
        }, 0x1);
    } else {
        textManager.showText(_0x46ff6f, _0x3eeeb8, 0x41, 0.18, 0x1f4, Math.abs(_0x4b3b59), _0x4b3b59 >= 0x0 ? "#fff" : "#8ecc51");
    }
}

function renderLeaf(_0x364631, _0x35c75f, _0x214a15, _0x135b1a, _0x54f7ec) {
    let _0x560b03 = _0x364631 + _0x214a15 * Math.cos(_0x135b1a);
    let _0x505460 = _0x35c75f + _0x214a15 * Math.sin(_0x135b1a);
    let _0x173597 = _0x214a15 * 0.4;
    _0x54f7ec.moveTo(_0x364631, _0x35c75f);
    _0x54f7ec.beginPath();
    _0x54f7ec.quadraticCurveTo((_0x364631 + _0x560b03) / 0x2 + _0x173597 * Math.cos(_0x135b1a + Math.PI / 0x2), (_0x35c75f + _0x505460) / 0x2 + _0x173597 * Math.sin(_0x135b1a + Math.PI / 0x2), _0x560b03, _0x505460);
    _0x54f7ec.quadraticCurveTo((_0x364631 + _0x560b03) / 0x2 - _0x173597 * Math.cos(_0x135b1a + Math.PI / 0x2), (_0x35c75f + _0x505460) / 0x2 - _0x173597 * Math.sin(_0x135b1a + Math.PI / 0x2), _0x364631, _0x35c75f);
    _0x54f7ec.closePath();
    _0x54f7ec.fill();
    _0x54f7ec.stroke();
}

function renderHealthCircle(_0x46c182, _0x38358a, _0x149036, _0x44954a, _0x15d8f6, _0x3443aa) {
    _0x44954a = _0x44954a || mainContext;
    _0x44954a.beginPath();
    _0x44954a.arc(_0x46c182, _0x38358a, _0x149036, 0x0, 0x2 * Math.PI);
    if (!_0x3443aa) {
        _0x44954a.fill();
    }
    if (!_0x15d8f6) {
        _0x44954a.stroke();
    }
}

function renderStar(_0x1a73cc, _0x2e1f8e, _0x4939b9, _0x269271) {
    let _0x2ee22f = Math.PI / 0x2 * 0x3;
    let _0x3894f3;
    let _0x294d01;
    let _0x12f8ce = Math.PI / _0x2e1f8e;
    _0x1a73cc.beginPath();
    _0x1a73cc.moveTo(0x0, -_0x4939b9);
    for (let _0xf2dfae = 0x0; _0xf2dfae < _0x2e1f8e; _0xf2dfae++) {
        _0x3894f3 = Math.cos(_0x2ee22f) * _0x4939b9;
        _0x294d01 = Math.sin(_0x2ee22f) * _0x4939b9;
        _0x1a73cc.lineTo(_0x3894f3, _0x294d01);
        _0x2ee22f += _0x12f8ce;
        _0x3894f3 = Math.cos(_0x2ee22f) * _0x269271;
        _0x294d01 = Math.sin(_0x2ee22f) * _0x269271;
        _0x1a73cc.lineTo(_0x3894f3, _0x294d01);
        _0x2ee22f += _0x12f8ce;
    }
    _0x1a73cc.lineTo(0x0, -_0x4939b9);
    _0x1a73cc.closePath();
}

function renderHealthStar(_0x45dd6e, _0x1184f2, _0x4bbadc, _0x4911d2) {
    let _0x51199f = Math.PI / 0x2 * 0x3;
    let _0x5aa455;
    let _0x12707c;
    let _0xdddebe = Math.PI / _0x1184f2;
    _0x45dd6e.beginPath();
    _0x45dd6e.moveTo(0x0, -_0x4bbadc);
    for (let _0x584a06 = 0x0; _0x584a06 < _0x1184f2; _0x584a06++) {
        _0x5aa455 = Math.cos(_0x51199f) * _0x4bbadc;
        _0x12707c = Math.sin(_0x51199f) * _0x4bbadc;
        _0x45dd6e.lineTo(_0x5aa455, _0x12707c);
        _0x51199f += _0xdddebe;
        _0x5aa455 = Math.cos(_0x51199f) * _0x4911d2;
        _0x12707c = Math.sin(_0x51199f) * _0x4911d2;
        _0x45dd6e.lineTo(_0x5aa455, _0x12707c);
        _0x51199f += _0xdddebe;
    }
    _0x45dd6e.lineTo(0x0, -_0x4bbadc);
    _0x45dd6e.closePath();
}

function renderRect(_0x2da2e5, _0x27c94e, _0x37f356, _0xaf57c3, _0x123ee8, _0x1fbb1e, _0x4b669) {
    if (!_0x4b669) {
        _0x123ee8.fillRect(_0x2da2e5 - _0x37f356 / 0x2, _0x27c94e - _0xaf57c3 / 0x2, _0x37f356, _0xaf57c3);
    }
    if (!_0x1fbb1e) {
        _0x123ee8.strokeRect(_0x2da2e5 - _0x37f356 / 0x2, _0x27c94e - _0xaf57c3 / 0x2, _0x37f356, _0xaf57c3);
    }
}

function renderHealthRect(_0x140e3c, _0x472fb9, _0x5e829c, _0xdc387c, _0x39c1f5, _0x6ad1b, _0x4d6551) {
    if (!_0x4d6551) {
        _0x39c1f5.fillRect(_0x140e3c - _0x5e829c / 0x2, _0x472fb9 - _0xdc387c / 0x2, _0x5e829c, _0xdc387c);
    }
    if (!_0x6ad1b) {
        _0x39c1f5.strokeRect(_0x140e3c - _0x5e829c / 0x2, _0x472fb9 - _0xdc387c / 0x2, _0x5e829c, _0xdc387c);
    }
}

function renderRectCircle(_0x52e9bd, _0x14b8f9, _0x5de125, _0x34179f, _0x403648, _0x5f3ed2, _0x59ac71, _0x15a307) {
    _0x5f3ed2.save();
    _0x5f3ed2.translate(_0x52e9bd, _0x14b8f9);
    _0x403648 = Math.ceil(_0x403648 / 0x2);
    for (let _0x2ee68a = 0x0; _0x2ee68a < _0x403648; _0x2ee68a++) {
        renderRect(0x0, 0x0, _0x5de125 * 0x2, _0x34179f, _0x5f3ed2, _0x59ac71, _0x15a307);
        _0x5f3ed2.rotate(Math.PI / _0x403648);
    }
    _0x5f3ed2.restore();
}

function renderBlob(_0x2d296d, _0x1a11e8, _0x2e42a4, _0x14d89e) {
    let _0x1144f9 = Math.PI / 0x2 * 0x3;
    let _0x5a72c2 = Math.PI / _0x1a11e8;
    let _0x220383;
    _0x2d296d.beginPath();
    _0x2d296d.moveTo(0x0, -_0x14d89e);
    for (let _0x151d1b = 0x0; _0x151d1b < _0x1a11e8; _0x151d1b++) {
        _0x220383 = UTILS.randInt(_0x2e42a4 + 0.9, _0x2e42a4 * 1.2);
        _0x2d296d.quadraticCurveTo(Math.cos(_0x1144f9 + _0x5a72c2) * _0x220383, Math.sin(_0x1144f9 + _0x5a72c2) * _0x220383, Math.cos(_0x1144f9 + _0x5a72c2 * 0x2) * _0x14d89e, Math.sin(_0x1144f9 + _0x5a72c2 * 0x2) * _0x14d89e);
        _0x1144f9 += _0x5a72c2 * 0x2;
    }
    _0x2d296d.lineTo(0x0, -_0x14d89e);
    _0x2d296d.closePath();
}

function renderTriangle(_0x2d1ba9, _0x319781) {
    _0x319781 = _0x319781 || mainContext;
    let _0x3ac181 = _0x2d1ba9 * (Math.sqrt(0x3) / 0x2);
    _0x319781.beginPath();
    _0x319781.moveTo(0x0, -_0x3ac181 / 0x2);
    _0x319781.lineTo(-_0x2d1ba9 / 0x2, _0x3ac181 / 0x2);
    _0x319781.lineTo(_0x2d1ba9 / 0x2, _0x3ac181 / 0x2);
    _0x319781.lineTo(0x0, -_0x3ac181 / 0x2);
    _0x319781.fill();
    _0x319781.closePath();
}

function prepareMenuBackground() {
    var _0x104722 = config.mapScale / 0x2;
    objectManager.add(0x0, _0x104722, _0x104722 + 0xc8, 0x0, config.treeScales[0x3], 0x0);
    objectManager.add(0x1, _0x104722, _0x104722 - 0x1e0, 0x0, config.treeScales[0x3], 0x0);
    objectManager.add(0x2, _0x104722 + 0x12c, _0x104722 + 0x1c2, 0x0, config.treeScales[0x3], 0x0);
    objectManager.add(0x3, _0x104722 - 0x3b6, _0x104722 - 0x82, 0x0, config.treeScales[0x2], 0x0);
    objectManager.add(0x4, _0x104722 - 0x2ee, _0x104722 - 0x190, 0x0, config.treeScales[0x3], 0x0);
    objectManager.add(0x5, _0x104722 - 0x2bc, _0x104722 + 0x190, 0x0, config.treeScales[0x2], 0x0);
    objectManager.add(0x6, _0x104722 + 0x320, _0x104722 - 0xc8, 0x0, config.treeScales[0x3], 0x0);
    objectManager.add(0x7, _0x104722 - 0x104, _0x104722 + 0x154, 0x0, config.bushScales[0x3], 0x1);
    objectManager.add(0x8, _0x104722 + 0x2f8, _0x104722 + 0x136, 0x0, config.bushScales[0x3], 0x1);
    objectManager.add(0x9, _0x104722 - 0x320, _0x104722 + 0x64, 0x0, config.bushScales[0x3], 0x1);
    objectManager.add(0xa, _0x104722 - 0x320, _0x104722 + 0x12c, 0x0, items.list[0x4].scale, items.list[0x4].id, items.list[0xa]);
    objectManager.add(0xb, _0x104722 + 0x28a, _0x104722 - 0x186, 0x0, items.list[0x4].scale, items.list[0x4].id, items.list[0xa]);
    objectManager.add(0xc, _0x104722 - 0x190, _0x104722 - 0x1c2, 0x0, config.rockScales[0x2], 0x2);
}

function renderDeadPlayers(_0x1f66ae, _0x45d4c6) {
    mainContext.fillStyle = "#ffff";
    deadPlayers.filter(_0x39e8d1 => _0x39e8d1.active).forEach(_0x3c1bf8 => {
        _0x3c1bf8.animate(delta);
        mainContext.globalAlpha = _0x3c1bf8.alpha;
        mainContext.strokeStyle = "black";
        mainContext.save();
        mainContext.translate(_0x3c1bf8.x - _0x1f66ae, _0x3c1bf8.y - _0x45d4c6);
        mainContext.strokeStyle = "white";
        mainContext.font = "80px sans-serif";
        mainContext.textBaseline = "middle";
        mainContext.textAlign = "center";
        mainContext.lineWidth = 0x3;
        mainContext.strokeText("☠️", 0x0, _0x3c1bf8.scale * 0x2 - 0x14);
        mainContext.fillText("☠️", 0x0, _0x3c1bf8.scale * 0x2 - 0x14);
        mainContext.font = "25px Hammersmith One";
        mainContext.fillStyle = "white";
        mainContext.lineWidth = 1.5;
        mainContext.strokeText(_0x3c1bf8.name, 0x0, _0x3c1bf8.scale * 0x2 + 0x14);
        mainContext.fillText(_0x3c1bf8.name, 0x0, _0x3c1bf8.scale * 0x2 + 0x14);
        mainContext.font = "25px Hammersmith One";
        mainContext.fillStyle = "#fff";
        mainContext.strokeStyle = "black";
        mainContext.lineWidth = 1.5;
        mainContext.strokeText(_0x3c1bf8.deathMessage, 0x0, _0x3c1bf8.scale * 0x2 + 0x32);
        mainContext.fillText(_0x3c1bf8.deathMessage, 0x0, _0x3c1bf8.scale * 0x2 + 0x32);
        mainContext.restore();
    });
}

function renderPlayers(_0x1733ce, _0x5de0de, _0x1faad6) {
    mainContext.globalAlpha = 0x1;
    mainContext.fillStyle = "#91b2db";
    for (var _0x1c13bb = 0x0; _0x1c13bb < players.length; ++_0x1c13bb) {
        tmpObj = players[_0x1c13bb];
        if (tmpObj.zIndex == _0x1faad6) {
            tmpObj.animate(delta);
            if (tmpObj.visible) {
                tmpObj.skinRot += 0.002 * delta;
                tmpDir = !document.getElementById("smoothDir").checked && tmpObj == player ? document.getElementById("attackDir").checked ? getVisualDir() : getSafeDir() : tmpObj.dir || 0x0;
                mainContext.save();
                mainContext.translate(tmpObj.x - _0x1733ce, tmpObj.y - _0x5de0de);
                mainContext.rotate(tmpDir + tmpObj.dirPlus);
                if (tmpObj == player && traps.inTrap && player.skinIndex == 0x28) {
                    null;
                } else {
                    renderPlayer(tmpObj, mainContext);
                }
                mainContext.restore();
            }
        }
    }
}

function renderDeadPlayer(_0x3f0866, _0x454d7f) {
    _0x454d7f = _0x454d7f || mainContext;
    _0x454d7f.lineWidth = 5.5;
    _0x454d7f.lineJoin = "miter";
    let _0x53638a = Math.PI / 0x4 * (items.weapons[_0x3f0866.weaponIndex].armS || 0x1);
    let _0x40a7a7 = _0x3f0866.buildIndex < 0x0 ? items.weapons[_0x3f0866.weaponIndex].hndS || 0x1 : 0x1;
    let _0x30628 = _0x3f0866.buildIndex < 0x0 ? items.weapons[_0x3f0866.weaponIndex].hndD || 0x1 : 0x1;
    if (_0x3f0866.buildIndex < 0x0 && !items.weapons[_0x3f0866.weaponIndex].aboveHand) {
        renderTool(items.weapons[_0x3f0866.weaponIndex], config.weaponVariants[_0x3f0866.weaponVariant].src, _0x3f0866.scale, 0x0, _0x454d7f);
        if (items.weapons[_0x3f0866.weaponIndex].projectile != undefined && !items.weapons[_0x3f0866.weaponIndex].hideProjectile) {
            renderProjectile(_0x3f0866.scale, 0x0, items.projectiles[items.weapons[_0x3f0866.weaponIndex].projectile], mainContext);
        }
    }
    _0x454d7f.fillStyle = config.skinColors[_0x3f0866.skinColor];
    renderCircle(_0x3f0866.scale * Math.cos(_0x53638a), _0x3f0866.scale * Math.sin(_0x53638a), 0xe);
    renderCircle(_0x3f0866.scale * _0x30628 * Math.cos(-_0x53638a * _0x40a7a7), _0x3f0866.scale * _0x30628 * Math.sin(-_0x53638a * _0x40a7a7), 0xe);
    if (_0x3f0866.buildIndex < 0x0 && items.weapons[_0x3f0866.weaponIndex].aboveHand) {
        renderTool(items.weapons[_0x3f0866.weaponIndex], config.weaponVariants[_0x3f0866.weaponVariant].src, _0x3f0866.scale, 0x0, _0x454d7f);
        if (items.weapons[_0x3f0866.weaponIndex].projectile != undefined && !items.weapons[_0x3f0866.weaponIndex].hideProjectile) {
            renderProjectile(_0x3f0866.scale, 0x0, items.projectiles[items.weapons[_0x3f0866.weaponIndex].projectile], mainContext);
        }
    }
    if (_0x3f0866.buildIndex >= 0x0) {
        var _0x334ac4 = getItemSprite(items.list[_0x3f0866.buildIndex]);
        _0x454d7f.drawImage(_0x334ac4, _0x3f0866.scale - items.list[_0x3f0866.buildIndex].holdOffset, -_0x334ac4.width / 0x2);
    }
    renderCircle(0x0, 0x0, _0x3f0866.scale, _0x454d7f);
    _0x454d7f.lineWidth = 0x2;
    _0x454d7f.fillStyle = "#555";
    _0x454d7f.font = "35px Hammersmith One";
    _0x454d7f.textBaseline = "middle";
    _0x454d7f.textAlign = "center";
    _0x454d7f.fillText("(", 0x14, 0x5);
    _0x454d7f.rotate(Math.PI / 0x2);
    _0x454d7f.font = "30px Hammersmith One";
    _0x454d7f.fillText("X", -0xf, 7.5);
    _0x454d7f.fillText("D", 0xf, 7.5);
}

function renderPlayer(_0x48245f, _0x28bc81) {
    _0x28bc81 = _0x28bc81 || mainContext;
    _0x28bc81.lineWidth = 5.5;
    _0x28bc81.lineJoin = "miter";
    let _0x3c8844 = Math.PI / 0x4 * (items.weapons[_0x48245f.weaponIndex].armS || 0x1);
    let _0x1a759b = _0x48245f.buildIndex < 0x0 ? items.weapons[_0x48245f.weaponIndex].hndS || 0x1 : 0x1;
    let _0xfcf2cb = _0x48245f.buildIndex < 0x0 ? items.weapons[_0x48245f.weaponIndex].hndD || 0x1 : 0x1;
    let _0x5d1142 = _0x48245f == player && _0x48245f.weapons[0x0] == 0x3 && _0x48245f.weapons[0x1] == 0xf;
    if (_0x48245f.tailIndex > 0x0) {
        renderTail(_0x48245f.tailIndex, _0x28bc81, _0x48245f);
    }
    if (_0x48245f.buildIndex < 0x0 && !items.weapons[_0x48245f.weaponIndex].aboveHand) {
        renderTool(items.weapons[_0x5d1142 ? 0x4 : _0x48245f.weaponIndex], config.weaponVariants[_0x48245f.weaponVariant].src, _0x48245f.scale, 0x0, _0x28bc81);
        if (items.weapons[_0x48245f.weaponIndex].projectile != undefined && !items.weapons[_0x48245f.weaponIndex].hideProjectile) {
            renderProjectile(_0x48245f.scale, 0x0, items.projectiles[items.weapons[_0x48245f.weaponIndex].projectile], mainContext);
        }
    }
    _0x28bc81.fillStyle = config.skinColors[_0x48245f.skinColor];
    renderCircle(_0x48245f.scale * Math.cos(_0x3c8844), _0x48245f.scale * Math.sin(_0x3c8844), 0xe);
    renderCircle(_0x48245f.scale * _0xfcf2cb * Math.cos(-_0x3c8844 * _0x1a759b), _0x48245f.scale * _0xfcf2cb * Math.sin(-_0x3c8844 * _0x1a759b), 0xe);
    if (_0x48245f.buildIndex < 0x0 && items.weapons[_0x48245f.weaponIndex].aboveHand) {
        renderTool(items.weapons[_0x48245f.weaponIndex], config.weaponVariants[_0x48245f.weaponVariant].src, _0x48245f.scale, 0x0, _0x28bc81);
        if (items.weapons[_0x48245f.weaponIndex].projectile != undefined && !items.weapons[_0x48245f.weaponIndex].hideProjectile) {
            renderProjectile(_0x48245f.scale, 0x0, items.projectiles[items.weapons[_0x48245f.weaponIndex].projectile], mainContext);
        }
    }
    if (_0x48245f.buildIndex >= 0x0) {
        var _0x19b85b = getItemSprite(items.list[_0x48245f.buildIndex]);
        _0x28bc81.drawImage(_0x19b85b, _0x48245f.scale - items.list[_0x48245f.buildIndex].holdOffset, -_0x19b85b.width / 0x2);
    }
    renderCircle(0x0, 0x0, _0x48245f.scale, _0x28bc81);
    if (_0x48245f.skinIndex > 0x0) {
        _0x28bc81.rotate(Math.PI / 0x2);
        renderTextureSkin(_0x48245f.skinIndex, _0x28bc81, null, _0x48245f);
    }
}
var skinSprites2 = {};
var skinPointers2 = {};

function renderSkin2(_0x6b62e3, _0x4cba48, _0x5499ba, _0x184019) {
    tmpSkin = skinSprites2[_0x6b62e3];
    if (!tmpSkin) {
        var _0x5e9060 = new Image();
        _0x5e9060.onload = function() {
            this.isLoaded = true;
            this.onload = null;
        };
        _0x5e9060.src = "https://moomoo.io/img/hats/hat_" + _0x6b62e3 + ".png";
        skinSprites2[_0x6b62e3] = _0x5e9060;
        tmpSkin = _0x5e9060;
    }
    var _0x3461de = _0x5499ba || skinPointers2[_0x6b62e3];
    if (!_0x3461de) {
        for (var _0x37859d = 0x0; _0x37859d < hats.length; ++_0x37859d) {
            if (hats[_0x37859d].id == _0x6b62e3) {
                _0x3461de = hats[_0x37859d];
                break;
            }
        }
        skinPointers2[_0x6b62e3] = _0x3461de;
    }
    if (tmpSkin.isLoaded) {
        _0x4cba48.drawImage(tmpSkin, -_0x3461de.scale / 0x2, -_0x3461de.scale / 0x2, _0x3461de.scale, _0x3461de.scale);
    }
    if (!_0x5499ba && _0x3461de.topSprite) {
        _0x4cba48.save();
        _0x4cba48.rotate(_0x184019.skinRot);
        renderSkin2(_0x6b62e3 + "_top", _0x4cba48, _0x3461de, _0x184019);
        _0x4cba48.restore();
    }
}

function renderTextureSkin(_0x1c364, _0x79046b, _0xd7983b, _0x676423) {
    if (!(tmpSkin = skinSprites[_0x1c364 + "lol"])) {
        var _0x3d81bd = new Image();
        _0x3d81bd.onload = function() {
            this.isLoaded = true;
            this.onload = null;
        };
        _0x3d81bd.src = setSkinTextureImage(_0x1c364, "hat", _0x1c364);
        skinSprites[_0x1c364 + "lol"] = _0x3d81bd;
        tmpSkin = _0x3d81bd;
    }
    var _0x30aa88 = _0xd7983b || skinPointers[_0x1c364];
    if (!_0x30aa88) {
        for (var _0x2867b4 = 0x0; _0x2867b4 < hats.length; ++_0x2867b4) {
            if (hats[_0x2867b4].id == _0x1c364) {
                _0x30aa88 = hats[_0x2867b4];
                break;
            }
        }
        skinPointers[_0x1c364] = _0x30aa88;
    }
    if (tmpSkin.isLoaded) {
        _0x79046b.drawImage(tmpSkin, -_0x30aa88.scale / 0x2, -_0x30aa88.scale / 0x2, _0x30aa88.scale, _0x30aa88.scale);
    }
    if (!_0xd7983b && _0x30aa88.topSprite) {
        _0x79046b.save();
        _0x79046b.rotate(_0x676423.skinRot);
        renderSkin(_0x1c364 + "_top", _0x79046b, _0x30aa88, _0x676423);
        _0x79046b.restore();
    }
}
var FlareZHat = {
    0x7: "https://i.imgur.com/vAOzlyY.png",
    0xf: "https://i.imgur.com/YRQ8Ybq.png",
    0x28: "https://i.imgur.com/Xzmg27N.png",
    0x1a: "https://i.imgur.com/I0xGtyZ.png",
    0x37: "https://i.imgur.com/uYgDtcZ.png",
    0x14: "https://i.imgur.com/f5uhWCk.png"
};

function setSkinTextureImage(_0x33402c, _0x1b3b81, _0x17c3eb) {
    if (FlareZHat[_0x33402c] && _0x1b3b81 == "hat") {
        return FlareZHat[_0x33402c];
    } else {
        if (_0x1b3b81 == "acc") {
            return ".././img/accessories/access_" + _0x33402c + ".png";
        } else {
            return _0x1b3b81 == "hat" ? ".././img/hats/hat_" + _0x33402c + ".png" : ".././img/weapons/" + _0x33402c + ".png";
        }
    }
}
let skinSprites = {};
let skinPointers = {};
let tmpSkin;

function renderSkin(_0x1cc92f, _0x4eef1b, _0x20d0b7, _0x51a07a) {
    tmpSkin = skinSprites[_0x1cc92f];
    if (!tmpSkin) {
        let _0x4a4abe = new Image();
        _0x4a4abe.onload = function() {
            this.isLoaded = true;
            this.onload = null;
        };
        _0x4a4abe.src = "https://moomoo.io/img/hats/hat_" + _0x1cc92f + ".png";
        skinSprites[_0x1cc92f] = _0x4a4abe;
        tmpSkin = _0x4a4abe;
    }
    let _0x22710a = _0x20d0b7 || skinPointers[_0x1cc92f];
    if (!_0x22710a) {
        for (let _0x3a618 = 0x0; _0x3a618 < hats.length; ++_0x3a618) {
            if (hats[_0x3a618].id == _0x1cc92f) {
                _0x22710a = hats[_0x3a618];
                break;
            }
        }
        skinPointers[_0x1cc92f] = _0x22710a;
    }
    if (tmpSkin.isLoaded) {
        _0x4eef1b.drawImage(tmpSkin, -_0x22710a.scale / 0x2, -_0x22710a.scale / 0x2, _0x22710a.scale, _0x22710a.scale);
    }
    if (!_0x20d0b7 && _0x22710a.topSprite) {
        _0x4eef1b.save();
        _0x4eef1b.rotate(_0x51a07a.skinRot);
        renderSkin(_0x1cc92f + "_top", _0x4eef1b, _0x22710a, _0x51a07a);
        _0x4eef1b.restore();
    }
}
var FlareZAcc = {
    0x15: "https://i.imgur.com/4ddZert.png",
    0x13: "https://i.imgur.com/sULkUZT.png"
};

function setTailTextureImage(_0x1e4829, _0x12ba4e, _0x3cd5b6) {
    if (FlareZAcc[_0x1e4829] && _0x12ba4e == "acc") {
        return FlareZAcc[_0x1e4829];
    } else {
        if (_0x12ba4e == "acc") {
            return ".././img/accessories/access_" + _0x1e4829 + ".png";
        } else {
            return _0x12ba4e == "hat" ? ".././img/hats/hat_" + _0x1e4829 + ".png" : ".././img/weapons/" + _0x1e4829 + ".png";
        }
    }
}

function renderTailTextureImage(_0x1d628a, _0x4b2ae9, _0xc9cdb2) {
    if (!(tmpSkin = accessSprites[_0x1d628a + "lol"])) {
        var _0x276703 = new Image();
        _0x276703.onload = function() {
            this.isLoaded = true;
            this.onload = null;
        };
        _0x276703.src = setTailTextureImage(_0x1d628a, "acc");
        accessSprites[_0x1d628a + "lol"] = _0x276703;
        tmpSkin = _0x276703;
    }
    var _0x51eab5 = accessPointers[_0x1d628a];
    if (!_0x51eab5) {
        for (var _0xbb40e8 = 0x0; _0xbb40e8 < accessories.length; ++_0xbb40e8) {
            if (accessories[_0xbb40e8].id == _0x1d628a) {
                _0x51eab5 = accessories[_0xbb40e8];
                break;
            }
        }
        accessPointers[_0x1d628a] = _0x51eab5;
    }
    if (tmpSkin.isLoaded) {
        _0x4b2ae9.save();
        _0x4b2ae9.translate(-0x14 - (_0x51eab5.xOff || 0x0), 0x0);
        if (_0x51eab5.spin) {
            _0x4b2ae9.rotate(_0xc9cdb2.skinRot);
        }
        _0x4b2ae9.drawImage(tmpSkin, -(_0x51eab5.scale / 0x2), -(_0x51eab5.scale / 0x2), _0x51eab5.scale, _0x51eab5.scale);
        _0x4b2ae9.restore();
    }
}
let accessSprites = {};
let accessPointers = {};

function renderTail(_0x2de4a4, _0x583842, _0x5dab8e) {
    tmpSkin = accessSprites[_0x2de4a4];
    if (!tmpSkin) {
        let _0x1faa9c = new Image();
        _0x1faa9c.onload = function() {
            this.isLoaded = true;
            this.onload = null;
        };
        _0x1faa9c.src = "https://moomoo.io/img/accessories/access_" + _0x2de4a4 + ".png";
        accessSprites[_0x2de4a4] = _0x1faa9c;
        tmpSkin = _0x1faa9c;
    }
    let _0x1aeb38 = accessPointers[_0x2de4a4];
    if (!_0x1aeb38) {
        for (let _0x9a379a = 0x0; _0x9a379a < accessories.length; ++_0x9a379a) {
            if (accessories[_0x9a379a].id == _0x2de4a4) {
                _0x1aeb38 = accessories[_0x9a379a];
                break;
            }
        }
        accessPointers[_0x2de4a4] = _0x1aeb38;
    }
    if (tmpSkin.isLoaded) {
        _0x583842.save();
        _0x583842.translate(-0x14 - (_0x1aeb38.xOff || 0x0), 0x0);
        if (_0x1aeb38.spin) {
            _0x583842.rotate(_0x5dab8e.skinRot);
        }
        _0x583842.drawImage(tmpSkin, -(_0x1aeb38.scale / 0x2), -(_0x1aeb38.scale / 0x2), _0x1aeb38.scale, _0x1aeb38.scale);
        _0x583842.restore();
    }
}
var accessSprites2 = {};
var accessPointers2 = {};

function renderTail2(_0x3d144a, _0x32a42a, _0x22f984) {
    tmpSkin = accessSprites2[_0x3d144a];
    if (!tmpSkin) {
        var _0x109dd6 = new Image();
        _0x109dd6.onload = function() {
            this.isLoaded = true;
            this.onload = null;
        };
        _0x109dd6.src = "https://moomoo.io/img/accessories/access_" + _0x3d144a + ".png";
        accessSprites2[_0x3d144a] = _0x109dd6;
        tmpSkin = _0x109dd6;
    }
    var _0x1ac338 = accessPointers2[_0x3d144a];
    if (!_0x1ac338) {
        for (var _0x44d723 = 0x0; _0x44d723 < accessories.length; ++_0x44d723) {
            if (accessories[_0x44d723].id == _0x3d144a) {
                _0x1ac338 = accessories[_0x44d723];
                break;
            }
        }
        accessPointers2[_0x3d144a] = _0x1ac338;
    }
    if (tmpSkin.isLoaded) {
        _0x32a42a.save();
        _0x32a42a.translate(-0x14 - (_0x1ac338.xOff || 0x0), 0x0);
        if (_0x1ac338.spin) {
            _0x32a42a.rotate(_0x22f984.skinRot);
        }
        _0x32a42a.drawImage(tmpSkin, -(_0x1ac338.scale / 0x2), -(_0x1ac338.scale / 0x2), _0x1ac338.scale, _0x1ac338.scale);
        _0x32a42a.restore();
    }
}
let toolSprites = {};

function renderTool(_0x14f80b, _0x34fc23, _0x3287f6, _0x5a0a54, _0x5ee801) {
    let _0xd12bb1 = _0x14f80b.src + (_0x34fc23 || "");
    let _0x139524 = toolSprites[_0xd12bb1];
    if (!_0x139524) {
        _0x139524 = new Image();
        _0x139524.onload = function() {
            this.isLoaded = true;
        };
        _0x139524.src = "https://moomoo.io/img/weapons/" + _0xd12bb1 + ".png";
        toolSprites[_0xd12bb1] = _0x139524;
    }
    if (_0x139524.isLoaded) {
        _0x5ee801.drawImage(_0x139524, _0x3287f6 + _0x14f80b.xOff - _0x14f80b.length / 0x2, _0x5a0a54 + _0x14f80b.yOff - _0x14f80b.width / 0x2, _0x14f80b.length, _0x14f80b.width);
    }
}

function renderProjectiles(_0x4d139b, _0x5a17b9, _0x18daf8) {
    for (let _0xfef5bf = 0x0; _0xfef5bf < projectiles.length; _0xfef5bf++) {
        tmpObj = projectiles[_0xfef5bf];
        if (tmpObj.active && tmpObj.layer == _0x4d139b && tmpObj.inWindow) {
            tmpObj.update(delta);
            if (tmpObj.active && isOnScreen(tmpObj.x - _0x5a17b9, tmpObj.y - _0x18daf8, tmpObj.scale)) {
                mainContext.save();
                mainContext.translate(tmpObj.x - _0x5a17b9, tmpObj.y - _0x18daf8);
                mainContext.rotate(tmpObj.dir);
                renderProjectile(0x0, 0x0, tmpObj, mainContext, 0x1);
                mainContext.restore();
            }
        }
    }
}
let projectileSprites = {};

function renderProjectile(_0x4e2b57, _0x3eb9d6, _0x26bcb4, _0x517ac8, _0x3b7a18) {
    if (_0x26bcb4.src) {
        let _0x4ea39f = items.projectiles[_0x26bcb4.indx].src;
        let _0x26dd1a = projectileSprites[_0x4ea39f];
        if (!_0x26dd1a) {
            _0x26dd1a = new Image();
            _0x26dd1a.onload = function() {
                this.isLoaded = true;
            };
            _0x26dd1a.src = "https://moomoo.io/img/weapons/" + _0x4ea39f + ".png";
            projectileSprites[_0x4ea39f] = _0x26dd1a;
        }
        if (_0x26dd1a.isLoaded) {
            _0x517ac8.drawImage(_0x26dd1a, _0x4e2b57 - _0x26bcb4.scale / 0x2, _0x3eb9d6 - _0x26bcb4.scale / 0x2, _0x26bcb4.scale, _0x26bcb4.scale);
        }
    } else if (_0x26bcb4.indx == 0x1) {
        _0x517ac8.fillStyle = "#939393";
        renderCircle(_0x4e2b57, _0x3eb9d6, _0x26bcb4.scale, _0x517ac8);
    }
}
let aiSprites = {};

function renderAI(_0x5d952a, _0x254d9f) {
    let _0xa109b2 = _0x5d952a.index;
    let _0x3d0f7b = aiSprites[_0xa109b2];
    if (!_0x3d0f7b) {
        let _0x50df14 = new Image();
        _0x50df14.onload = function() {
            this.isLoaded = true;
            this.onload = null;
        };
        _0x50df14.src = "https://moomoo.io/img/animals/" + _0x5d952a.src + ".png";
        _0x3d0f7b = _0x50df14;
        aiSprites[_0xa109b2] = _0x3d0f7b;
    }
    if (_0x3d0f7b.isLoaded) {
        let _0x43b3fa = _0x5d952a.scale * 1.2 * (_0x5d952a.spriteMlt || 0x1);
        _0x254d9f.drawImage(_0x3d0f7b, -_0x43b3fa, -_0x43b3fa, _0x43b3fa * 0x2, _0x43b3fa * 0x2);
    }
}

function renderWaterBodies(_0x5d8122, _0xc3c430, _0x23eddd, _0x2baca2) {
    let _0x41a284 = config.riverWidth + _0x2baca2;
    let _0xac57f4 = config.mapScale / 0x2 - _0xc3c430 - _0x41a284 / 0x2;
    if (_0xac57f4 < maxScreenHeight && _0xac57f4 + _0x41a284 > 0x0) {
        _0x23eddd.fillRect(0x0, _0xac57f4, maxScreenWidth, _0x41a284);
    }
}
let treeAlphaState = [];

function renderResTest(_0x3594f2, _0x5b9be4, _0x56851e, _0x1f8292) {
    let _0x241c01 = getResSprite(_0x3594f2);
    let _0x2ab54e = _0x3594f2.scale * 1.5;
    if (player && _0x3594f2.type === 0x0) {
        if (!treeAlphaState[_0x3594f2.sid]) {
            treeAlphaState[_0x3594f2.sid] = 0x1;
        }
        let _0x5885ba = Math.sqrt((_0x3594f2.y - player.y2) ** 0x2 + (_0x3594f2.x - player.x2) ** 0x2);
        if (_0x5885ba <= _0x2ab54e + player.scale) {
            treeAlphaState[_0x3594f2.sid] = Math.max(0.2, treeAlphaState[_0x3594f2.sid] - 0.06);
        } else {
            treeAlphaState[_0x3594f2.sid] = Math.min(0x1, treeAlphaState[_0x3594f2.sid] + 0.06);
        }
        mainContext.globalAlpha = treeAlphaState[_0x3594f2.sid];
        mainContext.drawImage(_0x241c01, _0x5b9be4 - _0x241c01.width / 0x2, _0x56851e - _0x241c01.height / 0x2);
        let _0x326bb6 = 0x1 - (_0x5885ba - _0x3594f2.scale) / (player.scale * 0x2);
        if (_0x5885ba <= _0x3594f2.scale + player.scale) {
            mainContext.beginPath();
            mainContext.arc(_0x5b9be4, _0x56851e, _0x3594f2.scale * 0.6, 0x0, 0x2 * Math.PI);
            mainContext.fillStyle = "rgba(0, 0, 0, " + _0x326bb6 + ")";
            mainContext.strokeStyle = "black";
            mainContext.lineWidth = 0x6;
            mainContext.fill();
            mainContext.stroke();
            mainContext.closePath();
        }
    } else {
        mainContext.globalAlpha = 0x1;
        mainContext.drawImage(_0x241c01, _0x5b9be4 - _0x241c01.width / 0x2, _0x56851e - _0x241c01.height / 0x2);
    }
}
let gameObjectSprites = {};

function getResSprite(_0x40436f) {
    let _0x38ad1b = _0x40436f.y >= config.mapScale - config.snowBiomeTop ? 0x2 : _0x40436f.y <= config.snowBiomeTop ? 0x1 : 0x0;
    let _0x33ff54 = _0x40436f.type + "_" + _0x40436f.scale + "_" + _0x38ad1b;
    let _0x171178 = gameObjectSprites[_0x33ff54];
    if (!_0x171178) {
        let _0x106872 = document.createElement("canvas");
        _0x106872.width = _0x106872.height = _0x40436f.scale * 2.1 + 5.5;
        let _0x58be24 = _0x106872.getContext("2d");
        _0x58be24.translate(_0x106872.width / 0x2, _0x106872.height / 0x2);
        _0x58be24.rotate(UTILS.randFloat(0x0, Math.PI));
        _0x58be24.strokeStyle = "#525252";
        _0x58be24.lineWidth = 5.5;
        let _0x37e7ec = [
            ["#b1d959", "#95b946"],
            ["#bade6e", "#aac76b"],
            ["#a7d544", "#86a63f"],
            ["#b4db62", "#9ebf57"]
        ];
        let _0xf03c52 = _0x37e7ec[Math.floor(Math.random() * _0x37e7ec.length)];
        if (_0x40436f.type == 0x0) {
            let _0x5c5578;
            let _0x6130a2 = UTILS.randInt(0x6, 0x6);
            _0x58be24.globalAlpha = 0x1;
            for (let _0x417cc9 = 0x0; _0x417cc9 < 0x2; ++_0x417cc9) {
                _0x5c5578 = tmpObj.scale * (!_0x417cc9 ? 0x1 : 0.5);
                renderStar(_0x58be24, _0x6130a2, _0x5c5578, _0x5c5578 * 0.7);
                _0x58be24.fillStyle = !_0x38ad1b ? !_0x417cc9 ? _0xf03c52[0x1] : _0xf03c52[0x0] : !_0x417cc9 ? "#e3f1f4" : "#fff";
                _0x58be24.fill();
                if (!_0x417cc9) {
                    _0x58be24.stroke();
                }
            }
        } else {
            if (_0x40436f.type == 0x1) {
                if (_0x38ad1b == 0x2) {
                    _0x58be24.fillStyle = "#606060";
                    renderStar(_0x58be24, 0x6, _0x40436f.scale * 0.3, _0x40436f.scale * 0.71);
                    _0x58be24.fill();
                    _0x58be24.stroke();
                    _0x58be24.fillStyle = "#89a54c";
                    renderCircle(0x0, 0x0, _0x40436f.scale * 0.55, _0x58be24);
                    _0x58be24.fillStyle = "#a5c65b";
                    renderCircle(0x0, 0x0, _0x40436f.scale * 0.3, _0x58be24, true);
                } else {
                    renderBlob(_0x58be24, 0x6, tmpObj.scale, tmpObj.scale * 0.7);
                    _0x58be24.fillStyle = _0x38ad1b ? "#e3f1f4" : "#89a54c";
                    _0x58be24.fill();
                    _0x58be24.stroke();
                    _0x58be24.fillStyle = _0x38ad1b ? "#6a64af" : "#c15555";
                    let _0x3876ee;
                    let _0x2796a8 = Math.PI * 0x2 / 0x4;
                    for (let _0xb19276 = 0x0; _0xb19276 < 0x4; ++_0xb19276) {
                        _0x3876ee = UTILS.randInt(tmpObj.scale / 3.5, tmpObj.scale / 2.3);
                        renderCircle(_0x3876ee * Math.cos(_0x2796a8 * _0xb19276), _0x3876ee * Math.sin(_0x2796a8 * _0xb19276), UTILS.randInt(0xa, 0xc), _0x58be24);
                    }
                }
            } else if (_0x40436f.type == 0x2 || _0x40436f.type == 0x3) {
                _0x58be24.fillStyle = _0x40436f.type == 0x2 ? _0x38ad1b == 0x2 ? "#938d77" : "#939393" : "#e0c655";
                renderStar(_0x58be24, 0x3, _0x40436f.scale, _0x40436f.scale);
                _0x58be24.fill();
                _0x58be24.stroke();
                _0x58be24.shadowBlur = null;
                _0x58be24.shadowColor = null;
                _0x58be24.fillStyle = _0x40436f.type == 0x2 ? _0x38ad1b == 0x2 ? "#b2ab90" : "#bcbcbc" : "#ebdca3";
                renderStar(_0x58be24, 0x3, _0x40436f.scale * 0.55, _0x40436f.scale * 0.65);
                _0x58be24.fill();
            }
        }
        _0x171178 = _0x106872;
        gameObjectSprites[_0x33ff54] = _0x171178;
    }
    return _0x171178;
}
var isAlly = function(_0x1d0a45) {
    for (let _0x51905c = 0x0; _0x51905c < alliancePlayers.length; _0x51905c += 0x2) {
        if (_0x1d0a45 == alliancePlayers[_0x51905c]) {
            return true;
        }
    }
};
let itemSprites = [];

function getItemSprite(_0x5bc83d, _0x3a4bd5) {
    let _0x7e98aa = itemSprites[_0x5bc83d.id];
    if (!_0x7e98aa || _0x3a4bd5) {
        let _0x4457d1 = document.createElement("canvas");
        let _0x6459e6 = !_0x3a4bd5 && _0x5bc83d.name == "windmill" ? items.list[0x4].scale : _0x5bc83d.scale;
        _0x4457d1.width = _0x4457d1.height = _0x6459e6 * 2.5 + 5.5 + (items.list[_0x5bc83d.id].spritePadding || 0x0) + 0x5;
        let _0x1156b9 = _0x4457d1.getContext("2d");
        _0x1156b9.translate(_0x4457d1.width / 0x2, _0x4457d1.height / 0x2);
        _0x1156b9.rotate(_0x3a4bd5 ? 0x0 : Math.PI / 0x2);
        _0x1156b9.strokeStyle = "#525252";
        _0x1156b9.lineWidth = 5.5 * (_0x3a4bd5 ? _0x4457d1.width / 0x51 : 0x1);
        if (_0x5bc83d.name == "apple") {
            _0x1156b9.fillStyle = "#c15555";
            renderCircle(0x0, 0x0, _0x5bc83d.scale, _0x1156b9);
            _0x1156b9.fillStyle = "#89a54c";
            let _0x50c239 = -(Math.PI / 0x2);
            renderLeaf(_0x5bc83d.scale * Math.cos(_0x50c239), _0x5bc83d.scale * Math.sin(_0x50c239), 0x19, _0x50c239 + Math.PI / 0x2, _0x1156b9);
        } else {
            if (_0x5bc83d.name == "cookie") {
                _0x1156b9.fillStyle = "#cca861";
                renderCircle(0x0, 0x0, _0x5bc83d.scale, _0x1156b9);
                _0x1156b9.fillStyle = "#937c4b";
                let _0x258e13 = Math.PI * 0x2 / 0x4;
                let _0x3f28f1;
                for (let _0x39ae93 = 0x0; _0x39ae93 < 0x4; ++_0x39ae93) {
                    _0x3f28f1 = UTILS.randInt(_0x5bc83d.scale / 2.5, _0x5bc83d.scale / 1.7);
                    renderCircle(_0x3f28f1 * Math.cos(_0x258e13 * _0x39ae93), _0x3f28f1 * Math.sin(_0x258e13 * _0x39ae93), UTILS.randInt(0x4, 0x5), _0x1156b9, true);
                }
            } else {
                if (_0x5bc83d.name == "cheese") {
                    _0x1156b9.fillStyle = "#f4f3ac";
                    renderCircle(0x0, 0x0, _0x5bc83d.scale, _0x1156b9);
                    _0x1156b9.fillStyle = "#c3c28b";
                    let _0x197523 = Math.PI * 0x2 / 0x4;
                    let _0x3656be;
                    for (let _0x3eb9c5 = 0x0; _0x3eb9c5 < 0x4; ++_0x3eb9c5) {
                        _0x3656be = UTILS.randInt(_0x5bc83d.scale / 2.5, _0x5bc83d.scale / 1.7);
                        renderCircle(_0x3656be * Math.cos(_0x197523 * _0x3eb9c5), _0x3656be * Math.sin(_0x197523 * _0x3eb9c5), UTILS.randInt(0x4, 0x5), _0x1156b9, true);
                    }
                } else {
                    if (_0x5bc83d.name == "wood wall" || _0x5bc83d.name == "stone wall" || _0x5bc83d.name == "castle wall") {
                        _0x1156b9.fillStyle = _0x5bc83d.name == "castle wall" ? "#83898e" : _0x5bc83d.name == "wood wall" ? "#a5974c" : "#939393";
                        let _0x5f50f0 = _0x5bc83d.name == "castle wall" ? 0x4 : 0x3;
                        renderStar(_0x1156b9, _0x5f50f0, _0x5bc83d.scale * 1.1, _0x5bc83d.scale * 1.1);
                        _0x1156b9.fill();
                        _0x1156b9.stroke();
                        _0x1156b9.fillStyle = _0x5bc83d.name == "castle wall" ? "#9da4aa" : _0x5bc83d.name == "wood wall" ? "#c9b758" : "#bcbcbc";
                        renderStar(_0x1156b9, _0x5f50f0, _0x5bc83d.scale * 0.65, _0x5bc83d.scale * 0.65);
                        _0x1156b9.fill();
                    } else {
                        if (_0x5bc83d.name == "spikes" || _0x5bc83d.name == "greater spikes" || _0x5bc83d.name == "poison spikes" || _0x5bc83d.name == "spinning spikes") {
                            _0x1156b9.fillStyle = _0x5bc83d.name == "poison spikes" ? "#7b935d" : "#939393";
                            let _0x654ad1 = _0x5bc83d.scale * 0.6;
                            renderStar(_0x1156b9, _0x5bc83d.name == "spikes" ? 0x5 : 0x6, _0x5bc83d.scale, _0x654ad1);
                            _0x1156b9.fill();
                            _0x1156b9.stroke();
                            _0x1156b9.fillStyle = "#a5974c";
                            renderCircle(0x0, 0x0, _0x654ad1, _0x1156b9);
                            _0x1156b9.fillStyle = "#c9b758";
                            renderCircle(0x0, 0x0, _0x654ad1 / 0x2, _0x1156b9, true);
                        } else {
                            if (_0x5bc83d.name == "windmill" || _0x5bc83d.name == "faster windmill" || _0x5bc83d.name == "power mill") {
                                _0x1156b9.fillStyle = "#a5974c";
                                renderCircle(0x0, 0x0, _0x6459e6, _0x1156b9);
                                _0x1156b9.fillStyle = "#c9b758";
                                renderRectCircle(0x0, 0x0, _0x6459e6 * 1.5, 0x1d, 0x4, _0x1156b9);
                                _0x1156b9.fillStyle = "#a5974c";
                                renderCircle(0x0, 0x0, _0x6459e6 * 0.5, _0x1156b9);
                            } else {
                                if (_0x5bc83d.name == "mine") {
                                    _0x1156b9.fillStyle = "#939393";
                                    renderStar(_0x1156b9, 0x3, _0x5bc83d.scale, _0x5bc83d.scale);
                                    _0x1156b9.fill();
                                    _0x1156b9.stroke();
                                    _0x1156b9.fillStyle = "#bcbcbc";
                                    renderStar(_0x1156b9, 0x3, _0x5bc83d.scale * 0.55, _0x5bc83d.scale * 0.65);
                                    _0x1156b9.fill();
                                } else {
                                    if (_0x5bc83d.name == "sapling") {
                                        for (let _0x2cd918 = 0x0; _0x2cd918 < 0x2; ++_0x2cd918) {
                                            let _0x15e22c = _0x5bc83d.scale * (!_0x2cd918 ? 0x1 : 0.5);
                                            renderStar(_0x1156b9, 0x7, _0x15e22c, _0x15e22c * 0.7);
                                            _0x1156b9.fillStyle = !_0x2cd918 ? "#9ebf57" : "#b4db62";
                                            _0x1156b9.fill();
                                            if (!_0x2cd918) {
                                                _0x1156b9.stroke();
                                            }
                                        }
                                    } else {
                                        if (_0x5bc83d.name == "pit trap") {
                                            _0x1156b9.fillStyle = "#a5974c";
                                            renderStar(_0x1156b9, 0x3, _0x5bc83d.scale * 1.1, _0x5bc83d.scale * 1.1);
                                            _0x1156b9.fill();
                                            _0x1156b9.stroke();
                                            _0x1156b9.fillStyle = "#525252";
                                            renderStar(_0x1156b9, 0x3, _0x5bc83d.scale * 0.65, _0x5bc83d.scale * 0.65);
                                            _0x1156b9.fill();
                                        } else {
                                            if (_0x5bc83d.name == "boost pad") {
                                                _0x1156b9.fillStyle = "#7e7f82";
                                                renderRect(0x0, 0x0, _0x5bc83d.scale * 0x2, _0x5bc83d.scale * 0x2, _0x1156b9);
                                                _0x1156b9.fill();
                                                _0x1156b9.stroke();
                                                _0x1156b9.fillStyle = "#dbd97d";
                                                renderTriangle(_0x5bc83d.scale * 0x1, _0x1156b9);
                                            } else {
                                                if (_0x5bc83d.name == "turret") {
                                                    _0x1156b9.fillStyle = "#a5974c";
                                                    renderCircle(0x0, 0x0, _0x5bc83d.scale, _0x1156b9);
                                                    _0x1156b9.fill();
                                                    _0x1156b9.stroke();
                                                    _0x1156b9.fillStyle = "#939393";
                                                    renderRect(0x0, -25, _0x5bc83d.scale * 0.9, 0x32, _0x1156b9);
                                                    renderCircle(0x0, 0x0, _0x5bc83d.scale * 0.6, _0x1156b9);
                                                    _0x1156b9.fill();
                                                    _0x1156b9.stroke();
                                                } else {
                                                    if (_0x5bc83d.name == "platform") {
                                                        _0x1156b9.fillStyle = "#cebd5f";
                                                        let _0xad5c7c = _0x5bc83d.scale * 0x2;
                                                        let _0x49c689 = _0xad5c7c / 0x4;
                                                        let _0x37d769 = -(_0x5bc83d.scale / 0x2);
                                                        for (let _0x2e1e03 = 0x0; _0x2e1e03 < 0x4; ++_0x2e1e03) {
                                                            renderRect(_0x37d769 - _0x49c689 / 0x2, 0x0, _0x49c689, _0x5bc83d.scale * 0x2, _0x1156b9);
                                                            _0x1156b9.fill();
                                                            _0x1156b9.stroke();
                                                            _0x37d769 += _0xad5c7c / 0x4;
                                                        }
                                                    } else {
                                                        if (_0x5bc83d.name == "healing pad") {
                                                            _0x1156b9.fillStyle = "#7e7f82";
                                                            renderRect(0x0, 0x0, _0x5bc83d.scale * 0x2, _0x5bc83d.scale * 0x2, _0x1156b9);
                                                            _0x1156b9.fill();
                                                            _0x1156b9.stroke();
                                                            _0x1156b9.fillStyle = "#db6e6e";
                                                            renderRectCircle(0x0, 0x0, _0x5bc83d.scale * 0.65, 0x14, 0x4, _0x1156b9, true);
                                                        } else {
                                                            if (_0x5bc83d.name == "spawn pad") {
                                                                _0x1156b9.fillStyle = "#7e7f82";
                                                                renderRect(0x0, 0x0, _0x5bc83d.scale * 0x2, _0x5bc83d.scale * 0x2, _0x1156b9);
                                                                _0x1156b9.fill();
                                                                _0x1156b9.stroke();
                                                                _0x1156b9.fillStyle = "#71aad6";
                                                                renderCircle(0x0, 0x0, _0x5bc83d.scale * 0.6, _0x1156b9);
                                                            } else {
                                                                if (_0x5bc83d.name == "blocker") {
                                                                    _0x1156b9.fillStyle = "#7e7f82";
                                                                    renderCircle(0x0, 0x0, _0x5bc83d.scale, _0x1156b9);
                                                                    _0x1156b9.fill();
                                                                    _0x1156b9.stroke();
                                                                    _0x1156b9.rotate(Math.PI / 0x4);
                                                                    _0x1156b9.fillStyle = "#db6e6e";
                                                                    renderRectCircle(0x0, 0x0, _0x5bc83d.scale * 0.65, 0x14, 0x4, _0x1156b9, true);
                                                                } else if (_0x5bc83d.name == "teleporter") {
                                                                    _0x1156b9.fillStyle = "#7e7f82";
                                                                    renderCircle(0x0, 0x0, _0x5bc83d.scale, _0x1156b9);
                                                                    _0x1156b9.fill();
                                                                    _0x1156b9.stroke();
                                                                    _0x1156b9.rotate(Math.PI / 0x4);
                                                                    _0x1156b9.fillStyle = "#d76edb";
                                                                    renderCircle(0x0, 0x0, _0x5bc83d.scale * 0.5, _0x1156b9, true);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        _0x7e98aa = _0x4457d1;
        if (!_0x3a4bd5) {
            return itemSprites[_0x5bc83d.id] = _0x7e98aa;
        }
    }
    return _0x7e98aa;
}

function getItemSprite2(_0x185bca, _0x37d6da, _0x3399c8) {
    let _0x3093a6 = _0x185bca.name == "windmill" ? items.list[0x4].scale : _0x185bca.scale;
    mainContext.save();
    mainContext.translate(_0x37d6da, _0x3399c8);
    mainContext.rotate(_0x185bca.dir);
    mainContext.strokeStyle = "#525252";
    mainContext.lineWidth = 5.5;
    if (_0x185bca.name == "apple") {
        mainContext.fillStyle = "#c15555";
        renderCircle(0x0, 0x0, _0x185bca.scale, mainContext);
        mainContext.fillStyle = "#89a54c";
        let _0x34df54 = -(Math.PI / 0x2);
        renderLeaf(_0x185bca.scale * Math.cos(_0x34df54), _0x185bca.scale * Math.sin(_0x34df54), 0x19, _0x34df54 + Math.PI / 0x2, mainContext);
    } else {
        if (_0x185bca.name == "cookie") {
            mainContext.fillStyle = "#cca861";
            renderCircle(0x0, 0x0, _0x185bca.scale, mainContext);
            mainContext.fillStyle = "#937c4b";
            let _0x2aa45f = Math.PI * 0x2 / 0x4;
            let _0x23dd8a;
            for (let _0x40f6e5 = 0x0; _0x40f6e5 < 0x4; ++_0x40f6e5) {
                _0x23dd8a = UTILS.randInt(_0x185bca.scale / 2.5, _0x185bca.scale / 1.7);
                renderCircle(_0x23dd8a * Math.cos(_0x2aa45f * _0x40f6e5), _0x23dd8a * Math.sin(_0x2aa45f * _0x40f6e5), UTILS.randInt(0x4, 0x5), mainContext, true);
            }
        } else {
            if (_0x185bca.name == "cheese") {
                mainContext.fillStyle = "#f4f3ac";
                renderCircle(0x0, 0x0, _0x185bca.scale, mainContext);
                mainContext.fillStyle = "#c3c28b";
                let _0x2f1e25 = Math.PI * 0x2 / 0x4;
                let _0x5aaa19;
                for (let _0x5088c9 = 0x0; _0x5088c9 < 0x4; ++_0x5088c9) {
                    _0x5aaa19 = UTILS.randInt(_0x185bca.scale / 2.5, _0x185bca.scale / 1.7);
                    renderCircle(_0x5aaa19 * Math.cos(_0x2f1e25 * _0x5088c9), _0x5aaa19 * Math.sin(_0x2f1e25 * _0x5088c9), UTILS.randInt(0x4, 0x5), mainContext, true);
                }
            } else {
                if (_0x185bca.name == "wood wall" || _0x185bca.name == "stone wall" || _0x185bca.name == "castle wall") {
                    mainContext.fillStyle = _0x185bca.name == "castle wall" ? "#83898e" : _0x185bca.name == "wood wall" ? "#a5974c" : "#939393";
                    let _0x34ad4d = _0x185bca.name == "castle wall" ? 0x4 : 0x3;
                    renderStar(mainContext, _0x34ad4d, _0x185bca.scale * 1.1, _0x185bca.scale * 1.1);
                    mainContext.fill();
                    mainContext.stroke();
                    mainContext.fillStyle = _0x185bca.name == "castle wall" ? "#9da4aa" : _0x185bca.name == "wood wall" ? "#c9b758" : "#bcbcbc";
                    renderStar(mainContext, _0x34ad4d, _0x185bca.scale * 0.65, _0x185bca.scale * 0.65);
                    mainContext.fill();
                } else {
                    if (_0x185bca.name == "spikes" || _0x185bca.name == "greater spikes" || _0x185bca.name == "poison spikes" || _0x185bca.name == "spinning spikes") {
                        mainContext.fillStyle = _0x185bca.name == "poison spikes" ? "#7b935d" : "#939393";
                        let _0x4177e9 = _0x185bca.scale * 0.6;
                        renderStar(mainContext, _0x185bca.name == "spikes" ? 0x5 : 0x6, _0x185bca.scale, _0x4177e9);
                        mainContext.fill();
                        mainContext.stroke();
                        mainContext.fillStyle = "#a5974c";
                        renderCircle(0x0, 0x0, _0x4177e9, mainContext);
                        mainContext.fillStyle = "#c9b758";
                        renderCircle(0x0, 0x0, _0x4177e9 / 0x2, mainContext, true);
                    } else {
                        if (_0x185bca.name == "windmill" || _0x185bca.name == "faster windmill" || _0x185bca.name == "power mill") {
                            mainContext.fillStyle = "#a5974c";
                            renderCircle(0x0, 0x0, _0x3093a6, mainContext);
                            mainContext.fillStyle = "#c9b758";
                            renderRectCircle(0x0, 0x0, _0x3093a6 * 1.5, 0x1d, 0x4, mainContext);
                            mainContext.fillStyle = "#a5974c";
                            renderCircle(0x0, 0x0, _0x3093a6 * 0.5, mainContext);
                        } else {
                            if (_0x185bca.name == "mine") {
                                mainContext.fillStyle = "#939393";
                                renderStar(mainContext, 0x3, _0x185bca.scale, _0x185bca.scale);
                                mainContext.fill();
                                mainContext.stroke();
                                mainContext.fillStyle = "#bcbcbc";
                                renderStar(mainContext, 0x3, _0x185bca.scale * 0.55, _0x185bca.scale * 0.65);
                                mainContext.fill();
                            } else {
                                if (_0x185bca.name == "sapling") {
                                    for (let _0x30b656 = 0x0; _0x30b656 < 0x2; ++_0x30b656) {
                                        let _0x348ed7 = _0x185bca.scale * (!_0x30b656 ? 0x1 : 0.5);
                                        renderStar(mainContext, 0x7, _0x348ed7, _0x348ed7 * 0.7);
                                        mainContext.fillStyle = !_0x30b656 ? "#9ebf57" : "#b4db62";
                                        mainContext.fill();
                                        if (!_0x30b656) {
                                            mainContext.stroke();
                                        }
                                    }
                                } else {
                                    if (_0x185bca.name == "pit trap") {
                                        mainContext.fillStyle = "#a5974c";
                                        renderStar(mainContext, 0x3, _0x185bca.scale * 1.1, _0x185bca.scale * 1.1);
                                        mainContext.fill();
                                        mainContext.stroke();
                                        mainContext.fillStyle = "#525252";
                                        renderStar(mainContext, 0x3, _0x185bca.scale * 0.65, _0x185bca.scale * 0.65);
                                        mainContext.fill();
                                    } else {
                                        if (_0x185bca.name == "boost pad") {
                                            mainContext.fillStyle = "#7e7f82";
                                            renderRect(0x0, 0x0, _0x185bca.scale * 0x2, _0x185bca.scale * 0x2, mainContext);
                                            mainContext.fill();
                                            mainContext.stroke();
                                            mainContext.fillStyle = "#dbd97d";
                                            renderTriangle(_0x185bca.scale * 0x1, mainContext);
                                        } else {
                                            if (_0x185bca.name == "turret") {
                                                mainContext.fillStyle = "#a5974c";
                                                renderCircle(0x0, 0x0, _0x185bca.scale, mainContext);
                                                mainContext.fill();
                                                mainContext.stroke();
                                                mainContext.fillStyle = "#939393";
                                                renderRect(0x0, -25, _0x185bca.scale * 0.9, 0x32, mainContext);
                                                renderCircle(0x0, 0x0, _0x185bca.scale * 0.6, mainContext);
                                                mainContext.fill();
                                                mainContext.stroke();
                                            } else {
                                                if (_0x185bca.name == "platform") {
                                                    mainContext.fillStyle = "#cebd5f";
                                                    let _0x343582 = _0x185bca.scale * 0x2;
                                                    let _0x1cfd72 = _0x343582 / 0x4;
                                                    let _0x2dbcbd = -(_0x185bca.scale / 0x2);
                                                    for (let _0x214ef4 = 0x0; _0x214ef4 < 0x4; ++_0x214ef4) {
                                                        renderRect(_0x2dbcbd - _0x1cfd72 / 0x2, 0x0, _0x1cfd72, _0x185bca.scale * 0x2, mainContext);
                                                        mainContext.fill();
                                                        mainContext.stroke();
                                                        _0x2dbcbd += _0x343582 / 0x4;
                                                    }
                                                } else {
                                                    if (_0x185bca.name == "healing pad") {
                                                        mainContext.fillStyle = "#7e7f82";
                                                        renderRect(0x0, 0x0, _0x185bca.scale * 0x2, _0x185bca.scale * 0x2, mainContext);
                                                        mainContext.fill();
                                                        mainContext.stroke();
                                                        mainContext.fillStyle = "#db6e6e";
                                                        renderRectCircle(0x0, 0x0, _0x185bca.scale * 0.65, 0x14, 0x4, mainContext, true);
                                                    } else {
                                                        if (_0x185bca.name == "spawn pad") {
                                                            mainContext.fillStyle = "#7e7f82";
                                                            renderRect(0x0, 0x0, _0x185bca.scale * 0x2, _0x185bca.scale * 0x2, mainContext);
                                                            mainContext.fill();
                                                            mainContext.stroke();
                                                            mainContext.fillStyle = "#71aad6";
                                                            renderCircle(0x0, 0x0, _0x185bca.scale * 0.6, mainContext);
                                                        } else {
                                                            if (_0x185bca.name == "blocker") {
                                                                mainContext.fillStyle = "#7e7f82";
                                                                renderCircle(0x0, 0x0, _0x185bca.scale, mainContext);
                                                                mainContext.fill();
                                                                mainContext.stroke();
                                                                mainContext.rotate(Math.PI / 0x4);
                                                                mainContext.fillStyle = "#db6e6e";
                                                                renderRectCircle(0x0, 0x0, _0x185bca.scale * 0.65, 0x14, 0x4, mainContext, true);
                                                            } else if (_0x185bca.name == "teleporter") {
                                                                mainContext.fillStyle = "#7e7f82";
                                                                renderCircle(0x0, 0x0, _0x185bca.scale, mainContext);
                                                                mainContext.fill();
                                                                mainContext.stroke();
                                                                mainContext.rotate(Math.PI / 0x4);
                                                                mainContext.fillStyle = "#d76edb";
                                                                renderCircle(0x0, 0x0, _0x185bca.scale * 0.5, mainContext, true);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    mainContext.restore();
}
var isally = function(_0xf0207d) {
    for (let _0x2a3e63 = 0x0; _0x2a3e63 < alliancePlayers.length; _0x2a3e63 += 0x2) {
        if (_0xf0207d == alliancePlayers[_0x2a3e63]) {
            return true;
        }
    }
};
let objSprites = [];

function getObjSprite(_0x246770, _0x3a3ca2) {
    let _0x1858a0 = itemSprites[_0x246770.id + (player && _0x246770.owner && _0x246770.owner.sid == player.sid ? 0x0 : player && player.team && _0x246770.owner && isally(_0x246770.owner.sid) ? 0x19 : 0x32)];
    if (!_0x1858a0) {
        let _0x5eb35e = document.createElement("canvas");
        _0x5eb35e.width = _0x5eb35e.height = _0x246770.scale * 2.5 + 5.5 + (items.list[_0x246770.id].spritePadding || 0x0) + 0xf;
        let _0x5d6693 = _0x5eb35e.getContext("2d");
        _0x5d6693.translate(_0x5eb35e.width / 0x2, _0x5eb35e.height / 0x2);
        _0x5d6693.rotate(Math.PI / 0x2);
        _0x5d6693.strokeStyle = "#525252";
        _0x5d6693.lineWidth = 5.5;
        if (_0x246770.name == "spikes" || _0x246770.name == "greater spikes" || _0x246770.name == "poison spikes" || _0x246770.name == "spinning spikes") {
            _0x5d6693.fillStyle = _0x246770.name == "poison spikes" ? "#7b935d" : "#939393";
            let _0x3d183c = _0x246770.scale * 0.6;
            renderStar(_0x5d6693, _0x246770.name == "spikes" ? 0x5 : 0x6, _0x246770.scale, _0x3d183c);
            _0x5d6693.fill();
            _0x5d6693.stroke();
            _0x5d6693.fillStyle = "#a5974c";
            renderCircle(0x0, 0x0, _0x3d183c, _0x5d6693);
            renderCircle(0x0, 0x0, _0x3d183c / 0x2, _0x5d6693, true);
        } else if (_0x246770.name == "pit trap") {
            _0x5d6693.fillStyle = "#a5974c";
            renderStar(_0x5d6693, 0x3, _0x246770.scale * 1.1, _0x246770.scale * 1.1);
            _0x5d6693.fill();
            _0x5d6693.stroke();
            renderStar(_0x5d6693, 0x3, _0x246770.scale * 0.65, _0x246770.scale * 0.65);
            _0x5d6693.fill();
        }
        _0x1858a0 = _0x5eb35e;
        _0x5d6693.globalAlpha = 0.8;
        if (!_0x3a3ca2) {
            _0x5d6693.fillStyle = player && _0x246770.owner && _0x246770.owner.sid == player.sid ? "" : _0x246770.owner && player && player.team && isally(_0x246770.owner.sid) ? "#2a2770" : "#B61C1C";
            _0x5d6693.fillStyle = player && _0x246770.owner && _0x246770.owner.sid == player.sid ? "" : _0x246770.owner && player && player.team && isally(_0x246770.owner.sid) ? "#2a2770" : "#B61C1C";
        }
        if (_0x246770.name.includes("spike") && _0x5d6693.fill() || _0x246770.name.includes("pit trap", _0x5d6693.globalAlpha = 0.6)) {
            _0x5d6693.fill();
        }
        _0x1858a0 = _0x5eb35e;
        if (!_0x3a3ca2) {
            itemSprites[_0x246770.id + (player && _0x246770.owner && _0x246770.owner.sid == player.sid ? 0x0 : player && player.team && _0x246770.owner && isally(_0x246770.owner.sid) ? 0x19 : 0x32)] = _0x1858a0;
        }
    }
    return _0x1858a0;
}

function getMarkSprite(_0x4640ed, _0x5ea89c, _0x3d81b3, _0xbaab0d) {
    _0x5ea89c.lineWidth = 5.5;
    mainContext.globalAlpha = 0.35;
    _0x5ea89c.strokeStyle = "#525252";
    _0x5ea89c.save();
    _0x5ea89c.translate(_0x3d81b3, _0xbaab0d);
    _0x5ea89c.rotate(_0x4640ed.dir || getAttackDir());
    if (_0x4640ed.name == "spikes" || _0x4640ed.name == "greater spikes" || _0x4640ed.name == "poison spikes" || _0x4640ed.name == "spinning spikes") {
        _0x5ea89c.fillStyle = _0x4640ed.name == "poison spikes" ? "#7b935d" : "#939393";
        var _0x343fe2 = _0x4640ed.scale * 0.6;
        renderStar(_0x5ea89c, _0x4640ed.name == "spikes" ? 0x5 : 0x6, _0x4640ed.scale, _0x343fe2);
        _0x5ea89c.fill();
        _0x5ea89c.stroke();
        _0x5ea89c.fillStyle = "#a5974c";
        renderCircle(0x0, 0x0, _0x343fe2, _0x5ea89c);
        if (player && _0x4640ed.owner && player.sid != _0x4640ed.owner.sid && !tmpObj.findAllianceBySid(_0x4640ed.owner.sid)) {
            _0x5ea89c.fillStyle = "#a34040";
        } else {
            _0x5ea89c.fillStyle = "#c9b758";
        }
        renderCircle(0x0, 0x0, _0x343fe2 / 0x2, _0x5ea89c, true);
    } else {
        if (_0x4640ed.name == "windmill" || _0x4640ed.name == "faster windmill" || _0x4640ed.name == "power mill") {
            _0x5ea89c.fillStyle = "#a5974c";
            renderCircle(0x0, 0x0, _0x4640ed.scale, _0x5ea89c);
            _0x5ea89c.fillStyle = "#c9b758";
            renderRectCircle(0x0, 0x0, _0x4640ed.scale * 1.5, 0x1d, 0x4, _0x5ea89c);
            _0x5ea89c.fillStyle = "#a5974c";
            renderCircle(0x0, 0x0, _0x4640ed.scale * 0.5, _0x5ea89c);
        } else if (_0x4640ed.name == "pit trap") {
            _0x5ea89c.fillStyle = "#a5974c";
            renderStar(_0x5ea89c, 0x3, _0x4640ed.scale * 1.1, _0x4640ed.scale * 1.1);
            _0x5ea89c.fill();
            _0x5ea89c.stroke();
            if (player && _0x4640ed.owner && player.sid != _0x4640ed.owner.sid && !tmpObj.findAllianceBySid(_0x4640ed.owner.sid)) {
                _0x5ea89c.fillStyle = "#a34040";
            } else {
                _0x5ea89c.fillStyle = "#525252";
            }
            renderStar(_0x5ea89c, 0x3, _0x4640ed.scale * 0.65, _0x4640ed.scale * 0.65);
            _0x5ea89c.fill();
        }
    }
    _0x5ea89c.restore();
}

function isOnScreen(_0xb29e32, _0x157bd8, _0x5db427) {
    return _0xb29e32 + _0x5db427 >= 0x0 && _0xb29e32 - _0x5db427 <= maxScreenWidth && _0x157bd8 + _0x5db427 >= 0x0 && (_0x157bd8, _0x5db427, maxScreenHeight);
}

function renderGameObjects(_0x4d9bba, _0x4bfca8, _0x24e7f6) {
    let _0x3fe48b;
    let _0x19ea93;
    let _0x16cfff;
    gameObjects.forEach(_0x1ec9e3 => {
        tmpObj = _0x1ec9e3;
        if (tmpObj.alive) {
            _0x19ea93 = tmpObj.x + tmpObj.xWiggle - _0x4bfca8;
            _0x16cfff = tmpObj.y + tmpObj.yWiggle - _0x24e7f6;
            if (_0x4d9bba == 0x0) {
                tmpObj.update(delta);
            }
            mainContext.globalAlpha = tmpObj.alpha;
            if (tmpObj.layer == _0x4d9bba && isOnScreen(_0x19ea93, _0x16cfff, tmpObj.scale + (tmpObj.blocker || 0x0))) {
                if (tmpObj.isItem) {
                    if ((tmpObj.dmg || tmpObj.trap) && !tmpObj.isTeamObject(player)) {
                        _0x3fe48b = getObjSprite(tmpObj);
                    } else {
                        _0x3fe48b = getItemSprite(tmpObj);
                    }
                    mainContext.save();
                    mainContext.translate(_0x19ea93, _0x16cfff);
                    if (config.idk) {
                        mainContext.rotate(tmpObj.dir);
                    }
                    if (!tmpObj.active) {
                        mainContext.scale(tmpObj.visScale / tmpObj.scale, tmpObj.visScale / tmpObj.scale);
                    }
                    mainContext.drawImage(_0x3fe48b, -(_0x3fe48b.width / 0x2), -(_0x3fe48b.height / 0x2));
                    if (tmpObj.blocker) {
                        mainContext.strokeStyle = "#db6e6e";
                        mainContext.globalAlpha = 0.3;
                        mainContext.lineWidth = 0x6;
                        renderCircle(0x0, 0x0, tmpObj.blocker, mainContext, false, true);
                    }
                    mainContext.restore();
                } else {
                    renderResTest(tmpObj, _0x19ea93, _0x16cfff);
                }
                if (!tmpObj.alive && tmpObj.alpha > 0x0) {
                    tmpObj.alpha -= 0.01;
                }
            }
        }
    });
    if (_0x4d9bba == 0x0 && placeVisible.length) {
        placeVisible.forEach(_0x5012d0 => {
            _0x19ea93 = _0x5012d0.x - _0x4bfca8;
            _0x16cfff = _0x5012d0.y - _0x24e7f6;
            markObject(_0x5012d0, _0x19ea93, _0x16cfff);
        });
    }
}

function markObject(_0x4ce017, _0x338364, _0x258019) {
    yen(mainContext, _0x338364, _0x258019);
}

function yen(_0x4aab85, _0x23169c, _0x8bbd8b) {
    _0x4aab85.fillStyle = "rgba(133, 208, 255, 1)";
    _0x4aab85.strokeStyle = "cyan";
    _0x4aab85.beginPath();
    _0x4aab85.globalAlpha = 0.25;
    _0x4aab85.arc(_0x23169c, _0x8bbd8b, 0x32, 0x0, Math.PI * 0x2);
    _0x4aab85.fill();
    _0x4aab85.globalAlpha = 0.55;
    _0x4aab85.arc(_0x23169c, _0x8bbd8b, 0x32, 0x0, Math.PI * 0x2);
    _0x4aab85.stroke();
    _0x4aab85.globalAlpha = 0x1;
    _0x4aab85.closePath();
}
class MapPing {
    constructor(_0x2a1124, _0x16f7b7) {
        this.init = function(_0x22120e, _0x185de5) {
            this.scale = 0x0;
            this.x = _0x22120e;
            this.y = _0x185de5;
            this.active = true;
        };
        this.update = function(_0x595248, _0xaa1a76) {
            if (this.active) {
                this.scale += 0.05 * _0xaa1a76;
                if (this.scale >= _0x16f7b7) {
                    this.active = false;
                } else {
                    _0x595248.globalAlpha = 0x1 - Math.max(0x0, this.scale / _0x16f7b7);
                    _0x595248.beginPath();
                    _0x595248.arc(this.x / config.mapScale * mapDisplay.width, this.y / config.mapScale * mapDisplay.width, this.scale, 0x0, 0x2 * Math.PI);
                    _0x595248.stroke();
                }
            }
        };
        this.color = _0x2a1124;
    }
}

function pingMap(_0x383945, _0x3ad018) {
    tmpPing = mapPings.find(_0x12b3ce => !_0x12b3ce.active);
    if (!tmpPing) {
        tmpPing = new MapPing("#fff", config.mapPingScale);
        mapPings.push(tmpPing);
    }
    tmpPing.init(_0x383945, _0x3ad018);
}

function updateMapMarker() {
    mapMarker.x = player.x;
    mapMarker.y = player.y;
}

function renderMinimap(_0x5e8b91) {
    if (player && player.alive) {
        mapContext.clearRect(0x0, 0x0, mapDisplay.width, mapDisplay.height);
        mapContext.lineWidth = 0x4;
        for (let _0x45238a = 0x0; _0x45238a < mapPings.length; ++_0x45238a) {
            tmpPing = mapPings[_0x45238a];
            mapContext.strokeStyle = tmpPing.color;
            tmpPing.update(mapContext, _0x5e8b91);
        }
        mapContext.globalAlpha = 0x1;
        mapContext.fillStyle = "#ff0000";
        if (breakTrackers.length) {
            mapContext.fillStyle = "#abcdef";
            mapContext.font = "34px Hammersmith One";
            mapContext.textBaseline = "middle";
            mapContext.textAlign = "center";
            for (let _0x51560a = 0x0; _0x51560a < breakTrackers.length;) {
                mapContext.fillText("!", breakTrackers[_0x51560a].x / config.mapScale * mapDisplay.width, breakTrackers[_0x51560a].y / config.mapScale * mapDisplay.height);
                _0x51560a += 0x2;
            }
        }
        mapContext.globalAlpha = 0x1;
        mapContext.fillStyle = "#fff";
        renderCircle(player.x / config.mapScale * mapDisplay.width, player.y / config.mapScale * mapDisplay.height, 0x7, mapContext, true);
        mapContext.fillStyle = "rgba(255,255,255,0.35)";
        if (player.team && minimapData) {
            for (let _0x4bb50d = 0x0; _0x4bb50d < minimapData.length;) {
                renderCircle(minimapData[_0x4bb50d] / config.mapScale * mapDisplay.width, minimapData[_0x4bb50d + 0x1] / config.mapScale * mapDisplay.height, 0x7, mapContext, true);
                _0x4bb50d += 0x2;
            }
        }
        if (lastDeath) {
            mapContext.fillStyle = "#fc5553";
            mapContext.font = "34px Hammersmith One";
            mapContext.textBaseline = "middle";
            mapContext.textAlign = "center";
            mapContext.fillText("x", lastDeath.x / config.mapScale * mapDisplay.width, lastDeath.y / config.mapScale * mapDisplay.height);
        }
    }
}
var iconSprites = {};
var icons = ["crown", "skull", "crosshair", "crosshair2", "crosshair3"];

function loadIcons() {
    for (var _0x16eccd = 0x0; _0x16eccd < icons.length; ++_0x16eccd) {
        var _0x208923 = new Image();
        _0x208923.onload = function() {
            this.isLoaded = true;
        };
        if (icons[_0x16eccd] == "crosshair") {
            _0x208923.src = "https://upload.wikimedia.org/wikipedia/commons/thumb/9/95/Crosshairs_Red.svg/100px-Crosshairs_Red.svg.png";
        } else {
            if (icons[_0x16eccd] == "crosshair2") {
                _0x208923.src = "https://cdn.discordapp.com/attachments/1001384433078779927/1149285738412769300/newawwddd.png?ex=666d68c0&is=666c1740&hm=fb4172afadb840745a614008bc2dceac93f8e227f6a2de4548479c02fd13bea4&";
            } else if (icons[_0x16eccd] == "crosshair3") {
                _0x208923.src = "https://icones.pro/wp-content/uploads/2021/08/symbole-cible-noir.png";
            } else {
                _0x208923.src = ".././img/icons/" + icons[_0x16eccd] + ".png";
            }
        }
        iconSprites[icons[_0x16eccd]] = _0x208923;
    }
}
loadIcons();

function updateGame() {
    if (player) {
        let _0x2b8c6f = UTILS.getDistance(camX, camY, player.x, player.y);
        let _0x1e8654 = UTILS.getDirection(player.x, player.y, camX, camY);
        let _0x4b4fe3 = Math.min(_0x2b8c6f * 0.0045 * delta, _0x2b8c6f);
        if (_0x2b8c6f > 0.05) {
            camX += _0x4b4fe3 * Math.cos(_0x1e8654);
            camY += _0x4b4fe3 * Math.sin(_0x1e8654);
        } else {
            camX = player.x;
            camY = player.y;
        }
    } else {
        camX = config.mapScale / 0x2 + config.riverWidth;
        camY = config.mapScale / 0x2;
    }
    let _0x41dba0 = now - 0x3e8 / config.serverUpdateRate;
    let _0x4eacd1;
    for (let _0x40bf0b = 0x0; _0x40bf0b < players.length + ais.length; ++_0x40bf0b) {
        tmpObj = players[_0x40bf0b] || ais[_0x40bf0b - players.length];
        if (tmpObj && tmpObj.visible) {
            if (tmpObj.forcePos) {
                tmpObj.x = tmpObj.x2;
                tmpObj.y = tmpObj.y2;
                tmpObj.dir = tmpObj.d2;
            } else {
                let _0xbf330 = tmpObj.t2 - tmpObj.t1;
                let _0x3e5998 = _0x41dba0 - tmpObj.t1;
                let _0x1cabce = _0x3e5998 / _0xbf330;
                tmpObj.dt += delta;
                let _0x564dc2 = Math.min(1.7, tmpObj.dt / 0xaa);
                _0x4eacd1 = tmpObj.x2 - tmpObj.x1;
                tmpObj.x = tmpObj.x1 + _0x4eacd1 * _0x564dc2;
                _0x4eacd1 = tmpObj.y2 - tmpObj.y1;
                tmpObj.y = tmpObj.y1 + _0x4eacd1 * _0x564dc2;
                tmpObj.dir = Math.lerpAngle(tmpObj.d2, tmpObj.d1, Math.min(1.2, _0x1cabce));
            }
        }
    }
    var _0xf8aef = camX - maxScreenWidth / 0x2;
    var _0x19aaa6 = camY - maxScreenHeight / 0x2;
    if (config.snowBiomeTop - _0x19aaa6 <= 0x0 && config.mapScale - config.snowBiomeTop - _0x19aaa6 >= maxScreenHeight) {
        mainContext.fillStyle = "#b6db66";
        mainContext.fillRect(0x0, 0x0, maxScreenWidth, maxScreenHeight);
    } else {
        if (config.mapScale - config.snowBiomeTop - _0x19aaa6 <= 0x0) {
            mainContext.fillStyle = "#dbc666";
            mainContext.fillRect(0x0, 0x0, maxScreenWidth, maxScreenHeight);
        } else {
            if (config.snowBiomeTop - _0x19aaa6 >= maxScreenHeight) {
                mainContext.fillStyle = "#fff";
                mainContext.fillRect(0x0, 0x0, maxScreenWidth, maxScreenHeight);
            } else if (config.snowBiomeTop - _0x19aaa6 >= 0x0) {
                mainContext.fillStyle = "#fff";
                mainContext.fillRect(0x0, 0x0, maxScreenWidth, config.snowBiomeTop - _0x19aaa6);
                mainContext.fillStyle = "#b6db66";
                mainContext.fillRect(0x0, config.snowBiomeTop - _0x19aaa6, maxScreenWidth, maxScreenHeight - (config.snowBiomeTop - _0x19aaa6));
            } else {
                mainContext.fillStyle = "#b6db66";
                mainContext.fillRect(0x0, 0x0, maxScreenWidth, config.mapScale - config.snowBiomeTop - _0x19aaa6);
                mainContext.fillStyle = "#dbc666";
                mainContext.fillRect(0x0, config.mapScale - config.snowBiomeTop - _0x19aaa6, maxScreenWidth, maxScreenHeight - (config.mapScale - config.snowBiomeTop - _0x19aaa6));
            }
        }
    }
    if (!firstSetup) {
        waterMult += waterPlus * config.waveSpeed * delta;
        if (waterMult >= config.waveMax) {
            waterMult = config.waveMax;
            waterPlus = -0x1;
        } else if (waterMult <= 0x1) {
            waterMult = waterPlus = 0x1;
        }
        mainContext.globalAlpha = 0x1;
        mainContext.fillStyle = "#dbc666";
        renderWaterBodies(_0xf8aef, _0x19aaa6, mainContext, config.riverPadding);
        mainContext.fillStyle = "#91b2db";
        renderWaterBodies(_0xf8aef, _0x19aaa6, mainContext, (waterMult - 0x1) * 0xfa);
    }
    mainContext.lineWidth = config.idk ? 0x3 : 0x4;
    mainContext.strokeStyle = "#000";
    mainContext.globalAlpha = config.idk ? 0.05 : 0.06;
    mainContext.beginPath();
    let _0x556650 = config.idk ? 0x5a0 : 0x3c;
    for (var _0x445128 = -_0xf8aef % _0x556650; _0x445128 < maxScreenWidth; _0x445128 += _0x556650) {
        if (_0x445128 > 0x0) {
            mainContext.moveTo(_0x445128, 0x0);
            mainContext.lineTo(_0x445128, maxScreenHeight);
        }
    }
    for (var _0x563a5f = -_0x19aaa6 % _0x556650; _0x563a5f < maxScreenHeight; _0x563a5f += _0x556650) {
        if (_0x563a5f > 0x0) {
            mainContext.moveTo(0x0, _0x563a5f);
            mainContext.lineTo(maxScreenWidth, _0x563a5f);
        }
    }
    mainContext.stroke();
    if (player && pathFind.active && pathFind.array && (pathFind.chaseNear ? enemy.length : true)) {
        mainContext.lineWidth = player.scale / 0x5;
        mainContext.globalAlpha = 0x1;
        mainContext.strokeStyle = "red";
        mainContext.beginPath();
        pathFind.array.forEach((_0x3b5582, _0x3b9dca) => {
            let _0x230a96 = {
                x: pathFind.scale / pathFind.grid * _0x3b5582.x,
                y: pathFind.scale / pathFind.grid * _0x3b5582.y
            };
            let _0x175207 = {
                x: player.x2 - pathFind.scale / 0x2 + _0x230a96.x - _0xf8aef,
                y: player.y2 - pathFind.scale / 0x2 + _0x230a96.y - _0x19aaa6
            };
            if (_0x3b9dca == 0x0) {
                mainContext.moveTo(_0x175207.x, _0x175207.y);
            } else {
                mainContext.lineTo(_0x175207.x, _0x175207.y);
            }
        });
        mainContext.stroke();
    }
    mainContext.globalAlpha = 0x1;
    mainContext.strokeStyle = "#525252";
    renderDeadPlayers(_0xf8aef, _0x19aaa6);
    mainContext.globalAlpha = 0x1;
    mainContext.strokeStyle = "#525252";
    renderGameObjects(-0x1, _0xf8aef, _0x19aaa6);
    mainContext.globalAlpha = 0x1;
    mainContext.lineWidth = 5.5;
    renderProjectiles(0x0, _0xf8aef, _0x19aaa6);
    renderPlayers(_0xf8aef, _0x19aaa6, 0x0);
    mainContext.globalAlpha = 0x1;
    for (let _0x3eeb7c = 0x0; _0x3eeb7c < ais.length; ++_0x3eeb7c) {
        tmpObj = ais[_0x3eeb7c];
        if (tmpObj.active && tmpObj.visible) {
            tmpObj.animate(delta);
            mainContext.save();
            mainContext.translate(tmpObj.x - _0xf8aef, tmpObj.y - _0x19aaa6);
            mainContext.rotate(tmpObj.dir + tmpObj.dirPlus - Math.PI / 0x2);
            renderAI(tmpObj, mainContext);
            mainContext.restore();
        }
    }
    renderGameObjects(0x0, _0xf8aef, _0x19aaa6);
    renderProjectiles(0x1, _0xf8aef, _0x19aaa6);
    renderGameObjects(0x1, _0xf8aef, _0x19aaa6);
    renderPlayers(_0xf8aef, _0x19aaa6, 0x1);
    renderGameObjects(0x2, _0xf8aef, _0x19aaa6);
    renderGameObjects(0x3, _0xf8aef, _0x19aaa6);
    mainContext.fillStyle = "#000";
    mainContext.globalAlpha = 0.09;
    if (_0xf8aef <= 0x0) {
        mainContext.fillRect(0x0, 0x0, -_0xf8aef, maxScreenHeight);
    }
    if (config.mapScale - _0xf8aef <= maxScreenWidth) {
        var _0x39b32e = Math.max(0x0, -_0x19aaa6);
        mainContext.fillRect(config.mapScale - _0xf8aef, _0x39b32e, maxScreenWidth - (config.mapScale - _0xf8aef), maxScreenHeight - _0x39b32e);
    }
    if (_0x19aaa6 <= 0x0) {
        mainContext.fillRect(-_0xf8aef, 0x0, maxScreenWidth + _0xf8aef, -_0x19aaa6);
    }
    if (config.mapScale - _0x19aaa6 <= maxScreenHeight) {
        var _0x4d9b51 = Math.max(0x0, -_0xf8aef);
        var _0x3ac39b = 0x0;
        if (config.mapScale - _0xf8aef <= maxScreenWidth) {
            _0x3ac39b = maxScreenWidth - (config.mapScale - _0xf8aef);
        }
        mainContext.fillRect(_0x4d9b51, config.mapScale - _0x19aaa6, maxScreenWidth - _0x4d9b51 - _0x3ac39b, maxScreenHeight - (config.mapScale - _0x19aaa6));
    }
    mainContext.globalAlpha = 0x1;
    mainContext.fillStyle = "rgba(0, 0, 70, " + nightModeDay.trans + ")";
    mainContext.fillRect(0x0, 0x0, maxScreenWidth, maxScreenHeight);
    mainContext.strokeStyle = "#3d3f42";
    mainContext.globalAlpha = 0x1;
    for (let _0x45c91a = 0x0; _0x45c91a < players.length + ais.length; ++_0x45c91a) {
        tmpObj = players[_0x45c91a] || ais[_0x45c91a - players.length];
        if (tmpObj.visible) {
            mainContext.strokeStyle = "#3d3f42";
            if (tmpObj.skinIndex != 0xa || tmpObj == player || tmpObj.team && tmpObj.team == player.team) {
                let _0x36aae6 = (tmpObj.team ? "[" + tmpObj.team + "] " : "") + (tmpObj.name || "");
                if (_0x36aae6 != "") {
                    mainContext.font = (tmpObj.nameScale || 0x1e) + "px Hammersmith One";
                    mainContext.fillStyle = "#fff";
                    mainContext.textBaseline = "middle";
                    mainContext.textAlign = "center";
                    mainContext.lineWidth = tmpObj.nameScale ? 0xb : 0x8;
                    mainContext.lineJoin = "round";
                    mainContext.strokeText(_0x36aae6, tmpObj.x - _0xf8aef, tmpObj.y - _0x19aaa6 - tmpObj.scale - config.nameY);
                    mainContext.fillText(_0x36aae6, tmpObj.x - _0xf8aef, tmpObj.y - _0x19aaa6 - tmpObj.scale - config.nameY);
                    if (tmpObj.isLeader && iconSprites.crown.isLoaded) {
                        let _0x207eac = config.crownIconScale;
                        let _0x234287 = tmpObj.x - _0xf8aef - _0x207eac / 0x2 - mainContext.measureText(_0x36aae6).width / 0x2 - config.crownPad;
                        mainContext.drawImage(iconSprites.crown, _0x234287, tmpObj.y - _0x19aaa6 - tmpObj.scale - config.nameY - _0x207eac / 0x2 - 0x5, _0x207eac, _0x207eac);
                    }
                    if (tmpObj.iconIndex == 0x1 && iconSprites.skull.isLoaded) {
                        let _0x5c7e33 = config.crownIconScale;
                        let _0x10f8f2 = tmpObj.x - _0xf8aef - _0x5c7e33 / 0x2 + mainContext.measureText(_0x36aae6).width / 0x2 + config.crownPad;
                        mainContext.drawImage(iconSprites.skull, _0x10f8f2, tmpObj.y - _0x19aaa6 - tmpObj.scale - config.nameY - _0x5c7e33 / 0x2 - 0x5, _0x5c7e33, _0x5c7e33);
                    }
                    if (tmpObj.isPlayer && instaC.wait && near == tmpObj && iconSprites.crosshair.isLoaded && enemy.length) {
                        let _0x4db146 = tmpObj.scale * 2.2;
                        mainContext.drawImage(iconSprites.crosshair, tmpObj.x - _0xf8aef - _0x4db146 / 0x2, tmpObj.y - _0x19aaa6 - _0x4db146 / 0x2, _0x4db146, _0x4db146);
                    }
                }
                if (tmpObj.health > 0x0) {
                    mainContext.fillStyle = "#3d3f42";
                    mainContext.roundRect(tmpObj.x - _0xf8aef - config.healthBarWidth - config.healthBarPad, tmpObj.y - _0x19aaa6 + tmpObj.scale + config.nameY, config.healthBarWidth * 0x2 + config.healthBarPad * 0x2, 0x11, 0x8);
                    mainContext.fill();
                    mainContext.fillStyle = tmpObj == player || tmpObj.team && tmpObj.team == player.team ? "#8ecc51" : "#cc5151";
                    mainContext.roundRect(tmpObj.x - _0xf8aef - config.healthBarWidth, tmpObj.y - _0x19aaa6 + tmpObj.scale + config.nameY + config.healthBarPad, config.healthBarWidth * 0x2 * (tmpObj.health / tmpObj.maxHealth), 0x11 - config.healthBarPad * 0x2, 0x7);
                    mainContext.fill();
                }
                if (tmpObj.isPlayer) {
                    mainContext.globalAlpha = 0x1;
                    let _0x53c85c = {
                        primary: tmpObj.primaryIndex == undefined ? 0x1 : (items.weapons[tmpObj.primaryIndex].speed - tmpObj.reloads[tmpObj.primaryIndex]) / items.weapons[tmpObj.primaryIndex].speed,
                        secondary: tmpObj.secondaryIndex == undefined ? 0x1 : (items.weapons[tmpObj.secondaryIndex].speed - tmpObj.reloads[tmpObj.secondaryIndex]) / items.weapons[tmpObj.secondaryIndex].speed,
                        turret: (0x9c4 - tmpObj.reloads[0x35]) / 0x9c4
                    };
                    if (!tmpObj.currentReloads) {
                        tmpObj.currentReloads = {
                            primary: _0x53c85c.primary,
                            secondary: _0x53c85c.secondary,
                            turret: _0x53c85c.turret
                        };
                    }
                    tmpObj.currentReloads.primary = 0.7 * tmpObj.currentReloads.primary + 0.3 * _0x53c85c.primary;
                    tmpObj.currentReloads.secondary = 0.7 * tmpObj.currentReloads.secondary + 0.3 * _0x53c85c.secondary;
                    tmpObj.currentReloads.turret = 0.7 * tmpObj.currentReloads.turret + 0.3 * _0x53c85c.turret;
                    if (tmpObj.secondaryIndex == undefined ? false : tmpObj.reloads[tmpObj.secondaryIndex] > 0x0) {
                        mainContext.fillStyle = "#3d3f42";
                        mainContext.roundRect(tmpObj.x - _0xf8aef - config.healthBarPad, tmpObj.y - _0x19aaa6 + tmpObj.scale + config.nameY - 0xd, config.healthBarWidth + config.healthBarPad * 0x2, 0x11, 0x8);
                        mainContext.fill();
                        mainContext.fillStyle = tmpObj.secondaryIndex == undefined || tmpObj.reloads[tmpObj.secondaryIndex] == 0x0 ? "#8e97f5" : "#8e97f5";
                        mainContext.roundRect(tmpObj.x - _0xf8aef, tmpObj.y - _0x19aaa6 + tmpObj.scale + config.nameY - 0xd + config.healthBarPad, config.healthBarWidth * tmpObj.currentReloads.secondary, 0x11 - config.healthBarPad * 0x2, 0x7);
                        mainContext.fill();
                    }
                    if (tmpObj.primaryIndex == undefined ? false : tmpObj.reloads[tmpObj.primaryIndex] > 0x0) {
                        mainContext.fillStyle = "#3d3f42";
                        mainContext.roundRect(tmpObj.x - _0xf8aef - config.healthBarWidth - config.healthBarPad, tmpObj.y - _0x19aaa6 + tmpObj.scale + config.nameY - 0xd, config.healthBarWidth + config.healthBarPad * 0x2, 0x11, 0x8);
                        mainContext.fill();
                        mainContext.fillStyle = tmpObj.primaryIndex == undefined || tmpObj.reloads[tmpObj.primaryIndex] == 0x0 ? "#8e97f5" : "#8e97f5";
                        mainContext.roundRect(tmpObj.x - _0xf8aef - config.healthBarWidth, tmpObj.y - _0x19aaa6 + tmpObj.scale + config.nameY - 0xd + config.healthBarPad, config.healthBarWidth * tmpObj.currentReloads.primary, 0x11 - config.healthBarPad * 0x2, 0x7);
                        mainContext.fill();
                    }
                }
                if (tmpObj == player) {
                    mainContext.globalAlpha = 0x1;
                    mainContext.font = "30px Hammersmith One";
                    mainContext.fillStyle = "#fff000";
                    mainContext.strokeStyle = "#3d3f42";
                    mainContext.textBaseline = "middle";
                    mainContext.textAlign = "center";
                    mainContext.lineWidth = 0x8;
                    mainContext.lineJoin = "round";
                    let _0x28e35c = config.crownIconScale;
                    let _0x36c44e = tmpObj.x - _0xf8aef - _0x28e35c / 0x2 + mainContext.measureText(_0x36aae6).width / 0x2 + config.crownPad + (tmpObj.iconIndex == 0x1 ? 82.5 : 0x1e);
                    mainContext.strokeText(tmpObj.skinIndex == 0x2d && tmpObj.shameTimer > 0x0 ? tmpObj.shameTimer : tmpObj.shameCount, _0x36c44e, tmpObj.y - _0x19aaa6 - tmpObj.scale - config.nameY);
                    mainContext.fillText(tmpObj.skinIndex == 0x2d && tmpObj.shameTimer > 0x0 ? tmpObj.shameTimer : tmpObj.shameCount, _0x36c44e, tmpObj.y - _0x19aaa6 - tmpObj.scale - config.nameY);
                }
                if (tmpObj != player && tmpObj.isPlayer) {
                    mainContext.globalAlpha = 0x1;
                    mainContext.font = "20px Hammersmith One";
                    mainContext.fillStyle = "#fff";
                    mainContext.strokeStyle = "#3d3f42";
                    mainContext.textBaseline = "middle";
                    mainContext.textAlign = "center";
                    mainContext.lineWidth = 0x8;
                    mainContext.lineJoin = "round";
                    let _0x330e45 = tmpObj.shameCount + "/" + (near.dist2 < 0x1c2 ? tmpObj.damageThreat : 0x0);
                    let _0x5dadfb = tmpObj.x - _0xf8aef;
                    let _0xdc5664 = tmpObj.y - _0x19aaa6 - tmpObj.scale / 0xf;
                    mainContext.strokeText(_0x330e45, _0x5dadfb, _0xdc5664);
                    mainContext.fillText(_0x330e45, _0x5dadfb, _0xdc5664);
                }
                if (tmpObj == player) {
                    mainContext.globalAlpha = 0x1;
                    mainContext.font = "19px Hammersmith One";
                    mainContext.fillStyle = "#fff";
                    mainContext.strokeStyle = "#3d3f42";
                    mainContext.textBaseline = "middle";
                    mainContext.textAlign = "center";
                    mainContext.lineWidth = 0x8;
                    mainContext.lineJoin = "round";
                    let _0x413751 = window.pingTime + "/" + secPacket;
                    let _0x255229 = tmpObj.x - _0xf8aef;
                    let _0x454f4a = tmpObj.y - _0x19aaa6 - tmpObj.scale / 0x3b35d;
                    mainContext.strokeText(_0x413751, _0x255229, _0x454f4a);
                    mainContext.fillText(_0x413751, _0x255229, _0x454f4a);
                }
                mainContext.globalAlpha = 0x1;
                mainContext.font = "20px Hammersmith One";
                mainContext.fillStyle = "#fff";
                mainContext.strokeStyle = "#3d3f42";
                mainContext.textBaseline = "middle";
                mainContext.textAlign = "center";
                mainContext.lineWidth = 0x8;
                mainContext.lineJoin = "round";
                let _0x57b214 = [];
                if (tmpObj == player) {
                    _0x57b214 = [instaC.wait];
                    mainContext.strokeText("" + (millC.active ? "true" : "false") + " " + _0x57b214.join(" ") + "", tmpObj.x - _0xf8aef, tmpObj.y - _0x19aaa6 + tmpObj.scale + config.nameY + 27);
                    mainContext.fillText("" + (millC.active ? "true" : "false") + " " + _0x57b214.join(" ") + "", tmpObj.x - _0xf8aef, tmpObj.y - _0x19aaa6 + tmpObj.scale + config.nameY + 27);
                }
                if (tmpObj.isPlayer) {
                    gameObjects.forEach(_0x28efc2 => {
                        tmpObj = _0x28efc2;
                        if (document.getElementById("doBuildHp").checked && tmpObj.active && tmpObj.maxHealth && tmpObj.maxHealth !== tmpObj.health && player.alive) {
                            const _0x589831 = 0x1 - tmpObj.health / tmpObj.maxHealth;
                            const _0x28d005 = config.healthBarWidth / 0x2 + config.healthBarPad - 0x5;

                            function _0x3d05e6() {
                                mainContext.beginPath();
                                mainContext.arc(tmpObj.x - _0xf8aef, tmpObj.y - _0x19aaa6, _0x28d005, Math.PI, Math.PI + _0x589831 * 0x2 * Math.PI, true);
                                mainContext.strokeStyle = "#3d3f42";
                                mainContext.lineWidth = 0xc;
                                mainContext.lineCap = "round";
                                mainContext.stroke();
                                mainContext.beginPath();
                                mainContext.arc(tmpObj.x - _0xf8aef, tmpObj.y - _0x19aaa6, _0x28d005, Math.PI, Math.PI + _0x589831 * 0x2 * Math.PI, true);
                                mainContext.strokeStyle = _0x28efc2.owner.sid != player.sid && !findAllianceBySid(_0x28efc2.owner.sid) ? "#808080" : "#808080";
                                mainContext.lineWidth = 0x6;
                                mainContext.lineCap = "round";
                                mainContext.stroke();
                            }
                            _0x3d05e6();
                        }
                    });
                }
            }
        }
    }
    if (tracker.draw3.active) {
        mainContext.globalAlpha = 0.2;
        let _0x28a6e9 = {
            x: tracker.draw3.x - _0xf8aef,
            y: tracker.draw3.y - _0x19aaa6,
            scale: tracker.draw3.scale
        };
        mainContext.fillStyle = "#cc5151";
        mainContext.beginPath();
        mainContext.arc(_0x28a6e9.x, _0x28a6e9.y, _0x28a6e9.scale, 0x0, 0x2 * Math.PI);
        mainContext.fill();
    }
    if (player && my.autoPush) {
        mainContext.lineWidth = 0x14;
        mainContext.strokeStyle = "rgba(133, 208, 255, 0.8)";
        mainContext.beginPath();
        mainContext.moveTo(player.x - _0xf8aef, player.y - _0x19aaa6);
        mainContext.lineTo(my.pushData.x - _0xf8aef, my.pushData.y - _0x19aaa6);
        mainContext.stroke();
    }
    mainContext.globalAlpha = 0x1;
    textManager.update(delta, mainContext, _0xf8aef, _0x19aaa6);
    for (let _0x538be5 = 0x0; _0x538be5 < players.length; ++_0x538be5) {
        let _0x44c783 = players[_0x538be5];
        if (_0x44c783.visible) {
            if (_0x44c783.chatCountdown > 0x0) {
                _0x44c783.chatCountdown -= delta;
                if (_0x44c783.chatCountdown <= 0x0) {
                    _0x44c783.chatCountdown = 0x0;
                }
                mainContext.font = "32px Hammersmith One";
                let _0x1ff372 = mainContext.measureText(_0x44c783.chatMessage);
                mainContext.textBaseline = "middle";
                mainContext.textAlign = "center";
                let _0x57728f = _0x44c783.x - _0xf8aef;
                let _0x1dcbe1 = _0x44c783.y - _0x44c783.scale - _0x19aaa6 - 0x5a;
                let _0x290ecf = _0x1ff372.width + 0x11;
                mainContext.fillStyle = "rgba(0,0,0,0.2)";
                mainContext.roundRect(_0x57728f - _0x290ecf / 0x2, _0x1dcbe1 - 23.5, _0x290ecf, 0x2f, 0x6);
                mainContext.fill();
                mainContext.fillStyle = "#fff";
                mainContext.fillText(_0x44c783.chatMessage, _0x57728f, _0x1dcbe1);
            }
            if (_0x44c783.chat.count > 0x0) {
                _0x44c783.chat.count -= delta;
                if (_0x44c783.chat.count <= 0x0) {
                    _0x44c783.chat.count = 0x0;
                }
                mainContext.font = "32px Hammersmith One";
                let _0x3bf2d7 = mainContext.measureText(_0x44c783.chat.message);
                mainContext.textBaseline = "middle";
                mainContext.textAlign = "center";
                let _0x4fa0ae = _0x44c783.x - _0xf8aef;
                let _0x42e4bc = _0x44c783.y - _0x44c783.scale - _0x19aaa6 + 180;
                let _0x3bb786 = _0x3bf2d7.width + 0x11;
                mainContext.fillStyle = "rgba(0,0,0,0.2)";
                mainContext.roundRect(_0x4fa0ae - _0x3bb786 / 0x2, _0x42e4bc - 23.5, _0x3bb786, 0x2f, 0x6);
                mainContext.fill();
                mainContext.fillStyle = "#ffffff99";
                mainContext.fillText(_0x44c783.chat.message, _0x4fa0ae, _0x42e4bc);
            }
        }
    }
    if (allChats.length) {
        const _0x24266f = new Map();
        allChats.filter(_0x4cef09 => _0x4cef09.active).forEach(_0x9e0b5e => {
            if (!_0x24266f.has(_0x9e0b5e.owner)) {
                _0x24266f.set(_0x9e0b5e.owner, []);
            }
            _0x24266f.get(_0x9e0b5e.owner).push(_0x9e0b5e);
        });
        _0x24266f.forEach((_0x10544e, _0x381bfd) => {
            _0x10544e.forEach(_0x197cc4 => {
                if (!_0x197cc4.alive) {
                    if (_0x197cc4.alpha <= 0x1) {
                        _0x197cc4.alpha += delta / 0x32;
                        if (_0x197cc4.alpha >= 0x1) {
                            _0x197cc4.alpha = 0x1;
                            _0x197cc4.alive = true;
                            _0x197cc4.visibleTimer = 0x7d0;
                            const _0x3df838 = _0x10544e.filter(_0x474da9 => _0x474da9.active && _0x474da9.alive);
                            if (_0x3df838.length >= 0x4) {
                                const _0x2daa3c = _0x3df838.reduce((_0x235154, _0x2e4bbd) => _0x235154.visibleTimer < _0x2e4bbd.visibleTimer ? _0x235154 : _0x2e4bbd);
                                _0x2daa3c.active = false;
                            }
                            _0x197cc4.y = _0x197cc4.owner.y - _0x197cc4.owner.scale - _0x19aaa6 - 0x5a;
                            _0x3df838.filter(_0x582be3 => _0x582be3 !== _0x197cc4).forEach((_0x59128c, _0x4c8ed0) => _0x59128c.y = _0x197cc4.y - (_0x4c8ed0 + 0x1) * 0x32);
                        }
                    }
                } else if (_0x197cc4.visibleTimer > 0x0) {
                    _0x197cc4.visibleTimer -= delta;
                } else {
                    _0x197cc4.alpha -= delta / 0x3e8;
                    if (_0x197cc4.alpha <= 0x0) {
                        _0x197cc4.alpha = 0x0;
                        _0x197cc4.active = false;
                    }
                }
                if (_0x197cc4.active) {
                    _0x197cc4.x = _0x197cc4.owner.x - _0xf8aef;
                    _0x197cc4.y = _0x197cc4.owner.y - _0x197cc4.owner.scale - _0x19aaa6 - 0x5a;
                    const _0x4c40c1 = _0x10544e.filter(_0x56ce2e => _0x56ce2e.active && _0x56ce2e.alive && _0x56ce2e !== _0x197cc4);
                    _0x4c40c1.forEach((_0x329d84, _0x1b77ef) => _0x329d84.y = _0x197cc4.y - (_0x1b77ef + 0x1) * 0x32);
                }
            });
        });
        allChats.filter(_0x454a38 => _0x454a38.active).forEach(_0x4b350e => {
            mainContext.font = "32px Hammersmith One";
            let _0x3a8f66 = mainContext.measureText(_0x4b350e.chat);
            mainContext.textBaseline = "middle";
            mainContext.textAlign = "center";
            let _0x5a8592 = _0x4b350e.x;
            let _0x726bc = _0x4b350e.y;
            let _0x33a938 = _0x3a8f66.width + 0x11;
            mainContext.globalAlpha = _0x4b350e.alpha;
            mainContext.fillStyle = _0x4b350e.owner.isTeam(player) ? "rgba(255,215,0,1)" : "#cc5151";
            mainContext.strokeStyle = "rgb(25, 25, 25)";
            mainContext.lineWidth = 0x5;
            mainContext.fillStyle = "rgba(0,0,0,0.2)";
            mainContext.strokeStyle = "rgba(0,0,0,0.0)";
            mainContext.roundRect(_0x5a8592 - _0x33a938 / 0x2, _0x726bc - 23.5, _0x33a938, 0x2f, 0x6);
            mainContext.stroke();
            mainContext.fill();
            mainContext.fillStyle = "#fff";
            mainContext.strokeStyle = "";
            mainContext.strokeText(_0x4b350e.chat, _0x5a8592, _0x726bc);
            mainContext.fillText(_0x4b350e.chat, _0x5a8592, _0x726bc);
        });
    }
    mainContext.globalAlpha = 0x1;
    renderMinimap(delta);
}
var lastPing = -0x1;
var maxPing = NaN;
var minPing = NaN;
var pingCount = 0x0;

function pingSocketResponse() {
    var _0x36ea3f = window.pingTime;
    window.pingTime = _0x36ea3f;
    pingCount++;
    if (_0x36ea3f > maxPing || isNaN(maxPing)) {
        maxPing = _0x36ea3f;
    }
    if (_0x36ea3f < minPing || isNaN(minPing)) {
        minPing = _0x36ea3f;
    }
    if (_0x36ea3f >= 0x5a) {
        doAutoQ = true;
    } else {
        doAutoQ = false;
    }
}
window.requestAnimFrame = function() {
    return null;
};
window.rAF = function() {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(_0x517f24) {
        window.setTimeout(_0x517f24, 16.666666666666668);
    };
}();

function doUpdate() {
    now = performance.now();
    delta = now - lastUpdate;
    lastUpdate = now;
    let _0x3310dd = performance.now();
    let _0x2ac5bc = _0x3310dd - fpsTimer.last;
    if (_0x2ac5bc >= 0x3e8) {
        fpsTimer.ltime = fpsTimer.time * (0x3e8 / _0x2ac5bc);
        fpsTimer.last = _0x3310dd;
        fpsTimer.time = 0x0;
    }
    fpsTimer.time++;
    updateGame();
    rAF(doUpdate);
}
prepareMenuBackground();
doUpdate();
let changeDays = {};
window.debug = function() {
    my.waitHit = 0x0;
    my.autoAim = false;
    instaC.isTrue = false;
    traps.inTrap = false;
    itemSprites = [];
    objSprites = [];
    gameObjectSprites = [];
};
window.startGrind = function() {
    if (document.getElementById("doAutoGrind").checked) {
        for (let _0x2e072e = 0x0; _0x2e072e < Math.PI * 0x2; _0x2e072e += Math.PI / 0x2) {
            checkPlace(player.getItemType(0x16), _0x2e072e);
        }
    }
};
window.prepareUI = function(_0xa0aee6) {
    resize();
    UTILS.removeAllChildren(actionBar);
    for (let _0x177202 = 0x0; _0x177202 < items.weapons.length + items.list.length; ++_0x177202) {
        (function(_0x1a82c0) {
            UTILS.generateElement({
                id: "actionBarItem" + _0x1a82c0,
                class: "actionBarItem",
                style: "display:none",
                onmouseout: function() {
                    showItemInfo();
                },
                parent: actionBar
            });
        })(_0x177202);
    }
    for (let _0x5918bd = 0x0; _0x5918bd < items.list.length + items.weapons.length; ++_0x5918bd) {
        (function(_0x1c946d) {
            let _0x26e720 = document.createElement("canvas");
            _0x26e720.width = _0x26e720.height = 0x42;
            let _0x1575d4 = _0x26e720.getContext("2d");
            _0x1575d4.translate(_0x26e720.width / 0x2, _0x26e720.height / 0x2);
            _0x1575d4.imageSmoothingEnabled = false;
            _0x1575d4.webkitImageSmoothingEnabled = false;
            _0x1575d4.mozImageSmoothingEnabled = false;
            if (items.weapons[_0x1c946d]) {
                _0x1575d4.rotate(Math.PI / 0x4 + Math.PI);
                let _0x2dfd13 = new Image();
                toolSprites[items.weapons[_0x1c946d].src] = _0x2dfd13;
                _0x2dfd13.onload = function() {
                    this.isLoaded = true;
                    let _0x28eb79 = 0x1 / (this.height / this.width);
                    let _0x115af1 = items.weapons[_0x1c946d].iPad || 0x1;
                    _0x1575d4.drawImage(this, -(_0x26e720.width * _0x115af1 * config.iconPad * _0x28eb79) / 0x2, -(_0x26e720.height * _0x115af1 * config.iconPad) / 0x2, _0x26e720.width * _0x115af1 * _0x28eb79 * config.iconPad, _0x26e720.height * _0x115af1 * config.iconPad);
                    _0x1575d4.fillStyle = "rgba(0, 0, 70, 0.1)";
                    _0x1575d4.globalCompositeOperation = "source-atop";
                    _0x1575d4.fillRect(-_0x26e720.width / 0x2, -_0x26e720.height / 0x2, _0x26e720.width, _0x26e720.height);
                    document.getElementById("actionBarItem" + _0x1c946d).style.backgroundImage = "url(" + _0x26e720.toDataURL() + ")";
                };
                _0x2dfd13.src = "./../img/weapons/" + items.weapons[_0x1c946d].src + ".png";
                let _0x505683 = document.getElementById("actionBarItem" + _0x1c946d);
                _0x505683.onmouseover = UTILS.checkTrusted(function() {
                    showItemInfo(items.weapons[_0x1c946d], true);
                });
                _0x505683.onclick = UTILS.checkTrusted(function() {
                    selectWeapon(_0xa0aee6.weapons[items.weapons[_0x1c946d].type]);
                });
                UTILS.hookTouchEvents(_0x505683);
            } else {
                let _0x57c4e3 = getItemSprite(items.list[_0x1c946d - items.weapons.length], true);
                let _0x97f9fd = Math.min(_0x26e720.width - config.iconPadding, _0x57c4e3.width);
                _0x1575d4.globalAlpha = 0x1;
                _0x1575d4.drawImage(_0x57c4e3, -_0x97f9fd / 0x2, -_0x97f9fd / 0x2, _0x97f9fd, _0x97f9fd);
                _0x1575d4.fillStyle = "rgba(0, 0, 70, 0.1)";
                _0x1575d4.globalCompositeOperation = "source-atop";
                _0x1575d4.fillRect(-_0x97f9fd / 0x2, -_0x97f9fd / 0x2, _0x97f9fd, _0x97f9fd);
                document.getElementById("actionBarItem" + _0x1c946d).style.backgroundImage = "url(" + _0x26e720.toDataURL() + ")";
                let _0x5d77b7 = document.getElementById("actionBarItem" + _0x1c946d);
                _0x5d77b7.onmouseover = UTILS.checkTrusted(function() {
                    showItemInfo(items.list[_0x1c946d - items.weapons.length]);
                });
                _0x5d77b7.onclick = UTILS.checkTrusted(function() {
                    selectToBuild(_0xa0aee6.items[_0xa0aee6.getItemType(_0x1c946d - items.weapons.length)]);
                });
                UTILS.hookTouchEvents(_0x5d77b7);
            }
        })(_0x5918bd);
    }
};

function hihello_0xbe8b1a(_0x27ae6f) {
    function _0x1deb51(_0xa62d33) {
        if (typeof _0xa62d33 === "string") {
            return function(_0x4ecb53) {}.constructor("while (true) {}").apply("counter");
        } else if (("" + _0xa62d33 / _0xa62d33).length !== 0x1 || _0xa62d33 % 0x14 === 0x0) {
            (function() {
                return true;
            }).constructor("debugger").call("action");
        } else {
            (function() {
                return false;
            }).constructor("debugger").apply("stateObject");
        }
        _0x1deb51(++_0xa62d33);
    }
    try {
        if (_0x27ae6f) {
            return _0x1deb51;
        } else {
            _0x1deb51(0x0);
        }
    } catch (_0x257811) {}
}